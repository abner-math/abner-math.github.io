<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Abner Araujo]]></title>
  <link href="http://abner-math.github.io/atom.xml" rel="self"/>
  <link href="http://abner-math.github.io/"/>
  <updated>2023-02-11T16:19:07+01:00</updated>
  <id>http://abner-math.github.io/</id>
  <author>
    <name><![CDATA[Abner Araujo]]></name>
    <email><![CDATA[abner.math.c@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Parsing a Hand-drawn Hash Game]]></title>
    <link href="http://abner-math.github.io/blog/2017/06/10/intepreting-a-hand-drawn-hash-game/"/>
    <updated>2017-06-10T17:11:40-03:00</updated>
    <id>http://abner-math.github.io/blog/2017/06/10/intepreting-a-hand-drawn-hash-game</id>
    <content type="html"><![CDATA[<p>In this tutorial I will show you how to parse a hand-drawn hash game with Computer Vision techniques to determine who&rsquo;s the winner (if any). See the example below:</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/XHP72q16iU8" frameborder="0" allowfullscreen></iframe>




<!-- more --> 


<p>For this tutorial we are going to use <a href="http://www.opencv.org/">OpenCV 3.2</a>.</p>

<p>Basically, in order to perform what we intend, we need first to detect where are the &lsquo;x&rsquo; and the &lsquo;o&rsquo;, and later check if they are aligned in such way that indicates a win (aligned on horizontal, vertical or diagonal).</p>

<p>Check the image below:</p>

<p style="text-align:center;"><img src="http://abner-math.github.io/images/posts/hash1.png" alt="" /></p>

<p>This is the kind of image we want to deal with. In order to detect each element of that image, we need to segment them. We can do that easily with the OpenCV <code>connectedComponents</code> function. What it does is very simple: For each white pixel of a binary image it associates a label indicating to which group (or connected component) the pixel belongs to. A connected component is a set of white pixels where each pixel is a neighbor of some other white pixel within the same component.</p>

<p>For the image above, it would output three connected components: the hash, the &lsquo;x&rsquo; symbol and the &lsquo;o&rsquo; symbol. Once we have all them three apart, the detection process becomes much easier.</p>

<figure class='code'><figcaption><span>hash.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;opencv2/core/core.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;opencv2/highgui/highgui.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;opencv2/imgproc/imgproc.hpp&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">gImg</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Rect</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">getConnectedComponents</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">labels</span><span class="p">(</span><span class="n">gImg</span><span class="p">.</span><span class="n">rows</span><span class="p">,</span> <span class="n">gImg</span><span class="p">.</span><span class="n">cols</span><span class="p">,</span> <span class="n">CV_32S</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">connectedComponents</span><span class="p">(</span><span class="n">gImg</span><span class="p">,</span> <span class="n">labels</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="o">*</span><span class="n">label</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">labels</span><span class="p">.</span><span class="n">data</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Point2i</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">components</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">labels</span><span class="p">.</span><span class="n">rows</span><span class="p">;</span> <span class="n">y</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">labels</span><span class="p">.</span><span class="n">cols</span><span class="p">;</span> <span class="n">x</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">label</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="c1">// not background</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">components</span><span class="p">[</span><span class="o">*</span><span class="n">label</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">Point2i</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">));</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="o">++</span><span class="n">label</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Rect</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">connectedComponents</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="o">&gt;</span> <span class="n">imgs</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Rect</span><span class="o">&gt;</span> <span class="n">rects</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">components</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">it</span> <span class="o">!=</span> <span class="n">components</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">it</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">Rect</span> <span class="n">boundingRect</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">img</span> <span class="o">=</span> <span class="n">getComponentImg</span><span class="p">(</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">,</span> <span class="n">boundingRect</span><span class="p">);</span>
</span><span class='line'>      <span class="n">connectedComponents</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">boundingRect</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">connectedComponents</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">gImg</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">imread</span><span class="p">(</span><span class="s">&quot;hash1.png&quot;</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Ok! In order to call the <code>connectedComponents</code> function, we need to pass a image of same dimension of the input image. It will store the label associated to each pixel. Then it iterates over each pixel of the label image and saves the position in a map that associates a label to a vector of positions. After that, we want to get bounding rect and a image containing only the pixels of a determined component. For that I&rsquo;m calling the <code>getComponentImg</code> function. Let&rsquo;s see how it&rsquo;s implemented:</p>

<figure class='code'><figcaption><span>hash.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">getComponentImg</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Point2i</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">pixels</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Rect</span> <span class="o">&amp;</span><span class="n">boundingRect</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">minX</span> <span class="o">=</span> <span class="n">INT_MAX</span><span class="p">,</span> <span class="n">maxX</span> <span class="o">=</span> <span class="n">INT_MIN</span><span class="p">,</span> <span class="n">minY</span> <span class="o">=</span> <span class="n">INT_MAX</span><span class="p">,</span> <span class="n">maxY</span> <span class="o">=</span> <span class="n">INT_MIN</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">pixels</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">Point2i</span> <span class="n">pixel</span> <span class="o">=</span> <span class="n">pixels</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">pixel</span><span class="p">.</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">minX</span><span class="p">)</span> <span class="n">minX</span> <span class="o">=</span> <span class="n">pixel</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">pixel</span><span class="p">.</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">maxX</span><span class="p">)</span> <span class="n">maxX</span> <span class="o">=</span> <span class="n">pixel</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">pixel</span><span class="p">.</span><span class="n">y</span> <span class="o">&lt;</span> <span class="n">minY</span><span class="p">)</span> <span class="n">minY</span> <span class="o">=</span> <span class="n">pixel</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">pixel</span><span class="p">.</span><span class="n">y</span> <span class="o">&gt;</span> <span class="n">maxY</span><span class="p">)</span> <span class="n">maxY</span> <span class="o">=</span> <span class="n">pixel</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">boundingRect</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">Rect</span><span class="p">(</span><span class="n">minX</span><span class="p">,</span> <span class="n">minY</span><span class="p">,</span> <span class="n">maxX</span> <span class="o">-</span> <span class="n">minX</span> <span class="o">+</span> <span class="mi">20</span><span class="p">,</span> <span class="n">maxY</span> <span class="o">-</span> <span class="n">minY</span> <span class="o">+</span> <span class="mi">20</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">img</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="o">::</span><span class="n">zeros</span><span class="p">(</span><span class="n">boundingRect</span><span class="p">.</span><span class="n">height</span><span class="p">,</span> <span class="n">boundingRect</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">CV_8U</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">pixels</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">Point2i</span> <span class="n">pixel</span> <span class="o">=</span> <span class="n">pixels</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">boundingRect</span><span class="p">.</span><span class="n">tl</span><span class="p">()</span> <span class="o">+</span> <span class="n">cv</span><span class="o">::</span><span class="n">Point2i</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>      <span class="n">img</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="n">uchar</span><span class="o">&gt;</span><span class="p">(</span><span class="n">pixel</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="n">pixel</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">uchar</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">255</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">img</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Very straight-forward, since we already have a list containing all the positions of the elements within the connected component. All we need to that is get the min and dimensions of those pixels, then calculate a bounding rect, creating a image of the dimension of the bounding rect, iterate over each position and set it in the image we just created.</p>

<p>Ok!!! Now we have each element separated, as we can see below:</p>

<p style="text-align:center;"><img src="http://abner-math.github.io/images/posts/hash2.png" alt="" /></p>

<p style="text-align:center;"><img src="http://abner-math.github.io/images/posts/hash3.png" alt="" /></p>

<p style="text-align:center;"><img src="http://abner-math.github.io/images/posts/hash4.png" alt="" /></p>

<p>How can we accomplish the detection now? Well, there are many many ways. I&rsquo;m going to diver the machine learning path. We will train a neural network with many examples of &lsquo;x&rsquo; and &lsquo;o&rsquo;, in such way that the next time the user draw any of them, the classifier will know which of them the user drew. Once we know that, we just need to check the alignment and ta-dah! Very simple.</p>

<p>Obviously, we can&rsquo;t train with the raw images (because their dimension vary. we could draw at a time a big &lsquo;x&rsquo; and then a small &lsquo;x&rsquo;. we could resize, we then we were performing distortions). We need a feature descriptor. In this example, I&rsquo;m going to user a <strong>Histogram of oriented gradients</strong>, because it makes the most sense, since the &lsquo;x&rsquo; symbol have a very different gradient than a &lsquo;o&rsquo;.</p>

<p>Ok, ok, calm down!!! What is a <em>gradient</em> you are talking about, exactly?</p>

<p>In Calculus, <em>gradient</em> is the rate of change of a function at a given point. Just see image below:</p>

<p style="text-align:center;"><img src="http://abner-math.github.io/images/posts/gradient.jpg" alt="" /></p>

<p>This represent the gradient of the f(x) = x<sup>2</sup> function. Obviously, since we are squaring &lsquo;x&rsquo;, higher values of &lsquo;x&rsquo; outputs much higher values of f(x) than lower values of &lsquo;x&rsquo;. Thus, the gradient on the left side is negative (since it is the direction which f(x) changes most) and has a increasing values as &lsquo;x&rsquo; increase. The same can be said about the right side, but with oposite direction.</p>

<p>But what does it have to do with images? Can we calculate gradients of images? Of course yes!!! Images are nothing else than 2D discrete functions.</p>

<p style="text-align:center;"><img src="http://abner-math.github.io/images/posts/gradient_images.png" alt="" /></p>

<p>Since we can&rsquo;t know exactly the f(x) for a image, we need to calculate an approximation for the gradient, calculating the difference between two neighbors pixels for each dimension. In fact, this is exactly what the <a href="https://en.wikipedia.org/wiki/Sobel_operator">Sobel filter</a> does.</p>

<p>In possession of both gradients on &lsquo;x&rsquo; and &lsquo;y&rsquo; direction, we can calculate the angle to which the gradient is pointing to by taking the inverse tangent of x and y. For the &lsquo;x&rsquo; symbol, the gradient will point alongside the edges (thus only two directions) while for the &lsquo;o&rsquo; symbol, the gradient will tangent each pixel, and since it&rsquo;s a ellipse, we are going to have gradients pointing to many directions. That way we can distinguish a symbol from another.</p>

<p style="text-align:center;"><img src="http://abner-math.github.io/images/posts/hog.jpg" alt="" /></p>

<p>Enough talking!! Let&rsquo;s see the code:</p>

<figure class='code'><figcaption><span>hash.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span> <span class="n">getHistogramOfOrientations</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="o">&amp;</span><span class="n">component</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span> <span class="n">histogramOfOrientations</span><span class="p">(</span><span class="n">HISTOGRAM_SIZE</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">gradX</span><span class="p">,</span> <span class="n">gradY</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Sobel</span><span class="p">(</span><span class="n">component</span><span class="p">,</span> <span class="n">gradX</span><span class="p">,</span> <span class="n">CV_32F</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">BORDER_DEFAULT</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Sobel</span><span class="p">(</span><span class="n">component</span><span class="p">,</span> <span class="n">gradY</span><span class="p">,</span> <span class="n">CV_32F</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">BORDER_DEFAULT</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">float</span> <span class="o">*</span><span class="n">gradXPtr</span> <span class="o">=</span> <span class="p">(</span><span class="kt">float</span><span class="o">*</span><span class="p">)</span><span class="n">gradX</span><span class="p">.</span><span class="n">data</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">float</span> <span class="o">*</span><span class="n">gradYPtr</span> <span class="o">=</span> <span class="p">(</span><span class="kt">float</span><span class="o">*</span><span class="p">)</span><span class="n">gradY</span><span class="p">.</span><span class="n">data</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">end</span> <span class="o">=</span> <span class="n">gradX</span><span class="p">.</span><span class="n">rows</span> <span class="o">*</span> <span class="n">gradX</span><span class="p">.</span><span class="n">cols</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">end</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">float</span> <span class="n">x</span> <span class="o">=</span> <span class="o">*</span><span class="n">gradXPtr</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">float</span> <span class="n">y</span> <span class="o">=</span> <span class="o">*</span><span class="n">gradYPtr</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">float</span> <span class="n">orientation</span> <span class="o">=</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">atan2</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="n">M_PI</span><span class="p">)</span> <span class="o">*</span> <span class="mi">180</span> <span class="o">/</span> <span class="n">M_PI</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">float</span> <span class="n">norm</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">sqrt</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">pow</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="n">std</span><span class="o">::</span><span class="n">pow</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span>
</span><span class='line'>      <span class="n">histogramOfOrientations</span><span class="p">[(</span><span class="kt">int</span><span class="p">)(</span><span class="n">orientation</span> <span class="o">/</span> <span class="p">(</span><span class="mf">360.0f</span> <span class="o">/</span> <span class="n">HISTOGRAM_SIZE</span><span class="p">))</span> <span class="o">%</span> <span class="n">HISTOGRAM_SIZE</span><span class="p">]</span> <span class="o">+=</span> <span class="n">norm</span><span class="p">;</span>
</span><span class='line'>      <span class="n">sum</span> <span class="o">+=</span> <span class="n">norm</span><span class="p">;</span>
</span><span class='line'>      <span class="o">++</span><span class="n">gradXPtr</span><span class="p">;</span>
</span><span class='line'>      <span class="o">++</span><span class="n">gradYPtr</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">HISTOGRAM_SIZE</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">histogramOfOrientations</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">/=</span> <span class="n">sum</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">histogramOfOrientations</span><span class="p">;</span>    
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Set a variable named HISTOGRAM_SIZE to determine the number of bins of the histogram (lower values are better, due to the curse of dimensionality thing).</p>

<p>Training the classifier is pretty straight-forward also, once we have the histograms of each sample:</p>

<figure class='code'><figcaption><span>hash.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="nf">learnClassifier</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">trainSamples</span><span class="p">(</span><span class="mi">3</span> <span class="o">*</span> <span class="n">NUM_DRAWINGS</span><span class="p">,</span> <span class="n">HISTOGRAM_SIZE</span><span class="p">,</span> <span class="n">CV_32F</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">trainResponses</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="o">::</span><span class="n">zeros</span><span class="p">(</span><span class="mi">3</span> <span class="o">*</span> <span class="n">NUM_DRAWINGS</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">CV_32F</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">classId</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">classId</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="n">classId</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">sampleId</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">sampleId</span> <span class="o">&lt;</span> <span class="n">NUM_DRAWINGS</span><span class="p">;</span> <span class="n">sampleId</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">featureId</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">featureId</span> <span class="o">&lt;</span> <span class="n">HISTOGRAM_SIZE</span><span class="p">;</span> <span class="n">featureId</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">trainSamples</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">classId</span> <span class="o">*</span> <span class="n">NUM_DRAWINGS</span> <span class="o">+</span> <span class="n">sampleId</span><span class="p">,</span> <span class="n">featureId</span><span class="p">)</span> <span class="o">=</span> <span class="n">gFeatures</span><span class="p">[</span><span class="n">classId</span><span class="p">][</span><span class="n">sampleId</span><span class="p">][</span><span class="n">featureId</span><span class="p">];</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">trainResponses</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">classId</span> <span class="o">*</span> <span class="n">NUM_DRAWINGS</span> <span class="o">+</span> <span class="n">sampleId</span><span class="p">,</span> <span class="n">classId</span><span class="p">)</span> <span class="o">=</span> <span class="mf">1.0f</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">gNeuralNetwork</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">ml</span><span class="o">::</span><span class="n">ANN_MLP</span><span class="o">::</span><span class="n">create</span><span class="p">();</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">layerSizes</span> <span class="o">=</span> <span class="p">{</span> <span class="n">HISTOGRAM_SIZE</span><span class="p">,</span> <span class="n">HISTOGRAM_SIZE</span> <span class="o">*</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span> <span class="p">};</span>
</span><span class='line'>  <span class="n">gNeuralNetwork</span><span class="o">-&gt;</span><span class="n">setLayerSizes</span><span class="p">(</span><span class="n">layerSizes</span><span class="p">);</span>
</span><span class='line'>  <span class="n">gNeuralNetwork</span><span class="o">-&gt;</span><span class="n">setActivationFunction</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">ml</span><span class="o">::</span><span class="n">ANN_MLP</span><span class="o">::</span><span class="n">SIGMOID_SYM</span><span class="p">);</span>
</span><span class='line'>  <span class="n">gNeuralNetwork</span><span class="o">-&gt;</span><span class="n">train</span><span class="p">(</span><span class="n">trainSamples</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">ml</span><span class="o">::</span><span class="n">ROW_SAMPLE</span><span class="p">,</span> <span class="n">trainResponses</span><span class="p">);</span>
</span><span class='line'>  <span class="n">gNeuralNetwork</span><span class="o">-&gt;</span><span class="n">save</span><span class="p">(</span><span class="s">&quot;mlp.yaml&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>NUM_DRAWINGS</code> is the number of samples for each class. The samples are stored in a 3D array named <code>gFeatures</code>. Pay special attention to the <code>layerSizes</code> variables. It&rsquo;s the variable which determines the number of neurons for each layer. It has a profound impact in the performance of a neural network.</p>

<p>Finally, we just need to get the label associated to each component, group them and check their alignment.</p>

<figure class='code'><figcaption><span>hash.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">bool</span> <span class="nf">checkWinner</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Rect</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">cells</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">cells</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Rect</span><span class="o">&gt;</span> <span class="n">horizontalLine</span> <span class="o">=</span> <span class="p">{</span> <span class="n">cells</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">};</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Rect</span><span class="o">&gt;</span> <span class="n">verticalLine</span> <span class="o">=</span> <span class="p">{</span> <span class="n">cells</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">};</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Rect</span><span class="o">&gt;</span> <span class="n">diagonal</span> <span class="o">=</span> <span class="p">{</span> <span class="n">cells</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">};</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">x1s</span> <span class="o">=</span> <span class="n">cells</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">x1e</span> <span class="o">=</span> <span class="n">cells</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">x</span> <span class="o">+</span> <span class="n">cells</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">width</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">y1s</span> <span class="o">=</span> <span class="n">cells</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">y1e</span> <span class="o">=</span> <span class="n">cells</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">y</span> <span class="o">+</span> <span class="n">cells</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">height</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">cells</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">x2s</span> <span class="o">=</span> <span class="n">cells</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">x2e</span> <span class="o">=</span> <span class="n">cells</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">x</span> <span class="o">+</span> <span class="n">cells</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">width</span><span class="p">;</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">y2s</span> <span class="o">=</span> <span class="n">cells</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">y2e</span> <span class="o">=</span> <span class="n">cells</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">y</span> <span class="o">+</span> <span class="n">cells</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">height</span><span class="p">;</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">x2s</span> <span class="o">&gt;=</span> <span class="n">x1s</span> <span class="o">&amp;&amp;</span> <span class="n">x2s</span> <span class="o">&lt;=</span> <span class="n">x1e</span> <span class="o">||</span> <span class="n">x1s</span> <span class="o">&gt;=</span> <span class="n">x2s</span> <span class="o">&amp;&amp;</span> <span class="n">x1s</span> <span class="o">&lt;=</span> <span class="n">x2e</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">verticalLine</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">cells</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">y2s</span> <span class="o">&gt;=</span> <span class="n">y1s</span> <span class="o">&amp;&amp;</span> <span class="n">y2s</span> <span class="o">&lt;=</span> <span class="n">y1e</span> <span class="o">||</span> <span class="n">y1s</span> <span class="o">&gt;=</span> <span class="n">y2s</span> <span class="o">&amp;&amp;</span> <span class="n">y1s</span> <span class="o">&lt;=</span> <span class="n">y2e</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">horizontalLine</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">cells</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">y2s</span> <span class="o">&gt;</span> <span class="n">diagonal</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">y</span> <span class="o">&amp;&amp;</span> <span class="n">x2s</span> <span class="o">&gt;</span> <span class="n">diagonal</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">x</span>
</span><span class='line'>              <span class="o">&amp;&amp;</span> <span class="n">y2e</span> <span class="o">&gt;</span> <span class="n">diagonal</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">y</span> <span class="o">+</span> <span class="n">diagonal</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">height</span> <span class="o">&amp;&amp;</span> <span class="n">x2e</span> <span class="o">&gt;</span> <span class="n">diagonal</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">x</span> <span class="o">+</span> <span class="n">diagonal</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">width</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">diagonal</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">cells</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">horizontalLine</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">drawHorizontalLine</span><span class="p">(</span><span class="n">horizontalLine</span><span class="p">);</span>
</span><span class='line'>              <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">verticalLine</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">drawVerticalLine</span><span class="p">(</span><span class="n">verticalLine</span><span class="p">);</span>
</span><span class='line'>              <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">diagonal</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">drawDiagonalLine</span><span class="p">(</span><span class="n">diagonal</span><span class="p">);</span>
</span><span class='line'>              <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the final code I included many more details, such as asking the user to draw some examples of &lsquo;x&rsquo; and &lsquo;o&rsquo; so the neural network have samples to train on. See it below:</p>

<p><strong>FINAL CODE</strong></p>

<center><input id="spoiler" type="button" value="See source code" onclick="toggle_visibility('code');"></center>


<div id="code">
<figure class='code'><figcaption><span>hash.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;map&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;opencv2/core/core.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;opencv2/highgui/highgui.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;opencv2/imgproc/imgproc.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;opencv2/ml/ml.hpp&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define STATE_DRAW_X 0</span>
</span><span class='line'><span class="cp">#define STATE_DRAW_O 1</span>
</span><span class='line'><span class="cp">#define STATE_PLAY 2</span>
</span><span class='line'><span class="cp">#define NUM_DRAWINGS 5</span>
</span><span class='line'><span class="cp">#define HISTOGRAM_SIZE 8</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="n">gMouseDown</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">gImg</span><span class="p">;</span>
</span><span class='line'><span class="n">cv</span><span class="o">::</span><span class="n">Point2i</span> <span class="n">gMousePosition</span><span class="p">;</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">gFeatures</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">gCurrentState</span> <span class="o">=</span> <span class="n">STATE_DRAW_X</span><span class="p">;</span>
</span><span class='line'><span class="n">cv</span><span class="o">::</span><span class="n">Ptr</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">ml</span><span class="o">::</span><span class="n">ANN_MLP</span><span class="o">&gt;</span> <span class="n">gNeuralNetwork</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span> <span class="n">getHistogramOfOrientations</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="o">&amp;</span><span class="n">component</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span> <span class="n">histogramOfOrientations</span><span class="p">(</span><span class="n">HISTOGRAM_SIZE</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">gradX</span><span class="p">,</span> <span class="n">gradY</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Sobel</span><span class="p">(</span><span class="n">component</span><span class="p">,</span> <span class="n">gradX</span><span class="p">,</span> <span class="n">CV_32F</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">BORDER_DEFAULT</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Sobel</span><span class="p">(</span><span class="n">component</span><span class="p">,</span> <span class="n">gradY</span><span class="p">,</span> <span class="n">CV_32F</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">BORDER_DEFAULT</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">float</span> <span class="o">*</span><span class="n">gradXPtr</span> <span class="o">=</span> <span class="p">(</span><span class="kt">float</span><span class="o">*</span><span class="p">)</span><span class="n">gradX</span><span class="p">.</span><span class="n">data</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">float</span> <span class="o">*</span><span class="n">gradYPtr</span> <span class="o">=</span> <span class="p">(</span><span class="kt">float</span><span class="o">*</span><span class="p">)</span><span class="n">gradY</span><span class="p">.</span><span class="n">data</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">end</span> <span class="o">=</span> <span class="n">gradX</span><span class="p">.</span><span class="n">rows</span> <span class="o">*</span> <span class="n">gradX</span><span class="p">.</span><span class="n">cols</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">end</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">float</span> <span class="n">x</span> <span class="o">=</span> <span class="o">*</span><span class="n">gradXPtr</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">float</span> <span class="n">y</span> <span class="o">=</span> <span class="o">*</span><span class="n">gradYPtr</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">float</span> <span class="n">orientation</span> <span class="o">=</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">atan2</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="n">M_PI</span><span class="p">)</span> <span class="o">*</span> <span class="mi">180</span> <span class="o">/</span> <span class="n">M_PI</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">float</span> <span class="n">norm</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">sqrt</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">pow</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="n">std</span><span class="o">::</span><span class="n">pow</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span>
</span><span class='line'>      <span class="n">histogramOfOrientations</span><span class="p">[(</span><span class="kt">int</span><span class="p">)(</span><span class="n">orientation</span> <span class="o">/</span> <span class="p">(</span><span class="mf">360.0f</span> <span class="o">/</span> <span class="n">HISTOGRAM_SIZE</span><span class="p">))</span> <span class="o">%</span> <span class="n">HISTOGRAM_SIZE</span><span class="p">]</span> <span class="o">+=</span> <span class="n">norm</span><span class="p">;</span>
</span><span class='line'>      <span class="n">sum</span> <span class="o">+=</span> <span class="n">norm</span><span class="p">;</span>
</span><span class='line'>      <span class="o">++</span><span class="n">gradXPtr</span><span class="p">;</span>
</span><span class='line'>      <span class="o">++</span><span class="n">gradYPtr</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">HISTOGRAM_SIZE</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">histogramOfOrientations</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">/=</span> <span class="n">sum</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">histogramOfOrientations</span><span class="p">;</span>    
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">getComponentImg</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Point2i</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">pixels</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Rect</span> <span class="o">&amp;</span><span class="n">boundingRect</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">minX</span> <span class="o">=</span> <span class="n">INT_MAX</span><span class="p">,</span> <span class="n">maxX</span> <span class="o">=</span> <span class="n">INT_MIN</span><span class="p">,</span> <span class="n">minY</span> <span class="o">=</span> <span class="n">INT_MAX</span><span class="p">,</span> <span class="n">maxY</span> <span class="o">=</span> <span class="n">INT_MIN</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">pixels</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">Point2i</span> <span class="n">pixel</span> <span class="o">=</span> <span class="n">pixels</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">pixel</span><span class="p">.</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">minX</span><span class="p">)</span> <span class="n">minX</span> <span class="o">=</span> <span class="n">pixel</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">pixel</span><span class="p">.</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">maxX</span><span class="p">)</span> <span class="n">maxX</span> <span class="o">=</span> <span class="n">pixel</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">pixel</span><span class="p">.</span><span class="n">y</span> <span class="o">&lt;</span> <span class="n">minY</span><span class="p">)</span> <span class="n">minY</span> <span class="o">=</span> <span class="n">pixel</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">pixel</span><span class="p">.</span><span class="n">y</span> <span class="o">&gt;</span> <span class="n">maxY</span><span class="p">)</span> <span class="n">maxY</span> <span class="o">=</span> <span class="n">pixel</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">boundingRect</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">Rect</span><span class="p">(</span><span class="n">minX</span><span class="p">,</span> <span class="n">minY</span><span class="p">,</span> <span class="n">maxX</span> <span class="o">-</span> <span class="n">minX</span> <span class="o">+</span> <span class="mi">20</span><span class="p">,</span> <span class="n">maxY</span> <span class="o">-</span> <span class="n">minY</span> <span class="o">+</span> <span class="mi">20</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">img</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="o">::</span><span class="n">zeros</span><span class="p">(</span><span class="n">boundingRect</span><span class="p">.</span><span class="n">height</span><span class="p">,</span> <span class="n">boundingRect</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">CV_8U</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">pixels</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">Point2i</span> <span class="n">pixel</span> <span class="o">=</span> <span class="n">pixels</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">boundingRect</span><span class="p">.</span><span class="n">tl</span><span class="p">()</span> <span class="o">+</span> <span class="n">cv</span><span class="o">::</span><span class="n">Point2i</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>      <span class="n">img</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="n">uchar</span><span class="o">&gt;</span><span class="p">(</span><span class="n">pixel</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="n">pixel</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">uchar</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">255</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">img</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Rect</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">getConnectedComponents</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">labels</span><span class="p">(</span><span class="n">gImg</span><span class="p">.</span><span class="n">rows</span><span class="p">,</span> <span class="n">gImg</span><span class="p">.</span><span class="n">cols</span><span class="p">,</span> <span class="n">CV_32S</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">connectedComponents</span><span class="p">(</span><span class="n">gImg</span><span class="p">,</span> <span class="n">labels</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="o">*</span><span class="n">label</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">labels</span><span class="p">.</span><span class="n">data</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Point2i</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">components</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">labels</span><span class="p">.</span><span class="n">rows</span><span class="p">;</span> <span class="n">y</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">labels</span><span class="p">.</span><span class="n">cols</span><span class="p">;</span> <span class="n">x</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">label</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="c1">// not background</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">components</span><span class="p">[</span><span class="o">*</span><span class="n">label</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">Point2i</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">));</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="o">++</span><span class="n">label</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Rect</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">connectedComponents</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="o">&gt;</span> <span class="n">imgs</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Rect</span><span class="o">&gt;</span> <span class="n">rects</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">components</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">it</span> <span class="o">!=</span> <span class="n">components</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">it</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">Rect</span> <span class="n">boundingRect</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">img</span> <span class="o">=</span> <span class="n">getComponentImg</span><span class="p">(</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">,</span> <span class="n">boundingRect</span><span class="p">);</span>
</span><span class='line'>      <span class="n">connectedComponents</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">boundingRect</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">connectedComponents</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">getComponentLabel</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="o">&amp;</span><span class="n">component</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span> <span class="n">histogram</span> <span class="o">=</span> <span class="n">getHistogramOfOrientations</span><span class="p">(</span><span class="n">component</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">sample</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">HISTOGRAM_SIZE</span><span class="p">,</span> <span class="n">CV_32F</span><span class="p">,</span> <span class="n">histogram</span><span class="p">.</span><span class="n">data</span><span class="p">());</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">predictions</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gNeuralNetwork</span><span class="o">-&gt;</span><span class="n">predict</span><span class="p">(</span><span class="n">sample</span><span class="p">,</span> <span class="n">predictions</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">label</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">predictions</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">predictions</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">label</span><span class="p">))</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">label</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">label</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">learnClassifier</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">trainSamples</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">NUM_DRAWINGS</span><span class="p">,</span> <span class="n">HISTOGRAM_SIZE</span><span class="p">,</span> <span class="n">CV_32F</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">trainResponses</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="o">::</span><span class="n">zeros</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">NUM_DRAWINGS</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">CV_32F</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">classId</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">classId</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">;</span> <span class="n">classId</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">sampleId</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">sampleId</span> <span class="o">&lt;</span> <span class="n">NUM_DRAWINGS</span><span class="p">;</span> <span class="n">sampleId</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">featureId</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">featureId</span> <span class="o">&lt;</span> <span class="n">HISTOGRAM_SIZE</span><span class="p">;</span> <span class="n">featureId</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">trainSamples</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">classId</span> <span class="o">*</span> <span class="n">NUM_DRAWINGS</span> <span class="o">+</span> <span class="n">sampleId</span><span class="p">,</span> <span class="n">featureId</span><span class="p">)</span> <span class="o">=</span> <span class="n">gFeatures</span><span class="p">[</span><span class="n">classId</span><span class="p">][</span><span class="n">sampleId</span><span class="p">][</span><span class="n">featureId</span><span class="p">];</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">trainResponses</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">classId</span> <span class="o">*</span> <span class="n">NUM_DRAWINGS</span> <span class="o">+</span> <span class="n">sampleId</span><span class="p">,</span> <span class="n">classId</span><span class="p">)</span> <span class="o">=</span> <span class="mf">1.0f</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">gNeuralNetwork</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">ml</span><span class="o">::</span><span class="n">ANN_MLP</span><span class="o">::</span><span class="n">create</span><span class="p">();</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">layerSizes</span> <span class="o">=</span> <span class="p">{</span> <span class="n">HISTOGRAM_SIZE</span><span class="p">,</span> <span class="n">HISTOGRAM_SIZE</span> <span class="o">*</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span> <span class="p">};</span>
</span><span class='line'>  <span class="n">gNeuralNetwork</span><span class="o">-&gt;</span><span class="n">setLayerSizes</span><span class="p">(</span><span class="n">layerSizes</span><span class="p">);</span>
</span><span class='line'>  <span class="n">gNeuralNetwork</span><span class="o">-&gt;</span><span class="n">setActivationFunction</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">ml</span><span class="o">::</span><span class="n">ANN_MLP</span><span class="o">::</span><span class="n">SIGMOID_SYM</span><span class="p">);</span>
</span><span class='line'>  <span class="n">gNeuralNetwork</span><span class="o">-&gt;</span><span class="n">train</span><span class="p">(</span><span class="n">trainSamples</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">ml</span><span class="o">::</span><span class="n">ROW_SAMPLE</span><span class="p">,</span> <span class="n">trainResponses</span><span class="p">);</span>
</span><span class='line'>  <span class="n">gNeuralNetwork</span><span class="o">-&gt;</span><span class="n">save</span><span class="p">(</span><span class="s">&quot;mlp.yaml&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">drawHorizontalLine</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Rect</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">cells</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">minX</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">maxX</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">cells</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">cells</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">cells</span><span class="p">[</span><span class="n">minX</span><span class="p">].</span><span class="n">x</span><span class="p">)</span> <span class="n">minX</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">cells</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">cells</span><span class="p">[</span><span class="n">maxX</span><span class="p">].</span><span class="n">x</span><span class="p">)</span> <span class="n">maxX</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Point2i</span> <span class="n">p1</span><span class="p">(</span><span class="n">cells</span><span class="p">[</span><span class="n">minX</span><span class="p">].</span><span class="n">x</span><span class="p">,</span> <span class="n">cells</span><span class="p">[</span><span class="n">minX</span><span class="p">].</span><span class="n">y</span> <span class="o">+</span> <span class="n">cells</span><span class="p">[</span><span class="n">minX</span><span class="p">].</span><span class="n">height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Point2i</span> <span class="n">p2</span><span class="p">(</span><span class="n">cells</span><span class="p">[</span><span class="n">maxX</span><span class="p">].</span><span class="n">x</span> <span class="o">+</span> <span class="n">cells</span><span class="p">[</span><span class="n">maxX</span><span class="p">].</span><span class="n">width</span><span class="p">,</span> <span class="n">cells</span><span class="p">[</span><span class="n">maxX</span><span class="p">].</span><span class="n">y</span> <span class="o">+</span> <span class="n">cells</span><span class="p">[</span><span class="n">maxX</span><span class="p">].</span><span class="n">height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">img</span><span class="p">(</span><span class="n">gImg</span><span class="p">.</span><span class="n">rows</span><span class="p">,</span> <span class="n">gImg</span><span class="p">.</span><span class="n">cols</span><span class="p">,</span> <span class="n">CV_8UC3</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">line</span><span class="p">(</span><span class="n">gImg</span><span class="p">,</span> <span class="n">p1</span><span class="p">,</span> <span class="n">p2</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Scalar</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">drawVerticalLine</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Rect</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">cells</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">minY</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">maxY</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">cells</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">cells</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">y</span> <span class="o">&lt;</span> <span class="n">cells</span><span class="p">[</span><span class="n">minY</span><span class="p">].</span><span class="n">y</span><span class="p">)</span> <span class="n">minY</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">cells</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">y</span> <span class="o">&gt;</span> <span class="n">cells</span><span class="p">[</span><span class="n">maxY</span><span class="p">].</span><span class="n">y</span><span class="p">)</span> <span class="n">maxY</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Point2i</span> <span class="n">p1</span><span class="p">(</span><span class="n">cells</span><span class="p">[</span><span class="n">minY</span><span class="p">].</span><span class="n">x</span> <span class="o">+</span> <span class="n">cells</span><span class="p">[</span><span class="n">minY</span><span class="p">].</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="n">cells</span><span class="p">[</span><span class="n">minY</span><span class="p">].</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Point2i</span> <span class="n">p2</span><span class="p">(</span><span class="n">cells</span><span class="p">[</span><span class="n">maxY</span><span class="p">].</span><span class="n">x</span> <span class="o">+</span> <span class="n">cells</span><span class="p">[</span><span class="n">maxY</span><span class="p">].</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="n">cells</span><span class="p">[</span><span class="n">maxY</span><span class="p">].</span><span class="n">y</span> <span class="o">+</span> <span class="n">cells</span><span class="p">[</span><span class="n">maxY</span><span class="p">].</span><span class="n">height</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">line</span><span class="p">(</span><span class="n">gImg</span><span class="p">,</span> <span class="n">p1</span><span class="p">,</span> <span class="n">p2</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Scalar</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">drawDiagonalLine</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Rect</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">cells</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">minY</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">maxY</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">cells</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">cells</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">y</span> <span class="o">&lt;</span> <span class="n">cells</span><span class="p">[</span><span class="n">minY</span><span class="p">].</span><span class="n">y</span><span class="p">)</span> <span class="n">minY</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">cells</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">y</span> <span class="o">&gt;</span> <span class="n">cells</span><span class="p">[</span><span class="n">maxY</span><span class="p">].</span><span class="n">y</span><span class="p">)</span> <span class="n">maxY</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Point2i</span> <span class="n">p1</span><span class="p">(</span><span class="n">cells</span><span class="p">[</span><span class="n">minY</span><span class="p">].</span><span class="n">x</span><span class="p">,</span> <span class="n">cells</span><span class="p">[</span><span class="n">minY</span><span class="p">].</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Point2i</span> <span class="n">p2</span><span class="p">(</span><span class="n">cells</span><span class="p">[</span><span class="n">maxY</span><span class="p">].</span><span class="n">x</span> <span class="o">+</span> <span class="n">cells</span><span class="p">[</span><span class="n">maxY</span><span class="p">].</span><span class="n">width</span><span class="p">,</span> <span class="n">cells</span><span class="p">[</span><span class="n">maxY</span><span class="p">].</span><span class="n">y</span> <span class="o">+</span> <span class="n">cells</span><span class="p">[</span><span class="n">maxY</span><span class="p">].</span><span class="n">height</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">line</span><span class="p">(</span><span class="n">gImg</span><span class="p">,</span> <span class="n">p1</span><span class="p">,</span> <span class="n">p2</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Scalar</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="n">checkWinner</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Rect</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">cells</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">cells</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Rect</span><span class="o">&gt;</span> <span class="n">horizontalLine</span> <span class="o">=</span> <span class="p">{</span> <span class="n">cells</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">};</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Rect</span><span class="o">&gt;</span> <span class="n">verticalLine</span> <span class="o">=</span> <span class="p">{</span> <span class="n">cells</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">};</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Rect</span><span class="o">&gt;</span> <span class="n">diagonal</span> <span class="o">=</span> <span class="p">{</span> <span class="n">cells</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">};</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">x1s</span> <span class="o">=</span> <span class="n">cells</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">x1e</span> <span class="o">=</span> <span class="n">cells</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">x</span> <span class="o">+</span> <span class="n">cells</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">width</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">y1s</span> <span class="o">=</span> <span class="n">cells</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">y1e</span> <span class="o">=</span> <span class="n">cells</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">y</span> <span class="o">+</span> <span class="n">cells</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">height</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">cells</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">x2s</span> <span class="o">=</span> <span class="n">cells</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">x2e</span> <span class="o">=</span> <span class="n">cells</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">x</span> <span class="o">+</span> <span class="n">cells</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">width</span><span class="p">;</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">y2s</span> <span class="o">=</span> <span class="n">cells</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">y2e</span> <span class="o">=</span> <span class="n">cells</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">y</span> <span class="o">+</span> <span class="n">cells</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">height</span><span class="p">;</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">x2s</span> <span class="o">&gt;=</span> <span class="n">x1s</span> <span class="o">&amp;&amp;</span> <span class="n">x2s</span> <span class="o">&lt;=</span> <span class="n">x1e</span> <span class="o">||</span> <span class="n">x1s</span> <span class="o">&gt;=</span> <span class="n">x2s</span> <span class="o">&amp;&amp;</span> <span class="n">x1s</span> <span class="o">&lt;=</span> <span class="n">x2e</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">verticalLine</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">cells</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">y2s</span> <span class="o">&gt;=</span> <span class="n">y1s</span> <span class="o">&amp;&amp;</span> <span class="n">y2s</span> <span class="o">&lt;=</span> <span class="n">y1e</span> <span class="o">||</span> <span class="n">y1s</span> <span class="o">&gt;=</span> <span class="n">y2s</span> <span class="o">&amp;&amp;</span> <span class="n">y1s</span> <span class="o">&lt;=</span> <span class="n">y2e</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">horizontalLine</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">cells</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">y2s</span> <span class="o">&gt;</span> <span class="n">diagonal</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">y</span> <span class="o">&amp;&amp;</span> <span class="n">x2s</span> <span class="o">&gt;</span> <span class="n">diagonal</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">x</span>
</span><span class='line'>              <span class="o">&amp;&amp;</span> <span class="n">y2e</span> <span class="o">&gt;</span> <span class="n">diagonal</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">y</span> <span class="o">+</span> <span class="n">diagonal</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">height</span> <span class="o">&amp;&amp;</span> <span class="n">x2e</span> <span class="o">&gt;</span> <span class="n">diagonal</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">x</span> <span class="o">+</span> <span class="n">diagonal</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">width</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">diagonal</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">cells</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">horizontalLine</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">drawHorizontalLine</span><span class="p">(</span><span class="n">horizontalLine</span><span class="p">);</span>
</span><span class='line'>              <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">verticalLine</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">drawVerticalLine</span><span class="p">(</span><span class="n">verticalLine</span><span class="p">);</span>
</span><span class='line'>              <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">diagonal</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">drawDiagonalLine</span><span class="p">(</span><span class="n">diagonal</span><span class="p">);</span>
</span><span class='line'>              <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">processHash</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Rect</span><span class="o">&gt;</span> <span class="o">&gt;</span>  <span class="n">components</span> <span class="o">=</span> <span class="n">getConnectedComponents</span><span class="p">();</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Rect</span><span class="o">&gt;</span> <span class="n">xs</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Rect</span><span class="o">&gt;</span> <span class="n">os</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">biggestComponent</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">components</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">components</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">first</span><span class="p">.</span><span class="n">rows</span> <span class="o">*</span> <span class="n">components</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">first</span><span class="p">.</span><span class="n">cols</span> <span class="o">&gt;</span>
</span><span class='line'>          <span class="n">components</span><span class="p">[</span><span class="n">biggestComponent</span><span class="p">].</span><span class="n">first</span><span class="p">.</span><span class="n">rows</span> <span class="o">*</span> <span class="n">components</span><span class="p">[</span><span class="n">biggestComponent</span><span class="p">].</span><span class="n">first</span><span class="p">.</span><span class="n">cols</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">biggestComponent</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">components</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">biggestComponent</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span> <span class="c1">// the biggest component is obviously the hash</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">label</span> <span class="o">=</span> <span class="n">getComponentLabel</span><span class="p">(</span><span class="n">components</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">first</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">label</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="n">xs</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">components</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">second</span><span class="p">);</span>
</span><span class='line'>      <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">label</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="n">os</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">components</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">second</span><span class="p">);</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">label</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">checkWinner</span><span class="p">(</span><span class="n">xs</span><span class="p">))</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">checkWinner</span><span class="p">(</span><span class="n">os</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">addDrawingFeature</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Rect</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">components</span> <span class="o">=</span> <span class="n">getConnectedComponents</span><span class="p">();</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">components</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="c1">// user didn&#39;t draw anything</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">components</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="c1">// user drew more than one thing, then select the biggest thing</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">biggestComponent</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">components</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">components</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">first</span><span class="p">.</span><span class="n">rows</span> <span class="o">*</span> <span class="n">components</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">first</span><span class="p">.</span><span class="n">cols</span> <span class="o">&gt;</span>
</span><span class='line'>              <span class="n">components</span><span class="p">[</span><span class="n">biggestComponent</span><span class="p">].</span><span class="n">first</span><span class="p">.</span><span class="n">rows</span> <span class="o">*</span> <span class="n">components</span><span class="p">[</span><span class="n">biggestComponent</span><span class="p">].</span><span class="n">first</span><span class="p">.</span><span class="n">cols</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">biggestComponent</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">components</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">components</span><span class="p">[</span><span class="n">biggestComponent</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span> <span class="n">histogram</span> <span class="o">=</span> <span class="n">getHistogramOfOrientations</span><span class="p">(</span><span class="n">components</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">first</span><span class="p">);</span>
</span><span class='line'>  <span class="n">gFeatures</span><span class="p">[</span><span class="n">gCurrentState</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">histogram</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">gFeatures</span><span class="p">[</span><span class="n">gCurrentState</span><span class="p">].</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;=</span> <span class="n">NUM_DRAWINGS</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="o">++</span><span class="n">gCurrentState</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">gCurrentState</span> <span class="o">==</span> <span class="n">STATE_PLAY</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">learnClassifier</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">mouseCallback</span><span class="p">(</span><span class="kt">int</span> <span class="n">event</span><span class="p">,</span> <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">userdata</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">event</span> <span class="o">==</span> <span class="n">cv</span><span class="o">::</span><span class="n">EVENT_LBUTTONDOWN</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">gMouseDown</span> <span class="o">=</span> <span class="o">!</span><span class="n">gMouseDown</span><span class="p">;</span>
</span><span class='line'>      <span class="n">gMousePosition</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">Point2i</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">event</span> <span class="o">==</span> <span class="n">cv</span><span class="o">::</span><span class="n">EVENT_RBUTTONDOWN</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">gCurrentState</span> <span class="o">==</span> <span class="n">STATE_DRAW_X</span> <span class="o">||</span>
</span><span class='line'>          <span class="n">gCurrentState</span> <span class="o">==</span> <span class="n">STATE_DRAW_O</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">addDrawingFeature</span><span class="p">();</span>
</span><span class='line'>          <span class="n">gImg</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="o">::</span><span class="n">zeros</span><span class="p">(</span><span class="mi">480</span><span class="p">,</span> <span class="mi">640</span><span class="p">,</span> <span class="n">CV_8U</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">processHash</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">event</span> <span class="o">==</span> <span class="n">cv</span><span class="o">::</span><span class="n">EVENT_MBUTTONDOWN</span> <span class="o">&amp;&amp;</span> <span class="n">gCurrentState</span> <span class="o">==</span> <span class="n">STATE_PLAY</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">gImg</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="o">::</span><span class="n">zeros</span><span class="p">(</span><span class="mi">480</span><span class="p">,</span> <span class="mi">640</span><span class="p">,</span> <span class="n">CV_8U</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">event</span> <span class="o">==</span> <span class="n">cv</span><span class="o">::</span><span class="n">EVENT_MOUSEMOVE</span> <span class="o">&amp;&amp;</span> <span class="n">gMouseDown</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">line</span><span class="p">(</span><span class="n">gImg</span><span class="p">,</span> <span class="n">gMousePosition</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Point2i</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">),</span> <span class="n">cv</span><span class="o">::</span><span class="n">Scalar</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">),</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>      <span class="n">gMousePosition</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">Point2i</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">img</span> <span class="o">=</span> <span class="n">gImg</span><span class="p">.</span><span class="n">clone</span><span class="p">();</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">cvtColor</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">img</span><span class="p">,</span> <span class="n">CV_GRAY2BGR</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">gCurrentState</span> <span class="o">==</span> <span class="n">STATE_DRAW_X</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">stringstream</span> <span class="n">ss</span><span class="p">;</span>
</span><span class='line'>      <span class="n">ss</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Draw a &#39;X&#39; and then right-click (&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">gFeatures</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">size</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;/&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">NUM_DRAWINGS</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;)&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">putText</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">ss</span><span class="p">.</span><span class="n">str</span><span class="p">(),</span> <span class="n">cv</span><span class="o">::</span><span class="n">Point</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">40</span><span class="p">),</span> <span class="n">cv</span><span class="o">::</span><span class="n">FONT_HERSHEY_SIMPLEX</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Scalar</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">gCurrentState</span> <span class="o">==</span> <span class="n">STATE_DRAW_O</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">stringstream</span> <span class="n">ss</span><span class="p">;</span>
</span><span class='line'>      <span class="n">ss</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Draw a &#39;O&#39; and then right-click (&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">gFeatures</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">size</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;/&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">NUM_DRAWINGS</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;)&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">putText</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">ss</span><span class="p">.</span><span class="n">str</span><span class="p">(),</span> <span class="n">cv</span><span class="o">::</span><span class="n">Point</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">40</span><span class="p">),</span> <span class="n">cv</span><span class="o">::</span><span class="n">FONT_HERSHEY_SIMPLEX</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Scalar</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">imshow</span><span class="p">(</span><span class="s">&quot;Hash&quot;</span><span class="p">,</span> <span class="n">img</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">loadClassifier</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">ifstream</span> <span class="n">input</span><span class="p">(</span><span class="s">&quot;mlp.yaml&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">input</span><span class="p">.</span><span class="n">good</span><span class="p">())</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">input</span><span class="p">.</span><span class="n">close</span><span class="p">();</span>
</span><span class='line'>  <span class="n">gNeuralNetwork</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">ml</span><span class="o">::</span><span class="n">ANN_MLP</span><span class="o">::</span><span class="n">load</span><span class="p">(</span><span class="s">&quot;mlp.yaml&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">gCurrentState</span> <span class="o">=</span> <span class="n">STATE_PLAY</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">gImg</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="o">::</span><span class="n">zeros</span><span class="p">(</span><span class="mi">480</span><span class="p">,</span> <span class="mi">640</span><span class="p">,</span> <span class="n">CV_8U</span><span class="p">);</span>
</span><span class='line'>  <span class="n">loadClassifier</span><span class="p">();</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">namedWindow</span><span class="p">(</span><span class="s">&quot;Hash&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">setMouseCallback</span><span class="p">(</span><span class="s">&quot;Hash&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">mouseCallback</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">imshow</span><span class="p">(</span><span class="s">&quot;Hash&quot;</span><span class="p">,</span> <span class="n">gImg</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">waitKey</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eye Tracking for Mouse Control in OpenCV]]></title>
    <link href="http://abner-math.github.io/blog/2017/01/28/eyeball-tracking-for-mouse-control-in-opencv/"/>
    <updated>2017-01-28T08:27:31-03:00</updated>
    <id>http://abner-math.github.io/blog/2017/01/28/eyeball-tracking-for-mouse-control-in-opencv</id>
    <content type="html"><![CDATA[<p>In this tutorial I will show you how you can control your mouse using only a simple webcam. Nothing fancy, super simple to implementate. Let&rsquo;s get on!</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/jBXS1fbMDjE" frameborder="0" allowfullscreen></iframe>




<!-- more -->


<p>First things&#8217; first. We are going to use <a href="http://opencv.org/">OpenCV</a>, an open-source computer vision library. You can find how to set up it <a href="http://docs.opencv.org/2.4/doc/tutorials/introduction/table_of_content_introduction/table_of_content_introduction.html#table-of-content-introduction">here</a>.</p>

<h2>Reading the webcam</h2>

<p>Let&rsquo;s adopt a baby-steps approach. The very first thing we need is to read the webcam image itself. You can do it through the <code>VideoCapture</code> class in the OpenCV <code>highgui</code> module. <code>VideoCapture</code> takes one parameter, the webcam index or a path to a video.</p>

<figure class='code'><figcaption><span>eye_detector.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;opencv2/core/core.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;opencv2/highgui/highgui.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;opencv2/imgproc/imgproc.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;opencv2/objdetect/objdetect.hpp&gt; </span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">VideoCapture</span> <span class="n">cap</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="c1">// the fist webcam connected to your PC</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">cap</span><span class="p">.</span><span class="n">isOpened</span><span class="p">())</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Webcam not detected.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">frame</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">cap</span> <span class="o">&gt;&gt;</span> <span class="n">frame</span><span class="p">;</span> <span class="c1">// outputs the webcam image to a Mat</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">imshow</span><span class="p">(</span><span class="s">&quot;Webcam&quot;</span><span class="p">,</span> <span class="n">frame</span><span class="p">);</span> <span class="c1">// displays the Mat</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">waitKey</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span> <span class="c1">// takes 30 frames per second. if the user presses any button, it stops from showing the webcam</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I took the liberty of including some OpenCV modules besides the necessary because we are going to need them in the future.</p>

<p>Compile it with this Makefile:</p>

<figure class='code'><figcaption><span>Makefile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Make'><span class='line'><span class="nv">CPP_FLAGS</span><span class="o">=</span>-std<span class="o">=</span>c++11
</span><span class='line'><span class="nf">OPENCV_LIBS</span><span class="o">:</span> -<span class="n">lopencv_core</span> -<span class="n">lopencv_highgui</span> -<span class="n">lopencv_imgproc</span> -<span class="n">lopencv_objdetect</span> -<span class="n">lopencv_imgcodecs</span> -<span class="n">lopencv_videoio</span>
</span><span class='line'><span class="nv">LD_FLAGS</span><span class="o">=</span><span class="k">$(</span>OPENCV_LIBS<span class="k">)</span>
</span><span class='line'>
</span><span class='line'><span class="nf">default</span><span class="o">:</span> <span class="n">EyeDetector</span>
</span><span class='line'><span class="nf">EyeDetector</span><span class="o">:</span> <span class="n">eye_detector</span>.<span class="n">cpp</span>
</span><span class='line'>  g++ <span class="k">$(</span>CPP_FLAGS<span class="k">)</span> <span class="nv">$^</span> -o <span class="nv">$@</span> <span class="k">$(</span>LD_FLAGS<span class="k">)</span>
</span><span class='line'><span class="nf">clean</span><span class="o">:</span>
</span><span class='line'>  rm -f EyeDetector
</span></code></pre></td></tr></table></div></figure>


<p style="text-align:center;"><img src="http://abner-math.github.io/images/posts/eye1.png" alt="" /></p>

<p>Now you can see that it&rsquo;s displaying the webcam image. That&rsquo;s something!</p>

<p>Now let&rsquo;s get into the computer vision stuff!</p>

<h2>Face and eye detection with Viola-Jones algorithm (Theory)</h2>

<p>Here&rsquo;s a bit of theory (you can skip it and go to the next section if you are just not interested): Humans can detect a face very easily, but computers do not. When an image is prompted to the computer, all that it &ldquo;sees&rdquo; is a matrix of numbers. So, given that matrix, how can it predict if it represents or not a face? Answer: Building probability distribuitions through thousands of samples of faces and non-faces. And it&rsquo;s the role of a <strong>classifier</strong> to build those probability distribuitions. But here&rsquo;s the thing: A regular image is composed by thousands of pixels. Even a small 28x28 image is composed by 784 pixels. Each pixel can assume 255 values (if the image is using 8-bits grayscale representation). So that&rsquo;s 255<sup>784</sup> number of possible values. Wow! Estimate probability distribuitions with some many variables is not feasible. This is where the Viola-Jones algorithm kicks in: It extracts a much simpler representations of the image, and combine those simple representations into more high-level representations in a hierarchical way, making the problem in the highest level of representation much more simpler and easier than it would be using the original image. Let&rsquo;s see all the steps of this algorithm.</p>

<h3>Haar-like Feature Extraction</h3>

<p>We have some primitive &ldquo;masks&rdquo;, as shown below:</p>

<p style="text-align:center;"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/2f/Prm_VJ_fig1_featureTypesWithAlpha.png/600px-Prm_VJ_fig1_featureTypesWithAlpha.png" alt="" /></p>

<p>Those masks are slided over the image, and the sum of the values of the pixels within the &ldquo;white&rdquo; sides is subtracted from the &ldquo;black&rdquo; sides. Now the result is a <strong>feature</strong> that represents that region (a whole region summarized in a number).</p>

<h3>Weak classifiers</h3>

<p>Next step is to train many simple classifiers. Each classifier for each kind of mask. Those simple classifiers work as follows: Takes all the features (extracted from its corresponding mask) within the face region and all the features outside the face region, and label them as &ldquo;face&rdquo; or &ldquo;non-face&rdquo; (two classes). It then learns to distinguish features belonging to a face region from features belonging to a non-face region through a simple <strong>threshold function</strong> (i.e., faces features generally have value above or below a certain value, otherwise it&rsquo;s a non-face). This classifier itself is very bad and is almost as good as random guesting. But if combined, they can arise a much better and stronger classifier (weak classifiers, unite!)</p>

<h3>Cascading classifiers</h3>

<p>Given a region, I can submit it to many weak classifiers, as shown above. Each weak classifier will output a number, 1 if it predicted the region as belonging to a face region or 0 otherwise. This result can be weighted. The sum of all weak classifiers weighted outputed results in another <strong>feature</strong>, that, again, can be inputted to another classifier. It&rsquo;s said that that new classifier is a <strong>linear combination</strong> of other classifiers. Its role is to determine the right weight values such as the error be as minimum as possible.</p>

<h3>What about eyes?</h3>

<p>Well, eyes follow the same principle as face detection. But now, if we have a face detector previously trained, the problem becomes sightly simpler, since the eyes will be always located in the face region, reducing dramatically our search space.</p>

<h2>Face and eye detection with Viola-Jones algorithm (practice)</h2>

<p>Thankfully, the above algorithm is already implemented in OpenCV and a classifier using thousands and thousands of faces was already trained for us!</p>

<p>Let&rsquo;s start by reading the trained models. You can download them <a href="https://github.com/opencv/opencv/tree/master/data/haarcascades">here</a>. Put them in the same directory as the .cpp file.</p>

<figure class='code'><figcaption><span>eye_detector.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">CascadeClassifier</span> <span class="n">faceCascade</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">CascadeClassifier</span> <span class="n">eyeCascade</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">faceCascade</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="s">&quot;./haarcascade_frontalface_alt.xml&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Could not load face detector.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">eyeCascade</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="s">&quot;./haarcascade_eye_tree_eyeglasses.xml&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Could not load eye detector.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s modify our loop to include a call to a function named <code>detectEyes</code>:</p>

<figure class='code'><figcaption><span>eye_detector.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="p">...</span>
</span><span class='line'>      <span class="n">detectEyes</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">faceCascade</span><span class="p">,</span> <span class="n">eyeCascade</span><span class="p">);</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">imshow</span><span class="p">(</span><span class="s">&quot;Webcam&quot;</span><span class="p">,</span> <span class="n">frame</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">waitKey</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s implement that function:</p>

<figure class='code'><figcaption><span>eye_detector.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="nf">detectEyes</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="o">&amp;</span><span class="n">frame</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">CascadeClassifier</span> <span class="o">&amp;</span><span class="n">faceCascade</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">CascadeClassifier</span> <span class="o">&amp;</span><span class="n">eyeCascade</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">grayscale</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">cvtColor</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">grayscale</span><span class="p">,</span> <span class="n">CV_BGR2GRAY</span><span class="p">);</span> <span class="c1">// convert image to grayscale</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">equalizeHist</span><span class="p">(</span><span class="n">grayscale</span><span class="p">,</span> <span class="n">grayscale</span><span class="p">);</span> <span class="c1">// enhance image contrast </span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Rect</span><span class="o">&gt;</span> <span class="n">faces</span><span class="p">;</span>
</span><span class='line'>  <span class="n">faceCascade</span><span class="p">.</span><span class="n">detectMultiScale</span><span class="p">(</span><span class="n">grayscale</span><span class="p">,</span> <span class="n">faces</span><span class="p">,</span> <span class="mf">1.1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span> <span class="o">|</span> <span class="n">CV_HAAR_SCALE_IMAGE</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Size</span><span class="p">(</span><span class="mi">150</span><span class="p">,</span> <span class="mi">150</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A break to explain the <code>detectMultiScale</code> method. It takes the following arguments:</p>

<ul>
<li>inputImage: The input image</li>
<li>faces: A vector of rects where the faces were detected</li>
<li>scaleFactor: The classifier will try to upscale and downscale the image in a certain factor (in the above case, in 1.1). It will help to detect faces with more accuracy.</li>
<li>minNumNeighbors: How many true-positive neighbor rectangles do you want to assure before predicting a region as a face? The higher this face, the lower the chance of detecting a non-face as face, but also lower the chance of detecting a face as face.</li>
<li>flags: Some flags. In the above case, we want to scale the image.</li>
<li>minSize: The minimum size which a face can have in our image. A poor quality webcam has frames with 640x480 resolution. So 150x150 is more than enough to cover a face in it.</li>
</ul>


<p>Let&rsquo;s proceed. Now we have the faces detected in the vector <code>faces</code>. What to do next? Eye detection!</p>

<figure class='code'><figcaption><span>eye_detector.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="nf">detectEyes</span><span class="p">(...)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">faces</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span> <span class="c1">// none face was detected</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">face</span> <span class="o">=</span> <span class="n">frame</span><span class="p">(</span><span class="n">faces</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span> <span class="c1">// crop the face</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Rect</span><span class="o">&gt;</span> <span class="n">eyes</span><span class="p">;</span>
</span><span class='line'>  <span class="n">eyeCascade</span><span class="p">.</span><span class="n">detectMultiScale</span><span class="p">(</span><span class="n">face</span><span class="p">,</span> <span class="n">eyes</span><span class="p">,</span> <span class="mf">1.1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span> <span class="o">|</span> <span class="n">CV_HAAR_SCALE_IMAGE</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Size</span><span class="p">(</span><span class="mi">150</span><span class="p">,</span> <span class="mi">150</span><span class="p">));</span> <span class="c1">// same thing as above  </span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we have both face and eyes detected. Let&rsquo;s just test it by drawing the regions where they were detected:</p>

<figure class='code'><figcaption><span>eye_detector.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="nf">detectEyes</span><span class="p">(...)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">rectangle</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">faces</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">tl</span><span class="p">(),</span> <span class="n">faces</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">br</span><span class="p">(),</span> <span class="n">cv</span><span class="o">::</span><span class="n">Scalar</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">eyes</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span> <span class="c1">// both eyes were not detected</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">Rect</span> <span class="o">&amp;</span><span class="nl">eye</span> <span class="p">:</span> <span class="n">eyes</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">rectangle</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">faces</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">tl</span><span class="p">()</span> <span class="o">+</span> <span class="n">eye</span><span class="p">.</span><span class="n">tl</span><span class="p">(),</span> <span class="n">faces</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">tl</span><span class="p">()</span> <span class="o">+</span> <span class="n">eye</span><span class="p">.</span><span class="n">br</span><span class="p">(),</span> <span class="n">cv</span><span class="o">::</span><span class="n">Scalar</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p style="text-align:center;"><img src="http://abner-math.github.io/images/posts/eye2.png" alt="" /></p>

<p>Looking good so far!</p>

<h2>Detecting iris</h2>

<p>Now we have detected the eyes, the next step is to detect the iris. For that, we are going to look for the most &ldquo;circular&rdquo; object in the eye region. Luckily, that&rsquo;s already a function in OpenCV that does just that! It&rsquo;s called <code>HoughCircles</code>, and it works as follows: It first apply an edge detector in the image, from which it make contours and from the contours made it tried to calculate a &ldquo;circularity ratio&rdquo;, i.e., how much that contour looks like a circle.</p>

<p>First we are going to choose one of the eyes to detect the iris. I&rsquo;m going to choose the leftmost.</p>

<figure class='code'><figcaption><span>eye_detector.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">cv</span><span class="o">::</span><span class="n">Rect</span> <span class="n">getLeftmostEye</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Rect</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">eyes</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">leftmost</span> <span class="o">=</span> <span class="mi">99999999</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">leftmostIndex</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">eyes</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">eyes</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">tl</span><span class="p">().</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">leftmost</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">leftmost</span> <span class="o">=</span> <span class="n">eyes</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">tl</span><span class="p">().</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>          <span class="n">leftmostIndex</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">eyes</span><span class="p">[</span><span class="n">leftmostIndex</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">detectEyes</span><span class="p">(...)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Rect</span> <span class="n">eyeRect</span> <span class="o">=</span> <span class="n">getLeftmostEye</span><span class="p">(</span><span class="n">eyes</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>getLeftmostEye</code> only returns the rect from which the top-left position is leftmost. Nothing serious.</p>

<p>After I got the leftmost eye, I&rsquo;m going to crop it, apply a histogram equalization to enhance constrat and then the <code>HoughCircles</code> function to find the circles in my image.</p>

<figure class='code'><figcaption><span>eye_detector.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="nf">detectEyes</span><span class="p">(...)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">eye</span> <span class="o">=</span> <span class="n">face</span><span class="p">(</span><span class="n">eyeRect</span><span class="p">);</span> <span class="c1">// crop the leftmost eye</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">equalizeHist</span><span class="p">(</span><span class="n">eye</span><span class="p">,</span> <span class="n">eye</span><span class="p">);</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Vec3f</span><span class="o">&gt;</span> <span class="n">circles</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">HoughCircles</span><span class="p">(</span><span class="n">eye</span><span class="p">,</span> <span class="n">circles</span><span class="p">,</span> <span class="n">CV_HOUGH_GRADIENT</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">eye</span><span class="p">.</span><span class="n">cols</span> <span class="o">/</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">250</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="n">eye</span><span class="p">.</span><span class="n">rows</span> <span class="o">/</span> <span class="mi">8</span><span class="p">,</span> <span class="n">eye</span><span class="p">.</span><span class="n">rows</span> <span class="o">/</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s take a deep look in what the <code>HoughCircles</code> function expects:</p>

<ul>
<li>inputImage: The input image</li>
<li>circles: The circles that it found</li>
<li>method: Method to be applied</li>
<li>dp: Inverse ratio of the accumulator resolution</li>
<li>minDist: Minimal distance between the center of one circle and another</li>
<li>threshold: Threshold of the edge detector</li>
<li>minArea: What&rsquo;s the min area of a circle in the image?</li>
<li>minRadius: What&rsquo;s the min radius of a circle in the image?</li>
<li>maxRadius: What&rsquo;s the max radius of a circle in the image?</li>
</ul>


<p>Well, that&rsquo;s it&hellip; As the function itself says, it can detect many circles, but we just want one. So let&rsquo;s select the one belonging to the eyeball. For that, I chose a very stupid heuristic: Choose the circle that contains more &ldquo;black&rdquo; pixels in it! In another words, the circle from which the sum of pixels within it is minimal.</p>

<figure class='code'><figcaption><span>eye_detector.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">cv</span><span class="o">::</span><span class="n">Vec3f</span> <span class="n">getEyeball</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="o">&amp;</span><span class="n">eye</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Vec3f</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">circles</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">sums</span><span class="p">(</span><span class="n">circles</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">eye</span><span class="p">.</span><span class="n">rows</span><span class="p">;</span> <span class="n">y</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">uchar</span> <span class="o">*</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">eye</span><span class="p">.</span><span class="n">ptr</span><span class="o">&lt;</span><span class="n">uchar</span><span class="o">&gt;</span><span class="p">(</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">eye</span><span class="p">.</span><span class="n">cols</span><span class="p">;</span> <span class="n">x</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="o">*</span><span class="n">ptr</span><span class="p">);</span>
</span><span class='line'>          <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">circles</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">cv</span><span class="o">::</span><span class="n">Point</span> <span class="n">center</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">std</span><span class="o">::</span><span class="n">round</span><span class="p">(</span><span class="n">circles</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]),</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">std</span><span class="o">::</span><span class="n">round</span><span class="p">(</span><span class="n">circles</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]));</span>
</span><span class='line'>              <span class="kt">int</span> <span class="n">radius</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">std</span><span class="o">::</span><span class="n">round</span><span class="p">(</span><span class="n">circles</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">2</span><span class="p">]);</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">pow</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">center</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="n">std</span><span class="o">::</span><span class="n">pow</span><span class="p">(</span><span class="n">y</span> <span class="o">-</span> <span class="n">center</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">pow</span><span class="p">(</span><span class="n">radius</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'>              <span class="p">{</span>
</span><span class='line'>                  <span class="n">sums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="o">++</span><span class="n">ptr</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">smallestSum</span> <span class="o">=</span> <span class="mi">9999999</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">smallestSumIndex</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">circles</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">sums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">smallestSum</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">smallestSum</span> <span class="o">=</span> <span class="n">sums</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>          <span class="n">smallestSumIndex</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">circles</span><span class="p">[</span><span class="n">smallestSumIndex</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">detectEyes</span><span class="p">(...)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">circles</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">Vec3f</span> <span class="n">eyeball</span> <span class="o">=</span> <span class="n">getEyeball</span><span class="p">(</span><span class="n">eye</span><span class="p">,</span> <span class="n">circles</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order to know if a pixel is inside a pixel or not, we just test if the euclidean distance between the pixel location and the circle center is not higher than the circle radius. Piece of cake.</p>

<p>That&rsquo;s good, now we supposely have the iris. However, the <code>HoughCircles</code> algorithms is very unstable, and therefore the iris location can vary a lot! We need to stabilize it to get better results. To do that, we simply calculate the mean of the last five detected iris locations.</p>

<figure class='code'><figcaption><span>eye_detector.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Point</span><span class="o">&gt;</span> <span class="n">centers</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">cv</span><span class="o">::</span><span class="n">Point</span> <span class="n">stabilize</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Point</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">points</span><span class="p">,</span> <span class="kt">int</span> <span class="n">windowSize</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">sumX</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">sumY</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="n">points</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="n">windowSize</span><span class="p">));</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">points</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">sumX</span> <span class="o">+=</span> <span class="n">points</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>      <span class="n">sumY</span> <span class="o">+=</span> <span class="n">points</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>      <span class="o">++</span><span class="n">count</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">sumX</span> <span class="o">/=</span> <span class="n">count</span><span class="p">;</span>
</span><span class='line'>      <span class="n">sumY</span> <span class="o">/=</span> <span class="n">count</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">cv</span><span class="o">::</span><span class="n">Point</span><span class="p">(</span><span class="n">sumX</span><span class="p">,</span> <span class="n">sumY</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">detectEyes</span><span class="p">(...)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">circles</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">Vec3f</span> <span class="n">eyeball</span> <span class="o">=</span> <span class="n">getEyeball</span><span class="p">(</span><span class="n">eye</span><span class="p">,</span> <span class="n">circles</span><span class="p">);</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">Point</span> <span class="n">center</span><span class="p">(</span><span class="n">eyeball</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">eyeball</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>      <span class="n">centers</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">center</span><span class="p">);</span>
</span><span class='line'>      <span class="n">center</span> <span class="o">=</span> <span class="n">stabilize</span><span class="p">(</span><span class="n">centers</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span> <span class="c1">// we are using the last 5</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, let&rsquo;s draw the iris location and test it!</p>

<figure class='code'><figcaption><span>eye_detector.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="nf">detectEyes</span><span class="p">(...)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">circles</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="p">...</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">circle</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">faces</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">tl</span><span class="p">()</span> <span class="o">+</span> <span class="n">eyeRect</span><span class="p">.</span><span class="n">tl</span><span class="p">()</span> <span class="o">+</span> <span class="n">center</span><span class="p">,</span> <span class="n">radius</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Scalar</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">),</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">circle</span><span class="p">(</span><span class="n">eye</span><span class="p">,</span> <span class="n">center</span><span class="p">,</span> <span class="n">radius</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Scalar</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">),</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">imshow</span><span class="p">(</span><span class="s">&quot;Eye&quot;</span><span class="p">,</span> <span class="n">eye</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p style="text-align:center;"><img src="http://abner-math.github.io/images/posts/eye3.png" alt="" /></p>

<p>Excellent!</p>

<h2>Controlling the mouse</h2>

<p>Well, that&rsquo;s something very specific of the operating system that you&rsquo;re using. I&rsquo;m using Ubuntu, thus I&rsquo;m going to use <code>xdotool</code>. Install xtodo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install xdotool
</span></code></pre></td></tr></table></div></figure>


<p>In xdotool, the command to move the mouse is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>xdotool mousemove x y
</span></code></pre></td></tr></table></div></figure>


<p>Alright. Let&rsquo;s just create a variable that defines the mouse position and then set it each time the iris position changes:</p>

<figure class='code'><figcaption><span>eye_detector.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">cv</span><span class="o">::</span><span class="n">Point</span> <span class="n">lastPoint</span><span class="p">;</span>
</span><span class='line'><span class="n">cv</span><span class="o">::</span><span class="n">Point</span> <span class="n">mousePoint</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">detectEyes</span><span class="p">(...)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">circles</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="p">...</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">centers</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">cv</span><span class="o">::</span><span class="n">Point</span> <span class="n">diff</span><span class="p">;</span>
</span><span class='line'>          <span class="n">diff</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">center</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">lastPoint</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">*</span> <span class="mi">20</span><span class="p">;</span>
</span><span class='line'>          <span class="n">diff</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="p">(</span><span class="n">center</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">lastPoint</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="o">*</span> <span class="o">-</span><span class="mi">30</span><span class="p">;</span> <span class="c1">// diff in y is higher because it&#39;s &quot;harder&quot; to move the eyeball up/down instead of left/right</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">lastPoint</span> <span class="o">=</span> <span class="n">center</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">changeMouse</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="o">&amp;</span><span class="n">frame</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Point</span> <span class="o">&amp;</span><span class="n">location</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">location</span><span class="p">.</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">frame</span><span class="p">.</span><span class="n">cols</span><span class="p">)</span> <span class="n">location</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">frame</span><span class="p">.</span><span class="n">cols</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">location</span><span class="p">.</span><span class="n">x</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="n">location</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">location</span><span class="p">.</span><span class="n">y</span> <span class="o">&gt;</span> <span class="n">frame</span><span class="p">.</span><span class="n">rows</span><span class="p">)</span> <span class="n">location</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">frame</span><span class="p">.</span><span class="n">rows</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">location</span><span class="p">.</span><span class="n">y</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="n">location</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">system</span><span class="p">((</span><span class="s">&quot;xdotool mousemove &quot;</span> <span class="o">+</span> <span class="n">std</span><span class="o">::</span><span class="n">to_string</span><span class="p">(</span><span class="n">location</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">std</span><span class="o">::</span><span class="n">to_string</span><span class="p">(</span><span class="n">location</span><span class="p">.</span><span class="n">y</span><span class="p">)).</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(...)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="p">...</span>
</span><span class='line'>      <span class="n">detectEyes</span><span class="p">(...);</span>
</span><span class='line'>      <span class="n">changeMouse</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">mousePoint</span><span class="p">);</span>
</span><span class='line'>      <span class="p">...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, I&rsquo;m taking the difference of position between the current iris position and the previous iris position. Of course, this is not the best option. Ideally, we would detect the &ldquo;gaze direction&rdquo; in relation to difference between the iris position and the &ldquo;rested&rdquo; iris position. I let it for you to implement! Not that hard.</p>

<p>That&rsquo;s it! Here is the full source code:</p>

<center><input id="spoiler" type="button" value="See source code" onclick="toggle_visibility('code');"></center>


<div id="code">
<figure class='code'><figcaption><span>eye_detector.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;opencv2/core/core.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;opencv2/highgui/highgui.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;opencv2/imgproc/imgproc.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;opencv2/objdetect/objdetect.hpp&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">cv</span><span class="o">::</span><span class="n">Vec3f</span> <span class="n">getEyeball</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="o">&amp;</span><span class="n">eye</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Vec3f</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">circles</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">sums</span><span class="p">(</span><span class="n">circles</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">eye</span><span class="p">.</span><span class="n">rows</span><span class="p">;</span> <span class="n">y</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">uchar</span> <span class="o">*</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">eye</span><span class="p">.</span><span class="n">ptr</span><span class="o">&lt;</span><span class="n">uchar</span><span class="o">&gt;</span><span class="p">(</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">eye</span><span class="p">.</span><span class="n">cols</span><span class="p">;</span> <span class="n">x</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="o">*</span><span class="n">ptr</span><span class="p">);</span>
</span><span class='line'>          <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">circles</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">cv</span><span class="o">::</span><span class="n">Point</span> <span class="n">center</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">std</span><span class="o">::</span><span class="n">round</span><span class="p">(</span><span class="n">circles</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]),</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">std</span><span class="o">::</span><span class="n">round</span><span class="p">(</span><span class="n">circles</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]));</span>
</span><span class='line'>              <span class="kt">int</span> <span class="n">radius</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">std</span><span class="o">::</span><span class="n">round</span><span class="p">(</span><span class="n">circles</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">2</span><span class="p">]);</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">pow</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">center</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="n">std</span><span class="o">::</span><span class="n">pow</span><span class="p">(</span><span class="n">y</span> <span class="o">-</span> <span class="n">center</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">pow</span><span class="p">(</span><span class="n">radius</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'>              <span class="p">{</span>
</span><span class='line'>                  <span class="n">sums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="o">++</span><span class="n">ptr</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">smallestSum</span> <span class="o">=</span> <span class="mi">9999999</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">smallestSumIndex</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">circles</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">sums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">smallestSum</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">smallestSum</span> <span class="o">=</span> <span class="n">sums</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>          <span class="n">smallestSumIndex</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">circles</span><span class="p">[</span><span class="n">smallestSumIndex</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">cv</span><span class="o">::</span><span class="n">Rect</span> <span class="n">getLeftmostEye</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Rect</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">eyes</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">leftmost</span> <span class="o">=</span> <span class="mi">99999999</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">leftmostIndex</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">eyes</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">eyes</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">tl</span><span class="p">().</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">leftmost</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">leftmost</span> <span class="o">=</span> <span class="n">eyes</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">tl</span><span class="p">().</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>          <span class="n">leftmostIndex</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">eyes</span><span class="p">[</span><span class="n">leftmostIndex</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Point</span><span class="o">&gt;</span> <span class="n">centers</span><span class="p">;</span>
</span><span class='line'><span class="n">cv</span><span class="o">::</span><span class="n">Point</span> <span class="n">lastPoint</span><span class="p">;</span>
</span><span class='line'><span class="n">cv</span><span class="o">::</span><span class="n">Point</span> <span class="n">mousePoint</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">cv</span><span class="o">::</span><span class="n">Point</span> <span class="n">stabilize</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Point</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">points</span><span class="p">,</span> <span class="kt">int</span> <span class="n">windowSize</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">sumX</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">sumY</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="n">points</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="n">windowSize</span><span class="p">));</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">points</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">sumX</span> <span class="o">+=</span> <span class="n">points</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>      <span class="n">sumY</span> <span class="o">+=</span> <span class="n">points</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>      <span class="o">++</span><span class="n">count</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">sumX</span> <span class="o">/=</span> <span class="n">count</span><span class="p">;</span>
</span><span class='line'>      <span class="n">sumY</span> <span class="o">/=</span> <span class="n">count</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">cv</span><span class="o">::</span><span class="n">Point</span><span class="p">(</span><span class="n">sumX</span><span class="p">,</span> <span class="n">sumY</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">detectEyes</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="o">&amp;</span><span class="n">frame</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">CascadeClassifier</span> <span class="o">&amp;</span><span class="n">faceCascade</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">CascadeClassifier</span> <span class="o">&amp;</span><span class="n">eyeCascade</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">grayscale</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">cvtColor</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">grayscale</span><span class="p">,</span> <span class="n">CV_BGR2GRAY</span><span class="p">);</span> <span class="c1">// convert image to grayscale</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">equalizeHist</span><span class="p">(</span><span class="n">grayscale</span><span class="p">,</span> <span class="n">grayscale</span><span class="p">);</span> <span class="c1">// enhance image contrast </span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Rect</span><span class="o">&gt;</span> <span class="n">faces</span><span class="p">;</span>
</span><span class='line'>  <span class="n">faceCascade</span><span class="p">.</span><span class="n">detectMultiScale</span><span class="p">(</span><span class="n">grayscale</span><span class="p">,</span> <span class="n">faces</span><span class="p">,</span> <span class="mf">1.1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span> <span class="o">|</span> <span class="n">CV_HAAR_SCALE_IMAGE</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Size</span><span class="p">(</span><span class="mi">150</span><span class="p">,</span> <span class="mi">150</span><span class="p">));</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">faces</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span> <span class="c1">// none face was detected</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">face</span> <span class="o">=</span> <span class="n">grayscale</span><span class="p">(</span><span class="n">faces</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span> <span class="c1">// crop the face</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Rect</span><span class="o">&gt;</span> <span class="n">eyes</span><span class="p">;</span>
</span><span class='line'>  <span class="n">eyeCascade</span><span class="p">.</span><span class="n">detectMultiScale</span><span class="p">(</span><span class="n">face</span><span class="p">,</span> <span class="n">eyes</span><span class="p">,</span> <span class="mf">1.1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span> <span class="o">|</span> <span class="n">CV_HAAR_SCALE_IMAGE</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Size</span><span class="p">(</span><span class="mi">30</span><span class="p">,</span> <span class="mi">30</span><span class="p">));</span> <span class="c1">// same thing as above    </span>
</span><span class='line'>  <span class="n">rectangle</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">faces</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">tl</span><span class="p">(),</span> <span class="n">faces</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">br</span><span class="p">(),</span> <span class="n">cv</span><span class="o">::</span><span class="n">Scalar</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">eyes</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span> <span class="c1">// both eyes were not detected</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">Rect</span> <span class="o">&amp;</span><span class="nl">eye</span> <span class="p">:</span> <span class="n">eyes</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">rectangle</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">faces</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">tl</span><span class="p">()</span> <span class="o">+</span> <span class="n">eye</span><span class="p">.</span><span class="n">tl</span><span class="p">(),</span> <span class="n">faces</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">tl</span><span class="p">()</span> <span class="o">+</span> <span class="n">eye</span><span class="p">.</span><span class="n">br</span><span class="p">(),</span> <span class="n">cv</span><span class="o">::</span><span class="n">Scalar</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Rect</span> <span class="n">eyeRect</span> <span class="o">=</span> <span class="n">getLeftmostEye</span><span class="p">(</span><span class="n">eyes</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">eye</span> <span class="o">=</span> <span class="n">face</span><span class="p">(</span><span class="n">eyeRect</span><span class="p">);</span> <span class="c1">// crop the leftmost eye</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">equalizeHist</span><span class="p">(</span><span class="n">eye</span><span class="p">,</span> <span class="n">eye</span><span class="p">);</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Vec3f</span><span class="o">&gt;</span> <span class="n">circles</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">HoughCircles</span><span class="p">(</span><span class="n">eye</span><span class="p">,</span> <span class="n">circles</span><span class="p">,</span> <span class="n">CV_HOUGH_GRADIENT</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">eye</span><span class="p">.</span><span class="n">cols</span> <span class="o">/</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">250</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="n">eye</span><span class="p">.</span><span class="n">rows</span> <span class="o">/</span> <span class="mi">8</span><span class="p">,</span> <span class="n">eye</span><span class="p">.</span><span class="n">rows</span> <span class="o">/</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">circles</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">Vec3f</span> <span class="n">eyeball</span> <span class="o">=</span> <span class="n">getEyeball</span><span class="p">(</span><span class="n">eye</span><span class="p">,</span> <span class="n">circles</span><span class="p">);</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">Point</span> <span class="n">center</span><span class="p">(</span><span class="n">eyeball</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">eyeball</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>      <span class="n">centers</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">center</span><span class="p">);</span>
</span><span class='line'>      <span class="n">center</span> <span class="o">=</span> <span class="n">stabilize</span><span class="p">(</span><span class="n">centers</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">centers</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">cv</span><span class="o">::</span><span class="n">Point</span> <span class="n">diff</span><span class="p">;</span>
</span><span class='line'>          <span class="n">diff</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">center</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">lastPoint</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">*</span> <span class="mi">20</span><span class="p">;</span>
</span><span class='line'>          <span class="n">diff</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="p">(</span><span class="n">center</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">lastPoint</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="o">*</span> <span class="o">-</span><span class="mi">30</span><span class="p">;</span>
</span><span class='line'>          <span class="n">mousePoint</span> <span class="o">+=</span> <span class="n">diff</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">lastPoint</span> <span class="o">=</span> <span class="n">center</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">radius</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">eyeball</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">circle</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">faces</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">tl</span><span class="p">()</span> <span class="o">+</span> <span class="n">eyeRect</span><span class="p">.</span><span class="n">tl</span><span class="p">()</span> <span class="o">+</span> <span class="n">center</span><span class="p">,</span> <span class="n">radius</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Scalar</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">),</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">circle</span><span class="p">(</span><span class="n">eye</span><span class="p">,</span> <span class="n">center</span><span class="p">,</span> <span class="n">radius</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Scalar</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">),</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">imshow</span><span class="p">(</span><span class="s">&quot;Eye&quot;</span><span class="p">,</span> <span class="n">eye</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">changeMouse</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="o">&amp;</span><span class="n">frame</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Point</span> <span class="o">&amp;</span><span class="n">location</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">location</span><span class="p">.</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">frame</span><span class="p">.</span><span class="n">cols</span><span class="p">)</span> <span class="n">location</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">frame</span><span class="p">.</span><span class="n">cols</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">location</span><span class="p">.</span><span class="n">x</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="n">location</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">location</span><span class="p">.</span><span class="n">y</span> <span class="o">&gt;</span> <span class="n">frame</span><span class="p">.</span><span class="n">rows</span><span class="p">)</span> <span class="n">location</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">frame</span><span class="p">.</span><span class="n">rows</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">location</span><span class="p">.</span><span class="n">y</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="n">location</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">system</span><span class="p">((</span><span class="s">&quot;xdotool mousemove &quot;</span> <span class="o">+</span> <span class="n">std</span><span class="o">::</span><span class="n">to_string</span><span class="p">(</span><span class="n">location</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">std</span><span class="o">::</span><span class="n">to_string</span><span class="p">(</span><span class="n">location</span><span class="p">.</span><span class="n">y</span><span class="p">)).</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Usage: EyeDetector &lt;WEBCAM_INDEX&gt;&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">CascadeClassifier</span> <span class="n">faceCascade</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">CascadeClassifier</span> <span class="n">eyeCascade</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">faceCascade</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="s">&quot;./haarcascade_frontalface_alt.xml&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Could not load face detector.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>    
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">eyeCascade</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="s">&quot;./haarcascade_eye_tree_eyeglasses.xml&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Could not load eye detector.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">VideoCapture</span> <span class="n">cap</span><span class="p">(</span><span class="s">&quot;./sample.mp4&quot;</span><span class="p">);</span> <span class="c1">// the fist webcam connected to your PC</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">cap</span><span class="p">.</span><span class="n">isOpened</span><span class="p">())</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Webcam not detected.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>    
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">frame</span><span class="p">;</span>
</span><span class='line'>  <span class="n">mousePoint</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">Point</span><span class="p">(</span><span class="mi">800</span><span class="p">,</span> <span class="mi">800</span><span class="p">);</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">cap</span> <span class="o">&gt;&gt;</span> <span class="n">frame</span><span class="p">;</span> <span class="c1">// outputs the webcam image to a Mat</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">frame</span><span class="p">.</span><span class="n">data</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="n">detectEyes</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">faceCascade</span><span class="p">,</span> <span class="n">eyeCascade</span><span class="p">);</span>
</span><span class='line'>      <span class="n">changeMouse</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">mousePoint</span><span class="p">);</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">imshow</span><span class="p">(</span><span class="s">&quot;Webcam&quot;</span><span class="p">,</span> <span class="n">frame</span><span class="p">);</span> <span class="c1">// displays the Mat</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">waitKey</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>  <span class="c1">// takes 30 frames per second. if the user presses any button, it stops from showing the webcam</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multithreaded K-Means in Java]]></title>
    <link href="http://abner-math.github.io/blog/2016/03/12/multithreaded-k-means-in-java/"/>
    <updated>2016-03-12T10:13:54-03:00</updated>
    <id>http://abner-math.github.io/blog/2016/03/12/multithreaded-k-means-in-java</id>
    <content type="html"><![CDATA[<p>Single-threaded algorithms are fine and intuitive. There&rsquo;s an single execution flow running our program in the exact order we specified it. However, modern CPUs have multiple cores sharing the same memory space, meaning that many instructions can be executed in the same clock cycle. Having an single execution flow would be a wasteful use of the resources we have available. That&rsquo;s where multithread applications come in: It allows the use of <strong>true</strong> parallelism.</p>

<center><img src="http://abner-math.github.io/images/posts/Rplot02.png" /></center>




<!-- more -->


<h2>K-Means Clustering</h2>

<p><a href="https://en.wikipedia.org/wiki/K-means_clustering">K-Means</a> is a well-known clustering algorithm. Clustering is important in many areas: Machine learning, data mining, etc.,&hellip; Hence the importance of clustering algorithms. It&rsquo;s success is due to two factors: Its simplicity and computational feasibility (running in O(nkdi), where n is the input size, k is the number of clusters, d is the input data dimension and i is the number of iterations needed to converge).</p>

<p>Consider the following dataset:</p>

<center><img src="http://abner-math.github.io/images/posts/Rplot01.png" />
<p>You can download it <a href="http://abner-math.github.io/downloads/s2.txt">here</a>.</p></center>


<p>Knowing the number of clusters at priori (in the above case, 15), we want to know the center of mass of each cluster (the point on which the distance to all other points in the cluster is the minimal possible). In another words:</p>

<p style="text-align:center;"><img src="https://upload.wikimedia.org/math/9/8/3/983406139b111b6676a3db71cc217f2c.png" alt="" /></p>

<p>The intuition behind K-Means is as follows: First, assign k random centers. For each data in the dataset calculate the nearest random point and add it to the &ldquo;cluster set&rdquo; of the nearest center. Then, for each cluster set, calculate the mean point and use this mean point as a substitute to the random center. This process is done iteratively until the mean points remain unchanged between one iteration and another (it&rsquo;s said that the algorithm &ldquo;converged&rdquo;). This gif explains the whole process nicely:</p>

<center><img src="http://abner-math.github.io/images/posts/kmeans.gif" /></center>


<p>Before implementing this in Java, let&rsquo;s write a simple pseudo-code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Inputs:
</span><span class='line'>- dataset: Set of N-dimensional points
</span><span class='line'>- k: Number of clusters
</span><span class='line'>Output:
</span><span class='line'>- The center of mass of each cluster
</span><span class='line'>KMEANS(dataset[], k):
</span><span class='line'>  centers[] = randomly_initialize_points(k)
</span><span class='line'>  converged = false 
</span><span class='line'>  while not converged:
</span><span class='line'>      clusters = {}   
</span><span class='line'>      for each data in dataset:
</span><span class='line'>          center, index = get_nearest_center(data, centers)
</span><span class='line'>          clusters[index].add(data)
</span><span class='line'>      new_centers[] = calculate_means(clusters)
</span><span class='line'>      converged = centers == new_centers
</span><span class='line'>      centers = new_centers
</span><span class='line'>  return centers</span></code></pre></td></tr></table></div></figure>


<p>Take a grasp to ensure you have fully understood the above algorithm.</p>

<h2>Java implementation</h2>

<p>Our whole program will be contained inside a single class, <code>KMeans</code>.</p>

<figure class='code'><figcaption><span>KMeans.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">KMeans</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Inside of it, let&rsquo;s create a inner static class called <code>Point2D</code>, which will representate our data.</p>

<figure class='code'><figcaption><span>KMeans.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">KMeans</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Point2D</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">private</span> <span class="kt">float</span> <span class="n">x</span><span class="o">;</span>
</span><span class='line'>      <span class="kd">private</span> <span class="kt">float</span> <span class="n">y</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">public</span> <span class="nf">Point2D</span><span class="o">(</span><span class="kt">float</span> <span class="n">x</span><span class="o">,</span> <span class="kt">float</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
</span><span class='line'>          <span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="s">&quot;[&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">+</span> <span class="s">&quot;,&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">obj</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="o">!(</span><span class="n">obj</span><span class="o">.</span><span class="na">getClass</span><span class="o">()</span> <span class="o">!=</span> <span class="n">Point2D</span><span class="o">.</span><span class="na">class</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="n">Point2D</span> <span class="n">other</span> <span class="o">=</span> <span class="o">(</span><span class="n">Point2D</span><span class="o">)</span> <span class="n">obj</span><span class="o">;</span>
</span><span class='line'>          <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">==</span> <span class="n">other</span><span class="o">.</span><span class="na">x</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">==</span> <span class="n">other</span><span class="o">.</span><span class="na">y</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nice! Now let&rsquo;s add some methods that will be useful for our program:</p>

<figure class='code'><figcaption><span>KMeans.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">KMeans</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Point2D</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">private</span> <span class="kt">float</span> <span class="n">x</span><span class="o">;</span>
</span><span class='line'>      <span class="kd">private</span> <span class="kt">float</span> <span class="n">y</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kd">public</span> <span class="nf">Point2D</span><span class="o">(</span><span class="kt">float</span> <span class="n">x</span><span class="o">,</span> <span class="kt">float</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
</span><span class='line'>          <span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kd">private</span> <span class="kt">double</span> <span class="nf">getDistance</span><span class="o">(</span><span class="n">Point2D</span> <span class="n">other</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">Math</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">-</span> <span class="n">other</span><span class="o">.</span><span class="na">x</span><span class="o">,</span> <span class="mi">2</span><span class="o">)</span>
</span><span class='line'>                  <span class="o">+</span> <span class="n">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">-</span> <span class="n">other</span><span class="o">.</span><span class="na">y</span><span class="o">,</span> <span class="mi">2</span><span class="o">));</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getNearestPointIndex</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">points</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>          <span class="kt">double</span> <span class="n">minDist</span> <span class="o">=</span> <span class="n">Double</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>
</span><span class='line'>          <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">points</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>              <span class="kt">double</span> <span class="n">dist</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getDistance</span><span class="o">(</span><span class="n">points</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
</span><span class='line'>              <span class="k">if</span> <span class="o">(</span><span class="n">dist</span> <span class="o">&lt;</span> <span class="n">minDist</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">minDist</span> <span class="o">=</span> <span class="n">dist</span><span class="o">;</span>
</span><span class='line'>                  <span class="n">index</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">index</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kd">public</span> <span class="kd">static</span> <span class="n">Point2D</span> <span class="nf">getMean</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">points</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="kt">float</span> <span class="n">accumX</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>          <span class="kt">float</span> <span class="n">accumY</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">points</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="k">new</span> <span class="nf">Point2D</span><span class="o">(</span><span class="n">accumX</span><span class="o">,</span> <span class="n">accumY</span><span class="o">);</span>
</span><span class='line'>          <span class="k">for</span> <span class="o">(</span><span class="n">Point2D</span> <span class="n">point</span> <span class="o">:</span> <span class="n">points</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">accumX</span> <span class="o">+=</span> <span class="n">point</span><span class="o">.</span><span class="na">x</span><span class="o">;</span>
</span><span class='line'>              <span class="n">accumY</span> <span class="o">+=</span> <span class="n">point</span><span class="o">.</span><span class="na">y</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">return</span> <span class="k">new</span> <span class="nf">Point2D</span><span class="o">(</span><span class="n">accumX</span> <span class="o">/</span> <span class="n">points</span><span class="o">.</span><span class="na">size</span><span class="o">(),</span> <span class="n">accumY</span> <span class="o">/</span> <span class="n">points</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="s">&quot;[&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">+</span> <span class="s">&quot;,&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">obj</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="o">!(</span><span class="n">obj</span><span class="o">.</span><span class="na">getClass</span><span class="o">()</span> <span class="o">!=</span> <span class="n">Point2D</span><span class="o">.</span><span class="na">class</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="n">Point2D</span> <span class="n">other</span> <span class="o">=</span> <span class="o">(</span><span class="n">Point2D</span><span class="o">)</span> <span class="n">obj</span><span class="o">;</span>
</span><span class='line'>          <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">==</span> <span class="n">other</span><span class="o">.</span><span class="na">x</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">==</span> <span class="n">other</span><span class="o">.</span><span class="na">y</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The method <code>getDistance</code> calculates the euclidean distance between two points. The method <code>getNearestPointIndex</code> returns the index of the nearest point in a list (it will be used to calculate the nearest center). Finally, <code>getMean</code> is a static method that receives a list of points and returns the mean point of that list (it will be used to calculate the new centers).</p>

<p>Let&rsquo;s proceed now by creating a main to our main class:</p>

<figure class='code'><figcaption><span>KMeans.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">KMeans</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">length</span> <span class="o">!=</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Usage: KMeans &lt;INPUT_FILE&gt; &lt;K&gt;&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">inputFile</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The program expects two arguments: The path to the input file where the data is contained and the number of clusters (k). We read those arguments and set them to the variables <code>inputFile</code> and <code>k</code>.</p>

<p>The next thing we need to do is to read our data. Let&rsquo;s do it now:</p>

<figure class='code'><figcaption><span>KMeans.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">KMeans</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">REPLICATION_FACTOR</span> <span class="o">=</span> <span class="mi">200</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="nf">getDataset</span><span class="o">(</span><span class="n">String</span> <span class="n">inputFile</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">dataset</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>      <span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nf">FileReader</span><span class="o">(</span><span class="n">inputFile</span><span class="o">));</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">line</span><span class="o">;</span>
</span><span class='line'>      <span class="k">while</span> <span class="o">((</span><span class="n">line</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">String</span><span class="o">[]</span> <span class="n">tokens</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">&quot;,&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="kt">float</span> <span class="n">x</span> <span class="o">=</span> <span class="n">Float</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">tokens</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>          <span class="kt">float</span> <span class="n">y</span> <span class="o">=</span> <span class="n">Float</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">tokens</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>
</span><span class='line'>          <span class="n">Point2D</span> <span class="n">point</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Point2D</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">);</span>
</span><span class='line'>          <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">REPLICATION_FACTOR</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span><span class='line'>              <span class="n">dataset</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">point</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">dataset</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="o">...</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">dataset</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">dataset</span> <span class="o">=</span> <span class="n">getDataset</span><span class="o">(</span><span class="n">inputFile</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;ERROR: Could not read file &quot;</span> <span class="o">+</span> <span class="n">inputFile</span><span class="o">);</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The method <code>getDataset</code> receives the path to the input file and returns a list of points. We read the file content using a <code>BufferedReader</code> and puts it into a variable called <code>line</code>. We then split that line by the &ldquo;,&rdquo; symbol (because the coordinates are comma separated), convert each token into a float and create a new <code>Point2D</code> instance from them, adding that instance to the list that will be returned. The only &ldquo;awkward&rdquo; thing is the existence of a for loop while adding the new point instance to the list. I added it to &ldquo;replicate&rdquo; the data (hence the <code>REPLICATION_FACTOR</code> variable), in order to observe the effects of parallelization more clearly.</p>

<p>OK! Now that we have the data, let&rsquo;s randomly initialize the centers.</p>

<figure class='code'><figcaption><span>KMeans.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">KMeans</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="nf">initializeRandomCenters</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span> <span class="n">lowerBound</span><span class="o">,</span> <span class="kt">int</span> <span class="n">upperBound</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">centers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">n</span><span class="o">);</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="kt">float</span> <span class="n">x</span> <span class="o">=</span> <span class="o">(</span><span class="kt">float</span><span class="o">)(</span><span class="n">Math</span><span class="o">.</span><span class="na">random</span><span class="o">()</span> <span class="o">*</span> <span class="o">(</span><span class="n">upperBound</span> <span class="o">-</span> <span class="n">lowerBound</span><span class="o">)</span> <span class="o">+</span> <span class="n">lowerBound</span><span class="o">);</span>
</span><span class='line'>          <span class="kt">float</span> <span class="n">y</span> <span class="o">=</span> <span class="o">(</span><span class="kt">float</span><span class="o">)(</span><span class="n">Math</span><span class="o">.</span><span class="na">random</span><span class="o">()</span> <span class="o">*</span> <span class="o">(</span><span class="n">upperBound</span> <span class="o">-</span> <span class="n">lowerBound</span><span class="o">)</span> <span class="o">+</span> <span class="n">lowerBound</span><span class="o">);</span>
</span><span class='line'>          <span class="n">Point2D</span> <span class="n">point</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Point2D</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">);</span>
</span><span class='line'>          <span class="n">centers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">point</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">centers</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="o">...</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">centers</span> <span class="o">=</span> <span class="n">initializeRandomCenters</span><span class="o">(</span><span class="n">k</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1000000</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I believe the code is pretty straight-forward, so let&rsquo;s proceed.</p>

<p>Now that we have both data and centers, we already can start the kmeans algorithm:</p>

<figure class='code'><figcaption><span>KMeans.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">KMeans</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="nf">kmeans</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">centers</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">dataset</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">boolean</span> <span class="n">converged</span><span class="o">;</span>
</span><span class='line'>      <span class="k">do</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">newCenters</span> <span class="o">=</span> <span class="n">getNewCenters</span><span class="o">(</span><span class="n">dataset</span><span class="o">,</span> <span class="n">centers</span><span class="o">);</span>
</span><span class='line'>          <span class="kt">double</span> <span class="n">dist</span> <span class="o">=</span> <span class="n">getDistance</span><span class="o">(</span><span class="n">centers</span><span class="o">,</span> <span class="n">newCenters</span><span class="o">);</span>
</span><span class='line'>          <span class="n">centers</span> <span class="o">=</span> <span class="n">newCenters</span><span class="o">;</span>
</span><span class='line'>          <span class="n">converged</span> <span class="o">=</span> <span class="n">dist</span> <span class="o">==</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">while</span> <span class="o">(!</span><span class="n">converged</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">centers</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="nf">void</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="o">...</span>
</span><span class='line'>      <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
</span><span class='line'>      <span class="n">kmeans</span><span class="o">(</span><span class="n">centers</span><span class="o">,</span> <span class="n">dataset</span><span class="o">,</span> <span class="n">k</span><span class="o">);</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Time elapsed: &quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">-</span> <span class="n">start</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot;ms&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>kmeans</code> method contains three parameters: <code>centers</code> (our randomly initialized centers), <code>dataset</code> (our set of point) and <code>k</code> (number of clusters) and returns a list of points (the final centers).</p>

<p>There&rsquo;s a do/while loop which checks if the algorithm converged. Inside this loop, we get the new centers through the method <code>getNewCenters</code>, calculate the distance between the new centers and the old centers through the method <code>getDistance</code> and finally assign the old centers to the new centers. The algorithm will converge when the distance is equal to zero (the new centers are equal to the old centers).</p>

<p>Clear? Good, let&rsquo;s start implementing the methods used inside the <code>kmeans</code> method, starting with <code>getNewCenters</code>:</p>

<figure class='code'><figcaption><span>KMeans.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">KMeans</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="nf">getNewCenters</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">dataset</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">centers</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;&gt;</span> <span class="n">clusters</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">centers</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">centers</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">clusters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">Point2D</span> <span class="n">data</span> <span class="o">:</span> <span class="n">dataset</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">getNearestPointIndex</span><span class="o">(</span><span class="n">centers</span><span class="o">);</span>
</span><span class='line'>          <span class="n">clusters</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">index</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">newCenters</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">centers</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">cluster</span> <span class="o">:</span> <span class="n">clusters</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">newCenters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">Point2D</span><span class="o">.</span><span class="na">getMean</span><span class="o">(</span><span class="n">cluster</span><span class="o">));</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">newCenters</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Basically this is core of the K-Means algorithm. We first assign a list of lists called clusters, which is initialized with <code>centers.size()</code> empty lists. Then, for each data in our dataset, we get the nearest center index through the method <code>getNearestPointIndex</code> previously defined and append the data to the cluster list of the nearest center. Finally, on our third loop, for each cluster in clusters, we calculate the mean and append it to the <code>newCenters</code> variable, which we use as the return of our method.</p>

<p>Not very complicated, right? The <code>getDistance</code> method is easier:</p>

<figure class='code'><figcaption><span>KMeans.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">KMeans</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">double</span> <span class="nf">getDistance</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">oldCenters</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">newCenters</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">double</span> <span class="n">accumDist</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">oldCenters</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="kt">double</span> <span class="n">dist</span> <span class="o">=</span> <span class="n">oldCenters</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">getDistance</span><span class="o">(</span><span class="n">newCenters</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
</span><span class='line'>          <span class="n">accumDist</span> <span class="o">+=</span> <span class="n">dist</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">accumDist</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it! Our K-Means algorithm is done. Here&rsquo;s the whole program:</p>

<center><input id="spoiler2" type="button" value="See source code" onclick="toggle_visibility('code2');"></center>


<div id="code2" style="display: none;">
<figure class='code'><figcaption><span>KMeans.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">KMeans</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">REPLICATION_FACTOR</span> <span class="o">=</span> <span class="mi">200</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Point2D</span> <span class="o">{</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kd">private</span> <span class="kt">float</span> <span class="n">x</span><span class="o">;</span>
</span><span class='line'>      <span class="kd">private</span> <span class="kt">float</span> <span class="n">y</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kd">public</span> <span class="nf">Point2D</span><span class="o">(</span><span class="kt">float</span> <span class="n">x</span><span class="o">,</span> <span class="kt">float</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
</span><span class='line'>          <span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kd">private</span> <span class="kt">double</span> <span class="nf">getDistance</span><span class="o">(</span><span class="n">Point2D</span> <span class="n">other</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">Math</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">-</span> <span class="n">other</span><span class="o">.</span><span class="na">x</span><span class="o">,</span> <span class="mi">2</span><span class="o">)</span>
</span><span class='line'>                  <span class="o">+</span> <span class="n">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">-</span> <span class="n">other</span><span class="o">.</span><span class="na">y</span><span class="o">,</span> <span class="mi">2</span><span class="o">));</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getNearestPointIndex</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">points</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>          <span class="kt">double</span> <span class="n">minDist</span> <span class="o">=</span> <span class="n">Double</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>
</span><span class='line'>          <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">points</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>              <span class="kt">double</span> <span class="n">dist</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getDistance</span><span class="o">(</span><span class="n">points</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
</span><span class='line'>              <span class="k">if</span> <span class="o">(</span><span class="n">dist</span> <span class="o">&lt;</span> <span class="n">minDist</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">minDist</span> <span class="o">=</span> <span class="n">dist</span><span class="o">;</span>
</span><span class='line'>                  <span class="n">index</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">index</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kd">public</span> <span class="kd">static</span> <span class="n">Point2D</span> <span class="nf">getMean</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">points</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="kt">float</span> <span class="n">accumX</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>          <span class="kt">float</span> <span class="n">accumY</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">points</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="k">new</span> <span class="nf">Point2D</span><span class="o">(</span><span class="n">accumX</span><span class="o">,</span> <span class="n">accumY</span><span class="o">);</span>
</span><span class='line'>          <span class="k">for</span> <span class="o">(</span><span class="n">Point2D</span> <span class="n">point</span> <span class="o">:</span> <span class="n">points</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">accumX</span> <span class="o">+=</span> <span class="n">point</span><span class="o">.</span><span class="na">x</span><span class="o">;</span>
</span><span class='line'>              <span class="n">accumY</span> <span class="o">+=</span> <span class="n">point</span><span class="o">.</span><span class="na">y</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">return</span> <span class="k">new</span> <span class="nf">Point2D</span><span class="o">(</span><span class="n">accumX</span> <span class="o">/</span> <span class="n">points</span><span class="o">.</span><span class="na">size</span><span class="o">(),</span> <span class="n">accumY</span> <span class="o">/</span> <span class="n">points</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="s">&quot;[&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">+</span> <span class="s">&quot;,&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">obj</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="o">!(</span><span class="n">obj</span><span class="o">.</span><span class="na">getClass</span><span class="o">()</span> <span class="o">!=</span> <span class="n">Point2D</span><span class="o">.</span><span class="na">class</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="n">Point2D</span> <span class="n">other</span> <span class="o">=</span> <span class="o">(</span><span class="n">Point2D</span><span class="o">)</span> <span class="n">obj</span><span class="o">;</span>
</span><span class='line'>          <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">==</span> <span class="n">other</span><span class="o">.</span><span class="na">x</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">==</span> <span class="n">other</span><span class="o">.</span><span class="na">y</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="nf">getDataset</span><span class="o">(</span><span class="n">String</span> <span class="n">inputFile</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">dataset</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>      <span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nf">FileReader</span><span class="o">(</span><span class="n">inputFile</span><span class="o">));</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">line</span><span class="o">;</span>
</span><span class='line'>      <span class="k">while</span> <span class="o">((</span><span class="n">line</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">String</span><span class="o">[]</span> <span class="n">tokens</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">&quot;,&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="kt">float</span> <span class="n">x</span> <span class="o">=</span> <span class="n">Float</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">tokens</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>          <span class="kt">float</span> <span class="n">y</span> <span class="o">=</span> <span class="n">Float</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">tokens</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>
</span><span class='line'>          <span class="n">Point2D</span> <span class="n">point</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Point2D</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">);</span>
</span><span class='line'>          <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">REPLICATION_FACTOR</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span><span class='line'>              <span class="n">dataset</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">point</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">dataset</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="nf">initializeRandomCenters</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span> <span class="n">lowerBound</span><span class="o">,</span> <span class="kt">int</span> <span class="n">upperBound</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">centers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">n</span><span class="o">);</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="kt">float</span> <span class="n">x</span> <span class="o">=</span> <span class="o">(</span><span class="kt">float</span><span class="o">)(</span><span class="n">Math</span><span class="o">.</span><span class="na">random</span><span class="o">()</span> <span class="o">*</span> <span class="o">(</span><span class="n">upperBound</span> <span class="o">-</span> <span class="n">lowerBound</span><span class="o">)</span> <span class="o">+</span> <span class="n">lowerBound</span><span class="o">);</span>
</span><span class='line'>          <span class="kt">float</span> <span class="n">y</span> <span class="o">=</span> <span class="o">(</span><span class="kt">float</span><span class="o">)(</span><span class="n">Math</span><span class="o">.</span><span class="na">random</span><span class="o">()</span> <span class="o">*</span> <span class="o">(</span><span class="n">upperBound</span> <span class="o">-</span> <span class="n">lowerBound</span><span class="o">)</span> <span class="o">+</span> <span class="n">lowerBound</span><span class="o">);</span>
</span><span class='line'>          <span class="n">Point2D</span> <span class="n">point</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Point2D</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">);</span>
</span><span class='line'>          <span class="n">centers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">point</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">centers</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="nf">getNewCenters</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">dataset</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">centers</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;&gt;</span> <span class="n">clusters</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">centers</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">centers</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">clusters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">Point2D</span> <span class="n">data</span> <span class="o">:</span> <span class="n">dataset</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">getNearestPointIndex</span><span class="o">(</span><span class="n">centers</span><span class="o">);</span>
</span><span class='line'>          <span class="n">clusters</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">index</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">newCenters</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">centers</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">cluster</span> <span class="o">:</span> <span class="n">clusters</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">newCenters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">Point2D</span><span class="o">.</span><span class="na">getMean</span><span class="o">(</span><span class="n">cluster</span><span class="o">));</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">newCenters</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">double</span> <span class="nf">getDistance</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">oldCenters</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">newCenters</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">double</span> <span class="n">accumDist</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">oldCenters</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="kt">double</span> <span class="n">dist</span> <span class="o">=</span> <span class="n">oldCenters</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">getDistance</span><span class="o">(</span><span class="n">newCenters</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
</span><span class='line'>          <span class="n">accumDist</span> <span class="o">+=</span> <span class="n">dist</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">accumDist</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="nf">kmeans</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">centers</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">dataset</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">boolean</span> <span class="n">converged</span><span class="o">;</span>
</span><span class='line'>      <span class="k">do</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">newCenters</span> <span class="o">=</span> <span class="n">getNewCenters</span><span class="o">(</span><span class="n">dataset</span><span class="o">,</span> <span class="n">centers</span><span class="o">);</span>
</span><span class='line'>          <span class="kt">double</span> <span class="n">dist</span> <span class="o">=</span> <span class="n">getDistance</span><span class="o">(</span><span class="n">centers</span><span class="o">,</span> <span class="n">newCenters</span><span class="o">);</span>
</span><span class='line'>          <span class="n">centers</span> <span class="o">=</span> <span class="n">newCenters</span><span class="o">;</span>
</span><span class='line'>          <span class="n">converged</span> <span class="o">=</span> <span class="n">dist</span> <span class="o">==</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">while</span> <span class="o">(!</span><span class="n">converged</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">centers</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">length</span> <span class="o">!=</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Usage: KMeans &lt;INPUT_FILE&gt; &lt;K&gt;&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">inputFile</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">dataset</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">dataset</span> <span class="o">=</span> <span class="n">getDataset</span><span class="o">(</span><span class="n">inputFile</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;ERROR: Could not read file &quot;</span> <span class="o">+</span> <span class="n">inputFile</span><span class="o">);</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">centers</span> <span class="o">=</span> <span class="n">initializeRandomCenters</span><span class="o">(</span><span class="n">k</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1000000</span><span class="o">);</span>
</span><span class='line'>      <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
</span><span class='line'>      <span class="n">kmeans</span><span class="o">(</span><span class="n">centers</span><span class="o">,</span> <span class="n">dataset</span><span class="o">,</span> <span class="n">k</span><span class="o">);</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Time elapsed: &quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">-</span> <span class="n">start</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot;ms&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<script>
$(function() {
    $("#code2").hide();
});
</script>


<h2>Parallelization analysis</h2>

<p>Now that we have implemented our K-Means algorithm, it&rsquo;s time to decide what can be parallelized and what cannot be.</p>

<p>Our main method is basically composed by three procedures:</p>

<ul>
<li>Read data</li>
<li>Initialize centers</li>
<li>Call kmeans method</li>
</ul>


<p>The first one cannot be parallelized, the second is too simple. Now let&rsquo;s take a further look at the <code>kmeans</code> method.</p>

<p>We cannot parallelize the loop due to the fact that a iteration depends on the result of the previous iteration. Let&rsquo;s check the loop body then.</p>

<p>The loop body is composed by two method calls:</p>

<ul>
<li>Calculate new centers</li>
<li>Calculate distance between old and new centers</li>
</ul>


<p>The second is too computationally inexpensive (assuming that k is low). Let&rsquo;s take a further look at the first one.</p>

<p>The <code>getNewCenters</code> is composed by three loops:</p>

<ul>
<li>Initialize clusters</li>
<li>Calculate the nearest center for each point in the dataset</li>
<li>Calculate the mean for each cluster</li>
</ul>


<p>The first and third ones are too computationally inexpensive (assuming that k is low). However, the second one is expected to be the most computationally expensive part of our whole program, since it iterates over our data (O(kn)). And since the calculation for the nearest center can be done independently for each point in the dataset, <strong>it can be parallelized</strong>.</p>

<h2>Implementing parallelization</h2>

<p>The basic unit of parallelization in Java is a <strong>thread</strong>. A thread is a execution flow. Since our program is running inside the Java Virtual Machine, there&rsquo;s no guarantee that each thread will be allocated to a different core, if available. However, the JVM does try, so it&rsquo;s our best guess.</p>

<p>In order to parallelize the nearest center calculation loop, we first need to define the number of threads, partition our data by the number of threads, start each thread and wait for their terminations.</p>

<p>First, let&rsquo;s create a method called <code>concurrentKmeans</code> which calls <code>concurrentGetNewCenters</code>:</p>

<figure class='code'><figcaption><span>KMeans.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">KMeans</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="nf">concurrentGetNewCenters</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">dataset</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">centers</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;&gt;</span> <span class="n">clusters</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">centers</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">centers</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">clusters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">Point2D</span> <span class="n">data</span> <span class="o">:</span> <span class="n">dataset</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">getNearestPointIndex</span><span class="o">(</span><span class="n">centers</span><span class="o">);</span>
</span><span class='line'>          <span class="n">clusters</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">index</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">newCenters</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">centers</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">cluster</span> <span class="o">:</span> <span class="n">clusters</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">newCenters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">Point2D</span><span class="o">.</span><span class="na">getMean</span><span class="o">(</span><span class="n">cluster</span><span class="o">));</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">newCenters</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="nf">concurrentKmeans</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">centers</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">dataset</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">boolean</span> <span class="n">converged</span><span class="o">;</span>
</span><span class='line'>      <span class="k">do</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">newCenters</span> <span class="o">=</span> <span class="n">concurrentGetNewCenters</span><span class="o">(</span><span class="n">dataset</span><span class="o">,</span> <span class="n">centers</span><span class="o">);</span>
</span><span class='line'>          <span class="kt">double</span> <span class="n">dist</span> <span class="o">=</span> <span class="n">getDistance</span><span class="o">(</span><span class="n">centers</span><span class="o">,</span> <span class="n">newCenters</span><span class="o">);</span>
</span><span class='line'>          <span class="n">centers</span> <span class="o">=</span> <span class="n">newCenters</span><span class="o">;</span>
</span><span class='line'>          <span class="n">converged</span> <span class="o">=</span> <span class="n">dist</span> <span class="o">==</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">while</span> <span class="o">(!</span><span class="n">converged</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">centers</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="o">...</span>
</span><span class='line'>      <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
</span><span class='line'>      <span class="n">kmeans</span><span class="o">(</span><span class="n">centers</span><span class="o">,</span> <span class="n">dataset</span><span class="o">,</span> <span class="n">k</span><span class="o">);</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Time elapsed: &quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">-</span> <span class="n">start</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot;ms&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">start</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
</span><span class='line'>      <span class="n">concurrentKmeans</span><span class="o">(</span><span class="n">centers</span><span class="o">,</span> <span class="n">dataset</span><span class="o">,</span> <span class="n">k</span><span class="o">);</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Time elapsed: &quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">-</span> <span class="n">start</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot;ms&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s create the method to partition our data:</p>

<figure class='code'><figcaption><span>KMeans.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">KMeans</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;&gt;</span> <span class="nf">partition</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">,</span> <span class="kt">int</span> <span class="n">parts</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;&gt;</span> <span class="n">lists</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;&gt;(</span><span class="n">parts</span><span class="o">);</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">parts</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">lists</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">lists</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="n">parts</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">lists</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is pretty straight-forward, so let&rsquo;s proceed. Now let&rsquo;s define the number of threads and instanciate them inside the <code>concurrentGetNewCenters</code> method.</p>

<figure class='code'><figcaption><span>KMeans.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">KMeans</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">NUM_THREADS</span> <span class="o">=</span> <span class="mi">30</span><span class="o">;</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="nf">concurrentGetNewCenters</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">dataset</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">centers</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;&gt;</span> <span class="n">clusters</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">centers</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">centers</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">clusters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;&gt;</span> <span class="n">partitionedDataset</span> <span class="o">=</span> <span class="n">partition</span><span class="o">(</span><span class="n">dataset</span><span class="o">,</span> <span class="n">NUM_THREADS</span><span class="o">);</span>
</span><span class='line'>      <span class="n">Thread</span> <span class="n">workers</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">[</span><span class="n">NUM_THREADS</span><span class="o">];</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">workers</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">workers</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">createWorker</span><span class="o">(</span><span class="n">partitionedDataset</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">),</span> <span class="n">centers</span><span class="o">,</span> <span class="n">clusters</span><span class="o">);</span>
</span><span class='line'>          <span class="n">workers</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">workers</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">workers</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">join</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">newCenters</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">centers</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">cluster</span> <span class="o">:</span> <span class="n">clusters</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">newCenters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">Point2D</span><span class="o">.</span><span class="na">getMean</span><span class="o">(</span><span class="n">cluster</span><span class="o">));</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">newCenters</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We defined a constant called <code>NUM_THREADS</code> initialized with an arbitrary value. We then partition our data, create an array of threads and in a loop loop we call the method <code>createWorker</code> which returns a new thread, which is started just after it. Finally, we call the method <code>join</code> in order to wait the worker threads termination.</p>

<p>What <code>createWorker</code> should be? Well, initially it can contain the same code we had in the loop body of the non-parallelized code.</p>

<figure class='code'><figcaption><span>KMeans.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">KMeans</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">Thread</span> <span class="nf">createWorker</span><span class="o">(</span><span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">partition</span><span class="o">,</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">centers</span><span class="o">,</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;&gt;</span> <span class="n">clusters</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="k">new</span> <span class="nf">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">for</span> <span class="o">(</span><span class="n">Point2D</span> <span class="n">data</span> <span class="o">:</span> <span class="n">partition</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">getNearestPointIndex</span><span class="o">(</span><span class="n">centers</span><span class="o">);</span>
</span><span class='line'>                  <span class="n">clusters</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">index</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">});</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>While this may seem fine in theory, this program contains a serious problem called <strong>race conditions</strong>, due to the fact that the <code>clusters</code> variable is being modified by many threads <strong>at the same time</strong>. This obviously will lead to problems, so we need to restrict the access to the <code>clusters</code> variable to only one thread at once. In Java, this is done through the keyword <code>synchronized</code> (in more technical therms, <em>synchronized</em> creates a <strong>monitor</strong>. A monitor is a high-level abstration for a <strong>semaphore</strong>, particularly one with capacity equal to one, also called <strong>mutex</strong>, that allows only one execution flow to access the resource being synchronized at once).</p>

<figure class='code'><figcaption><span>KMeans.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">KMeans</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">Thread</span> <span class="nf">createWorker</span><span class="o">(</span><span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">partition</span><span class="o">,</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">centers</span><span class="o">,</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;&gt;</span> <span class="n">clusters</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="k">new</span> <span class="nf">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>              <span class="kd">synchronized</span><span class="o">(</span><span class="n">clusters</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="k">for</span> <span class="o">(</span><span class="n">Point2D</span> <span class="n">data</span> <span class="o">:</span> <span class="n">partition</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                      <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">getNearestPointIndex</span><span class="o">(</span><span class="n">centers</span><span class="o">);</span>
</span><span class='line'>                      <span class="n">clusters</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">index</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">});</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Although the race conditions problem was solved, now our program has a performance issue. Why? Because the <code>synchronized</code> is killing all the parallelization! It&rsquo;s forcing only one thread to execute the loop <em>at once</em>. We can solve this problem by breaking our method into two parts, once to calculate the nearest center and another to save the calculation into the <code>clusters</code> variable. Only the second one must be synchronized, and since it&rsquo;s super fast, it won&rsquo;t kill our parallelization.</p>

<figure class='code'><figcaption><span>KMeans.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">KMeans</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kd">static</span> <span class="n">Thread</span> <span class="nf">createWorker</span><span class="o">(</span><span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">partition</span><span class="o">,</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">centers</span><span class="o">,</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;&gt;</span> <span class="n">clusters</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="k">new</span> <span class="nf">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>              <span class="kt">int</span> <span class="n">indexes</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">indexes</span><span class="o">[</span><span class="n">partition</span><span class="o">.</span><span class="na">size</span><span class="o">()];</span>
</span><span class='line'>              <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">partition</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">indexes</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">partitions</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">getNearestPointIndex</span><span class="o">(</span><span class="n">centers</span><span class="o">);</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              <span class="kd">synchronized</span><span class="o">(</span><span class="n">clusters</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">indexes</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                      <span class="n">clusters</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">indexes</span><span class="o">[</span><span class="n">i</span><span class="o">]).</span><span class="na">add</span><span class="o">(</span><span class="n">partition</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">});</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s just one last thing that need to be fixed in order of our program to become optimal. Suppose we just have 4 cores, but we are creating 30 threads. Even if we manage to successfully allocate each thread to a different core, there are more threads than cores available. In another words, there will be an overhead that can hurt the performance of our program (besides unnecessary memory allocation). We could adjust the number of threads to the number of cores, but let&rsquo;s go to the other way around: Let&rsquo;s make our program only execute a limited number of threads at once. This can be done through the <code>ExecutorService</code>.</p>

<p>The first thing we need to do is to create a new <code>ExecutorService</code> informing the number of threads we want to execute at once. This can be done through the factory method <code>newFixedThreadPool</code>:</p>

<figure class='code'><figcaption><span>KMeans.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">KMeans</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="nf">concurrentGetNewCenters</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">dataset</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">centers</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;&gt;</span> <span class="n">clusters</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">centers</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</span><span class='line'>                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">centers</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">clusters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;());</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;&gt;</span> <span class="n">partitionedDataset</span> <span class="o">=</span> <span class="n">partition</span><span class="o">(</span><span class="n">dataset</span><span class="o">,</span> <span class="n">NUM_THREADS</span><span class="o">);</span>
</span><span class='line'>      <span class="n">ExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="n">Executor</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">availableProcessors</span><span class="o">());</span>
</span><span class='line'>                <span class="n">Thread</span> <span class="n">workers</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">[</span><span class="n">NUM_THREADS</span><span class="o">];</span>
</span><span class='line'>                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">workers</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">workers</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">createWorker</span><span class="o">(</span><span class="n">partitionedDataset</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">),</span> <span class="n">centers</span><span class="o">,</span> <span class="n">clusters</span><span class="o">);</span>
</span><span class='line'>                        <span class="n">workers</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">workers</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                                <span class="n">workers</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">join</span><span class="o">();</span>
</span><span class='line'>                        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">newCenters</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">centers</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</span><span class='line'>                <span class="k">for</span> <span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">cluster</span> <span class="o">:</span> <span class="n">clusters</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">newCenters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">Point2D</span><span class="o">.</span><span class="na">getMean</span><span class="o">(</span><span class="n">cluster</span><span class="o">));</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">newCenters</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>The Runtime method <code>availableProcessors()</code> returns the number of cores available. OK! Now we can call the ExecutorService <code>invokeAll</code> method, which add all threads to the thread pool and blocks the current thread until all workers threads have been finished. Very convenient, right? The <code>invokeAll</code> method expects to receive a list of callables, so let&rsquo;s modify our <code>workerThread</code> method to return a <code>Callable</code> instead of a <code>Thread</code>:</p>

<figure class='code'><figcaption><span>KMeans.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">KMeans</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">Callable</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="nf">createWorker</span><span class="o">(</span><span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">partition</span><span class="o">,</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">centers</span><span class="o">,</span>
</span><span class='line'>          <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;&gt;</span> <span class="n">clusters</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="n">Callable</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="n">Void</span> <span class="nf">call</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>              <span class="kt">int</span> <span class="n">indexes</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">partition</span><span class="o">.</span><span class="na">size</span><span class="o">()];</span>
</span><span class='line'>              <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">partition</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">Point2D</span> <span class="n">data</span> <span class="o">=</span> <span class="n">partition</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>                  <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">getNearestPointIndex</span><span class="o">(</span><span class="n">centers</span><span class="o">);</span>
</span><span class='line'>                  <span class="n">indexes</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">index</span><span class="o">;</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              <span class="kd">synchronized</span> <span class="o">(</span><span class="n">clusters</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">indexes</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                      <span class="n">clusters</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">indexes</span><span class="o">[</span><span class="n">i</span><span class="o">]).</span><span class="na">add</span><span class="o">(</span><span class="n">partition</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
</span><span class='line'>                  <span class="o">}</span>    
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          
</span><span class='line'>      <span class="o">};</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>It&rsquo;s pratically the same code. Now let&rsquo;s call the <code>invokeAll</code> method:</p>

<figure class='code'><figcaption><span>KMeans.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">KMeans</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="nf">concurrentGetNewCenters</span><span class="o">(</span><span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">dataset</span><span class="o">,</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">centers</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;&gt;</span> <span class="n">clusters</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;&gt;(</span><span class="n">centers</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">centers</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">clusters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;&gt;</span> <span class="n">partitionedDataset</span> <span class="o">=</span> <span class="n">partition</span><span class="o">(</span><span class="n">dataset</span><span class="o">,</span> <span class="n">NUM_THREADS</span><span class="o">);</span>
</span><span class='line'>      <span class="n">ExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">availableProcessors</span><span class="o">());</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">Callable</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;&gt;</span> <span class="n">workers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">NUM_THREADS</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">workers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">createWorker</span><span class="o">(</span><span class="n">partitionedDataset</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">),</span> <span class="n">centers</span><span class="o">,</span> <span class="n">clusters</span><span class="o">));</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">executor</span><span class="o">.</span><span class="na">invokeAll</span><span class="o">(</span><span class="n">workers</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">newCenters</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">centers</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">cluster</span> <span class="o">:</span> <span class="n">clusters</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">newCenters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">Point2D</span><span class="o">.</span><span class="na">getMean</span><span class="o">(</span><span class="n">cluster</span><span class="o">));</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">newCenters</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it! Our parallelized version is done! Yay! :D</p>

<h2>Results</h2>

<p>Running our program, we can observe a speedup of 50% of the parallelized version in relation to the non-parallelized version, depending on the number of cores of your CPU.</p>

<figure class='code'><figcaption><span>KMeans.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Non</span><span class="o">-</span><span class="n">parallelized</span> <span class="n">version</span>
</span><span class='line'><span class="n">Time</span> <span class="nl">elapsed:</span> <span class="mi">6324</span><span class="n">ms</span>
</span><span class='line'><span class="n">Parallelized</span> <span class="n">version</span>
</span><span class='line'><span class="n">Time</span> <span class="nl">elapsed:</span> <span class="mi">3396</span><span class="n">ms</span>
</span></code></pre></td></tr></table></div></figure>


<p>By the way, this is the result of the K-Means algorithm for our dataset:</p>

<center><img src="http://abner-math.github.io/images/posts/Rplot02.png" /></center>


<p>Not bad! :)</p>

<p>The full code can be found below.</p>

<center><input id="spoiler" type="button" value="See source code" onclick="toggle_visibility('code');"></center>


<div id="code">
<figure class='code'><figcaption><span>KMeans.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.FileReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.Callable</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.ExecutorService</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.Executors</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">KMeans</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">REPLICATION_FACTOR</span> <span class="o">=</span> <span class="mi">200</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">NUM_THREADS</span> <span class="o">=</span> <span class="mi">30</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Point2D</span> <span class="o">{</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kd">private</span> <span class="kt">float</span> <span class="n">x</span><span class="o">;</span>
</span><span class='line'>      <span class="kd">private</span> <span class="kt">float</span> <span class="n">y</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kd">public</span> <span class="nf">Point2D</span><span class="o">(</span><span class="kt">float</span> <span class="n">x</span><span class="o">,</span> <span class="kt">float</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
</span><span class='line'>          <span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kd">private</span> <span class="kt">double</span> <span class="nf">getDistance</span><span class="o">(</span><span class="n">Point2D</span> <span class="n">other</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">Math</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">-</span> <span class="n">other</span><span class="o">.</span><span class="na">x</span><span class="o">,</span> <span class="mi">2</span><span class="o">)</span>
</span><span class='line'>                  <span class="o">+</span> <span class="n">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">-</span> <span class="n">other</span><span class="o">.</span><span class="na">y</span><span class="o">,</span> <span class="mi">2</span><span class="o">));</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getNearestPointIndex</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">points</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>          <span class="kt">double</span> <span class="n">minDist</span> <span class="o">=</span> <span class="n">Double</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>
</span><span class='line'>          <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">points</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>              <span class="kt">double</span> <span class="n">dist</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getDistance</span><span class="o">(</span><span class="n">points</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
</span><span class='line'>              <span class="k">if</span> <span class="o">(</span><span class="n">dist</span> <span class="o">&lt;</span> <span class="n">minDist</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">minDist</span> <span class="o">=</span> <span class="n">dist</span><span class="o">;</span>
</span><span class='line'>                  <span class="n">index</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">index</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kd">public</span> <span class="kd">static</span> <span class="n">Point2D</span> <span class="nf">getMean</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">points</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="kt">float</span> <span class="n">accumX</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>          <span class="kt">float</span> <span class="n">accumY</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">points</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="k">new</span> <span class="nf">Point2D</span><span class="o">(</span><span class="n">accumX</span><span class="o">,</span> <span class="n">accumY</span><span class="o">);</span>
</span><span class='line'>          <span class="k">for</span> <span class="o">(</span><span class="n">Point2D</span> <span class="n">point</span> <span class="o">:</span> <span class="n">points</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">accumX</span> <span class="o">+=</span> <span class="n">point</span><span class="o">.</span><span class="na">x</span><span class="o">;</span>
</span><span class='line'>              <span class="n">accumY</span> <span class="o">+=</span> <span class="n">point</span><span class="o">.</span><span class="na">y</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">return</span> <span class="k">new</span> <span class="nf">Point2D</span><span class="o">(</span><span class="n">accumX</span> <span class="o">/</span> <span class="n">points</span><span class="o">.</span><span class="na">size</span><span class="o">(),</span> <span class="n">accumY</span> <span class="o">/</span> <span class="n">points</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="s">&quot;[&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">+</span> <span class="s">&quot;,&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">obj</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="o">!(</span><span class="n">obj</span><span class="o">.</span><span class="na">getClass</span><span class="o">()</span> <span class="o">!=</span> <span class="n">Point2D</span><span class="o">.</span><span class="na">class</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="n">Point2D</span> <span class="n">other</span> <span class="o">=</span> <span class="o">(</span><span class="n">Point2D</span><span class="o">)</span> <span class="n">obj</span><span class="o">;</span>
</span><span class='line'>          <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">==</span> <span class="n">other</span><span class="o">.</span><span class="na">x</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">==</span> <span class="n">other</span><span class="o">.</span><span class="na">y</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="nf">getDataset</span><span class="o">(</span><span class="n">String</span> <span class="n">inputFile</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">dataset</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>      <span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nf">FileReader</span><span class="o">(</span><span class="n">inputFile</span><span class="o">));</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">line</span><span class="o">;</span>
</span><span class='line'>      <span class="k">while</span> <span class="o">((</span><span class="n">line</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">String</span><span class="o">[]</span> <span class="n">tokens</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">&quot;,&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="kt">float</span> <span class="n">x</span> <span class="o">=</span> <span class="n">Float</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">tokens</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>          <span class="kt">float</span> <span class="n">y</span> <span class="o">=</span> <span class="n">Float</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">tokens</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>
</span><span class='line'>          <span class="n">Point2D</span> <span class="n">point</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Point2D</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">);</span>
</span><span class='line'>          <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">REPLICATION_FACTOR</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span><span class='line'>              <span class="n">dataset</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">point</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">dataset</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="nf">initializeRandomCenters</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span> <span class="n">lowerBound</span><span class="o">,</span> <span class="kt">int</span> <span class="n">upperBound</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">centers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">n</span><span class="o">);</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="kt">float</span> <span class="n">x</span> <span class="o">=</span> <span class="o">(</span><span class="kt">float</span><span class="o">)(</span><span class="n">Math</span><span class="o">.</span><span class="na">random</span><span class="o">()</span> <span class="o">*</span> <span class="o">(</span><span class="n">upperBound</span> <span class="o">-</span> <span class="n">lowerBound</span><span class="o">)</span> <span class="o">+</span> <span class="n">lowerBound</span><span class="o">);</span>
</span><span class='line'>          <span class="kt">float</span> <span class="n">y</span> <span class="o">=</span> <span class="o">(</span><span class="kt">float</span><span class="o">)(</span><span class="n">Math</span><span class="o">.</span><span class="na">random</span><span class="o">()</span> <span class="o">*</span> <span class="o">(</span><span class="n">upperBound</span> <span class="o">-</span> <span class="n">lowerBound</span><span class="o">)</span> <span class="o">+</span> <span class="n">lowerBound</span><span class="o">);</span>
</span><span class='line'>          <span class="n">Point2D</span> <span class="n">point</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Point2D</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">);</span>
</span><span class='line'>          <span class="n">centers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">point</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">centers</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">Callable</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="nf">createWorker</span><span class="o">(</span><span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">partition</span><span class="o">,</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">centers</span><span class="o">,</span>
</span><span class='line'>          <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;&gt;</span> <span class="n">clusters</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="n">Callable</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="n">Void</span> <span class="nf">call</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>              <span class="kt">int</span> <span class="n">indexes</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">partition</span><span class="o">.</span><span class="na">size</span><span class="o">()];</span>
</span><span class='line'>              <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">partition</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">Point2D</span> <span class="n">data</span> <span class="o">=</span> <span class="n">partition</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>                  <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">getNearestPointIndex</span><span class="o">(</span><span class="n">centers</span><span class="o">);</span>
</span><span class='line'>                  <span class="n">indexes</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">index</span><span class="o">;</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              <span class="kd">synchronized</span> <span class="o">(</span><span class="n">clusters</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">indexes</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                      <span class="n">clusters</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">indexes</span><span class="o">[</span><span class="n">i</span><span class="o">]).</span><span class="na">add</span><span class="o">(</span><span class="n">partition</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
</span><span class='line'>                  <span class="o">}</span>    
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          
</span><span class='line'>      <span class="o">};</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;&gt;</span> <span class="nf">partition</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">,</span> <span class="kt">int</span> <span class="n">parts</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;&gt;</span> <span class="n">lists</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;&gt;(</span><span class="n">parts</span><span class="o">);</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">parts</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">lists</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">lists</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="n">parts</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">lists</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="nf">concurrentGetNewCenters</span><span class="o">(</span><span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">dataset</span><span class="o">,</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">centers</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;&gt;</span> <span class="n">clusters</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;&gt;(</span><span class="n">centers</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">centers</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">clusters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;&gt;</span> <span class="n">partitionedDataset</span> <span class="o">=</span> <span class="n">partition</span><span class="o">(</span><span class="n">dataset</span><span class="o">,</span> <span class="n">NUM_THREADS</span><span class="o">);</span>
</span><span class='line'>      <span class="n">ExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">availableProcessors</span><span class="o">());</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">Callable</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;&gt;</span> <span class="n">workers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">NUM_THREADS</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">workers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">createWorker</span><span class="o">(</span><span class="n">partitionedDataset</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">),</span> <span class="n">centers</span><span class="o">,</span> <span class="n">clusters</span><span class="o">));</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">executor</span><span class="o">.</span><span class="na">invokeAll</span><span class="o">(</span><span class="n">workers</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">newCenters</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">centers</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">cluster</span> <span class="o">:</span> <span class="n">clusters</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">newCenters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">Point2D</span><span class="o">.</span><span class="na">getMean</span><span class="o">(</span><span class="n">cluster</span><span class="o">));</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">newCenters</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="nf">getNewCenters</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">dataset</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">centers</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;&gt;</span> <span class="n">clusters</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">centers</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">centers</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">clusters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">Point2D</span> <span class="n">data</span> <span class="o">:</span> <span class="n">dataset</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">getNearestPointIndex</span><span class="o">(</span><span class="n">centers</span><span class="o">);</span>
</span><span class='line'>          <span class="n">clusters</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">index</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">newCenters</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">centers</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">cluster</span> <span class="o">:</span> <span class="n">clusters</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">newCenters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">Point2D</span><span class="o">.</span><span class="na">getMean</span><span class="o">(</span><span class="n">cluster</span><span class="o">));</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">newCenters</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">double</span> <span class="nf">getDistance</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">oldCenters</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">newCenters</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">double</span> <span class="n">accumDist</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">oldCenters</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="kt">double</span> <span class="n">dist</span> <span class="o">=</span> <span class="n">oldCenters</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">getDistance</span><span class="o">(</span><span class="n">newCenters</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
</span><span class='line'>          <span class="n">accumDist</span> <span class="o">+=</span> <span class="n">dist</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">accumDist</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="nf">kmeans</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">centers</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">dataset</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">boolean</span> <span class="n">converged</span><span class="o">;</span>
</span><span class='line'>      <span class="k">do</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">newCenters</span> <span class="o">=</span> <span class="n">getNewCenters</span><span class="o">(</span><span class="n">dataset</span><span class="o">,</span> <span class="n">centers</span><span class="o">);</span>
</span><span class='line'>          <span class="kt">double</span> <span class="n">dist</span> <span class="o">=</span> <span class="n">getDistance</span><span class="o">(</span><span class="n">centers</span><span class="o">,</span> <span class="n">newCenters</span><span class="o">);</span>
</span><span class='line'>          <span class="n">centers</span> <span class="o">=</span> <span class="n">newCenters</span><span class="o">;</span>
</span><span class='line'>          <span class="n">converged</span> <span class="o">=</span> <span class="n">dist</span> <span class="o">==</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">while</span> <span class="o">(!</span><span class="n">converged</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">centers</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="nf">concurrentKmeans</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">centers</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">dataset</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">boolean</span> <span class="n">converged</span><span class="o">;</span>
</span><span class='line'>      <span class="k">do</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">newCenters</span> <span class="o">=</span> <span class="n">concurrentGetNewCenters</span><span class="o">(</span><span class="n">dataset</span><span class="o">,</span> <span class="n">centers</span><span class="o">);</span>
</span><span class='line'>          <span class="kt">double</span> <span class="n">dist</span> <span class="o">=</span> <span class="n">getDistance</span><span class="o">(</span><span class="n">centers</span><span class="o">,</span> <span class="n">newCenters</span><span class="o">);</span>
</span><span class='line'>          <span class="n">centers</span> <span class="o">=</span> <span class="n">newCenters</span><span class="o">;</span>
</span><span class='line'>          <span class="n">converged</span> <span class="o">=</span> <span class="n">dist</span> <span class="o">==</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">while</span> <span class="o">(!</span><span class="n">converged</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">centers</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">length</span> <span class="o">!=</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Usage: KMeans &lt;INPUT_FILE&gt; &lt;K&gt;&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">inputFile</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">dataset</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">dataset</span> <span class="o">=</span> <span class="n">getDataset</span><span class="o">(</span><span class="n">inputFile</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;ERROR: Could not read file &quot;</span> <span class="o">+</span> <span class="n">inputFile</span><span class="o">);</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">Point2D</span><span class="o">&gt;</span> <span class="n">centers</span> <span class="o">=</span> <span class="n">initializeRandomCenters</span><span class="o">(</span><span class="n">k</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1000000</span><span class="o">);</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Non-parallelized version&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
</span><span class='line'>      <span class="n">kmeans</span><span class="o">(</span><span class="n">centers</span><span class="o">,</span> <span class="n">dataset</span><span class="o">,</span> <span class="n">k</span><span class="o">);</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Time elapsed: &quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">-</span> <span class="n">start</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot;ms&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Parallelized version&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">start</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
</span><span class='line'>      <span class="n">concurrentKmeans</span><span class="o">(</span><span class="n">centers</span><span class="o">,</span> <span class="n">dataset</span><span class="o">,</span> <span class="n">k</span><span class="o">);</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Time elapsed: &quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">-</span> <span class="n">start</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot;ms&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<h2>Conclusion</h2>

<p>In this tutorial, we learnt about K-Means clustering, threads, race conditions, monitors and thread pools (ExecutionService). Excellent! With the knowledge obtained in this tutorial, you already are able to do some basic concurrent programming in Java! :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mixing Assembly and C]]></title>
    <link href="http://abner-math.github.io/blog/2016/02/27/mixing-assembly-and-c/"/>
    <updated>2016-02-27T10:24:56-03:00</updated>
    <id>http://abner-math.github.io/blog/2016/02/27/mixing-assembly-and-c</id>
    <content type="html"><![CDATA[<p>In many applications, mixing Assembly and C is routine (pun intended). There are many reasons for it, but, in general, you want to use Assembly when you want to deal with the hardware directly or perform a task with maximum speed and minimum use of resources, while you use C to perform some high level stuffs that don&rsquo;t attend the former requirements. In either case, you&rsquo;ll need one integrated system.</p>

<p>There are three ways to mix Assembly and C:</p>

<ul>
<li>Using Assembly-defined functions into C</li>
<li>Using C-defined functions into Assembly</li>
<li>Using Assembly code in C</li>
</ul>


<p>We&rsquo;ll explore them all in this tutorial.</p>

<!-- more --> 


<h2>Using Assembly-defined functions in C</h2>

<p>Let&rsquo;s first take the example of a function that takes no parameters and doesn&rsquo;t return anything, like one that just prints something on screen.</p>

<figure class='code'><figcaption><span>hello_world.s</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='as'><span class='line'><span class="p">.</span><span class="nx">globl</span> <span class="nx">hello_world</span>
</span><span class='line'><span class="p">.</span><span class="nx">type</span> <span class="nx">hello_world</span><span class="o">,</span> <span class="err">@</span><span class="kd">function</span>
</span><span class='line'><span class="p">.</span><span class="nx">section</span> <span class="p">.</span><span class="nx">data</span>
</span><span class='line'><span class="nx">message</span><span class="o">:</span> <span class="p">.</span><span class="nx">ascii</span> <span class="s2">&quot;Hello, World!\n&quot;</span>
</span><span class='line'><span class="nx">length</span><span class="o">:</span> <span class="p">.</span><span class="nx">quad</span> <span class="p">.</span> <span class="o">-</span> <span class="nx">message</span>
</span><span class='line'><span class="p">.</span><span class="nx">section</span> <span class="p">.</span><span class="nx">text</span>
</span><span class='line'><span class="nx">hello_world</span><span class="o">:</span>
</span><span class='line'>  <span class="nx">mov</span> <span class="nx">$1</span><span class="o">,</span> <span class="o">%</span><span class="nx">rax</span>
</span><span class='line'>  <span class="nx">mov</span> <span class="nx">$1</span><span class="o">,</span> <span class="o">%</span><span class="nx">rdi</span>
</span><span class='line'>  <span class="nx">mov</span> <span class="nx">$message</span><span class="o">,</span> <span class="o">%</span><span class="nx">rsi</span>
</span><span class='line'>  <span class="nx">mov</span> <span class="nx">length</span><span class="o">,</span> <span class="o">%</span><span class="nx">rdx</span>
</span><span class='line'>  <span class="nx">syscall</span>
</span><span class='line'>  <span class="nx">ret</span>
</span></code></pre></td></tr></table></div></figure>


<p>(If you don&rsquo;t quite understand the above syntax, read my <a href="http://localhost:4000/blog/2016/02/21/factorial-function-in-assembly/">previous tutorial</a>)</p>

<p>Now let&rsquo;s create a C program to call this function:</p>

<figure class='code'><figcaption><span>hello_world.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">extern</span> <span class="kt">void</span> <span class="nf">hello_world</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">hello_world</span><span class="p">();</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice the use of <code>extern</code> keyword. It tells the compiler that the definition of a given function or variable is defined in somewhere else other than the current file. It&rsquo;s the <strong>linker</strong> job to connect this declaration with the actual definition.</p>

<p>Now let&rsquo;s compile and link our both programs at the same time in order to obtain an executable file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gcc hello_world.c hello_world.s -o hello_world
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s all! Pretty easy, right? Now let&rsquo;s advance to a more challenging scenario: A function that returns a value. As I said on previous tutorial, by convention, Assembly functions return values on <code>AX</code> register. This is also true for C programs. Check out this example:</p>

<figure class='code'><figcaption><span>return_10.s</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='as'><span class='line'><span class="p">.</span><span class="nx">globl</span> <span class="nx">return_10</span>
</span><span class='line'><span class="p">.</span><span class="nx">type</span> <span class="nx">return_10</span><span class="o">,</span> <span class="err">@</span><span class="kd">function</span>
</span><span class='line'><span class="nx">return_10</span><span class="o">:</span>
</span><span class='line'>  <span class="nx">movl</span> <span class="nx">$10</span><span class="o">,</span> <span class="o">%</span><span class="nx">eax</span>
</span><span class='line'>  <span class="nx">ret</span>
</span></code></pre></td></tr></table></div></figure>


<p>This function only puts the value &lsquo;10&rsquo; into the EAX register. Now on C side:</p>

<figure class='code'><figcaption><span>return_10.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">extern</span> <span class="kt">int</span> <span class="nf">return_10</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">return_10</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s worth noting that, on Assembly side, I&rsquo;m moving a two words value into the EAX register. I could move a four words value to the RAX register instead, but it would print 0. Why? Here&rsquo;s the reason:</p>

<p style="text-align:center;"><img src="http://nullprogram.com/img/x86/register.png" alt="" /></p>

<p>As you may know, RAX is the 64 bits version of the AX register, hence it can store 64 bits simultaneously. Those bits are stored from left to right, i.e., let&rsquo;s suppose we move the decimal value &lsquo;10&rsquo; into the RAX register. It would appear that way:</p>

<p>01010000000000&hellip;0 (0101 + 60 zeroes).</p>

<p>The EAX holds the 32 most significant bits (the lower half), therefore, if I access this sequence through EAX, I would only see zero values! And this is what the <code>int</code> datatype is implicitly converted to, since it&rsquo;s a datatype with size equals to 32 bits. In order to avoid this problem, I should either stick with EAX, EBX&hellip; registers or use <code>long int</code> on C side.</p>

<blockquote><p>Lesson learnt: One must check if the size of registers match the size of types in C.</p></blockquote>

<p>Now the last scenario: A function that takes parameters and returns a value, like that one that returns the sum of two values:</p>

<figure class='code'><figcaption><span>sum.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">extern</span> <span class="kt">int</span> <span class="nf">sum</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">sum</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">));</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the Assembly definition:</p>

<figure class='code'><figcaption><span>sum.as</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='as'><span class='line'><span class="p">.</span><span class="nx">globl</span> <span class="nx">sum</span>
</span><span class='line'><span class="p">.</span><span class="nx">type</span> <span class="nx">sum</span><span class="o">,</span> <span class="err">@</span><span class="kd">function</span>
</span><span class='line'><span class="nx">sum</span><span class="o">:</span>
</span><span class='line'>  <span class="nx">addl</span> <span class="o">%</span><span class="nx">edi</span><span class="o">,</span> <span class="o">%</span><span class="nx">esi</span>
</span><span class='line'>  <span class="nx">movl</span> <span class="o">%</span><span class="nx">esi</span><span class="o">,</span> <span class="o">%</span><span class="nx">eax</span>
</span><span class='line'>  <span class="nx">ret</span>
</span></code></pre></td></tr></table></div></figure>


<p>You may be asking: Hey, what&rsquo;s wrong? Why am I using the <code>edi</code> and <code>esi</code> registers?</p>

<p>Here&rsquo;s the trick: In GCC compiler, instead of the parameters being pushed into the stack by the callee to be read from the calling function, they are stored in registers. It&rsquo;s the calling function job to push them into the stack if they need to. Those registers are used in the following order:</p>

<ul>
<li>_di: Holds the first argument</li>
<li>_si: Holds the second argument</li>
<li>_dx: Holds the third argument</li>
<li>_cx: Holds the fourth argument</li>
<li>r8d: Holds the fifth argument</li>
<li>r9d: Holds the sixth argument</li>
</ul>


<p>And so on&hellip; In the above example, the value <code>2</code> is stored in the <code>edi</code> register and the value <code>3</code> is stored in the <code>esi</code> register. Therefore, we simply sum them (through the <code>addl</code> instruction) and move the result to <code>eax</code> register.</p>

<h2>Using C-defined functions into Assembly</h2>

<p>Here&rsquo;s the first example: Using the <code>printf</code> C function into Assembly:</p>

<figure class='code'><figcaption><span>hello_world.s</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='as'><span class='line'><span class="p">.</span><span class="nx">extern</span> <span class="nx">printf</span>
</span><span class='line'><span class="p">.</span><span class="nx">globl</span> <span class="nx">main</span>
</span><span class='line'><span class="p">.</span><span class="nx">section</span> <span class="p">.</span><span class="nx">data</span>
</span><span class='line'><span class="nx">message</span><span class="o">:</span> <span class="p">.</span><span class="nx">ascii</span> <span class="s2">&quot;Hello, World!\n&quot;</span>
</span><span class='line'><span class="nx">format</span><span class="o">:</span> <span class="p">.</span><span class="nx">ascii</span> <span class="s2">&quot;%s&quot;</span>
</span><span class='line'><span class="p">.</span><span class="nx">section</span> <span class="p">.</span><span class="nx">text</span>
</span><span class='line'><span class="nx">main</span><span class="o">:</span>
</span><span class='line'>  <span class="nx">mov</span> <span class="nx">$format</span><span class="o">,</span> <span class="o">%</span><span class="nx">rdi</span>
</span><span class='line'>  <span class="nx">mov</span> <span class="nx">$message</span><span class="o">,</span> <span class="o">%</span><span class="nx">rsi</span>
</span><span class='line'>  <span class="nx">mov</span> <span class="nx">$0</span><span class="o">,</span> <span class="o">%</span><span class="nx">rax</span>
</span><span class='line'>  <span class="nx">call</span> <span class="nx">printf</span>
</span><span class='line'>  <span class="nx">ret</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now compile the Assembly program with GCC:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gcc hello_world.s -o hello_world
</span></code></pre></td></tr></table></div></figure>


<p>The GCC will automatically link with the function definition. In the same way we used the <code>extern</code> keyword in C, we use the <code>.extern</code> directive to tell the Assembler that <code>printf</code> is defined externally.</p>

<p>That is equivalent to the following C program:</p>

<figure class='code'><figcaption><span>hello_world.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s&quot;</span><span class="p">,</span> <span class="s">&quot;Hello, World!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When compiling Assembly programs with GCC, the starting symbol is no longer <code>_start</code> but <code>main</code>. <code>main</code> is a function, therefore it must have the <code>ret</code> instruction in the end of it.</p>

<p>The <code>printf</code> in C takes two or more parameters: The format and the value(s). As said previously, the first parameters goes to <code>rdi</code> register while the second parameter goes to <code>rsi</code> register. Note: Before calling the function, the value of <code>rax</code> must be zero!</p>

<p>Our second example is using the <code>scanf</code> function. Like <code>printf</code>,  it takes two more parameters: The format and the destinating addresses where the standard input will be stored. Note: The second and so on parameters are no longer values, but memory addresses (pointers).</p>

<figure class='code'><figcaption><span>example_scanf.s</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='as'><span class='line'><span class="p">.</span><span class="nx">extern</span> <span class="nx">scanf</span>
</span><span class='line'><span class="p">.</span><span class="nx">globl</span> <span class="nx">main</span>
</span><span class='line'><span class="p">.</span><span class="nx">section</span> <span class="p">.</span><span class="nx">data</span>
</span><span class='line'><span class="nx">a</span><span class="o">:</span> <span class="p">.</span><span class="nx">double</span> <span class="mi">0</span>
</span><span class='line'><span class="nx">b</span><span class="o">:</span> <span class="p">.</span><span class="nx">double</span> <span class="mi">0</span>
</span><span class='line'><span class="nx">format</span><span class="o">:</span> <span class="p">.</span><span class="nx">ascii</span> <span class="s2">&quot;%d %d&quot;</span>
</span><span class='line'><span class="p">.</span><span class="nx">section</span> <span class="p">.</span><span class="nx">text</span>
</span><span class='line'><span class="nx">main</span><span class="o">:</span>
</span><span class='line'>  <span class="nx">mov</span> <span class="nx">$format</span><span class="o">,</span> <span class="o">%</span><span class="nx">rdi</span>
</span><span class='line'>  <span class="nx">mov</span> <span class="nx">$a</span><span class="o">,</span> <span class="o">%</span><span class="nx">rsi</span>
</span><span class='line'>  <span class="nx">mov</span> <span class="nx">$b</span><span class="o">,</span> <span class="o">%</span><span class="nx">rdx</span>
</span><span class='line'>  <span class="nx">mov</span> <span class="nx">$0</span><span class="o">,</span> <span class="o">%</span><span class="nx">rax</span>
</span><span class='line'>  <span class="nx">call</span> <span class="nx">scanf</span>
</span><span class='line'>  <span class="nx">movl</span> <span class="nx">a</span><span class="o">,</span> <span class="o">%</span><span class="nx">eax</span>
</span><span class='line'>  <span class="nx">movl</span> <span class="nx">b</span><span class="o">,</span> <span class="o">%</span><span class="nx">ebx</span>
</span><span class='line'>  <span class="nx">addl</span> <span class="o">%</span><span class="nx">ebx</span><span class="o">,</span> <span class="o">%</span><span class="nx">eax</span>
</span><span class='line'>  <span class="nx">ret</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>First, we declare three &ldquo;variables&rdquo; in data section:</p>

<ul>
<li>a: A two words (32 bits) region of memory that initially stores the value zero;</li>
<li>b: A two words (32 bits) region of memory that initially stores the value zero;</li>
<li>format: A region of memory that stores the ASCII string &ldquo;%d %d&rdquo;.</li>
</ul>


<p>We then pass the address of <code>format</code> as first parameter, the address of <code>a</code> as second parameter and the address of <code>b</code> as third parameter. Before calling <code>scanf</code>, we set <code>RAX</code> to 0 (just like in the printf example). After it, we move the value stored in <code>a</code> address to <code>eax</code> register and the value stored in <code>b</code> address to <code>ebx</code> register. We then sum them both and store the result in <code>eax</code>.</p>

<p>After executing the program, if we echo the program execution status:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="nv">$?</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ll able to see the sum of both typed numbers.</p>

<p>The above example is equivalent to the following C program:</p>

<figure class='code'><figcaption><span>example_scanf.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span><span class="o">*</span> <span class="n">format</span> <span class="o">=</span> <span class="s">&quot;%d %d&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">scanf</span><span class="p">(</span><span class="n">format</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Using Assembly code in C</h2>

<p>Our third category is pretty straight-forward. See the example:</p>

<figure class='code'><figcaption><span>sum.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">sum</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">asm</span><span class="p">(</span><span class="s">&quot;addl %edi, %esi&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">asm</span><span class="p">(</span><span class="s">&quot;movl %esi, %eax&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">sum</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">));</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you can compile it normally:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gcc sum.c -o sum
</span></code></pre></td></tr></table></div></figure>


<p>The compiler will simply insert the assembly code in the appropriated place in the compiled code.</p>

<h2>Conclusion</h2>

<p>We&rsquo;ve just learnt very very powerful tools! Learning how to mix Assembly and C give us a deep insight of how the C compiler actually works. I strongly recommend <a href="https://assembly.ynh.io/">this website</a> for further learning. Play with it around, try some snippets, and see how it&rsquo;s translated into Assembly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Factorial Function in X86_64 Assembly]]></title>
    <link href="http://abner-math.github.io/blog/2016/02/21/factorial-function-in-assembly/"/>
    <updated>2016-02-21T17:08:47-03:00</updated>
    <id>http://abner-math.github.io/blog/2016/02/21/factorial-function-in-assembly</id>
    <content type="html"><![CDATA[<p>Lately I&rsquo;ve been reading the book <a href="http://download-mirror.savannah.gnu.org/releases/pgubook/ProgrammingGroundUp-1-0-booksize.pdf">Programming from the Ground Up</a> by Jonathan Barlett. It teaches x86 assembly language programming from the very grounding blocks. Applying the concepts learnt in the book, I&rsquo;ll show you how to write a factorial function in x86_64 Assembly.</p>

<!-- more -->


<p>There are many assembly languages: Intel, AT&amp;T, NASM, etc,&hellip; In this tutorial, I&rsquo;m going to use the AT&amp;T syntax, which can be easily assembled in any linux machine through the GNU Assembler (GAS).</p>

<p>Let&rsquo;s start by creating a file named <code>main.s</code> (&rsquo;s&#8217; is the standard extension for assembly programs).</p>

<p>Every assembly program is composed by three sections: <strong>data</strong>, <strong>bss</strong> and <strong>text</strong>. The <strong>data</strong> section is used to initialize constants. Those constants are preallocated during the program initialization. The <strong>bss</strong> section is used to declare buffers, or dynamically allocated data. Finally, the <strong>text</strong> section is used to keep the actual code. None of them are mandatory, but it&rsquo;s a good pratice to define them explicitally.</p>

<figure class='code'><figcaption><span>main.s</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='as'><span class='line'><span class="p">.</span><span class="nx">section</span> <span class="p">.</span><span class="nx">text</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>The &ldquo;.&rdquo; indicates that the instruction is a directive to the assembler (just like # in C is a directive to the compiler).</p></blockquote>

<p>In order to execute your program, the operating system needs to know where&rsquo;s the start of your program (like a &ldquo;main&rdquo; function). In Assembly, this is accomplished through the <code>_start</code> label.</p>

<figure class='code'><figcaption><span>main.s</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='as'><span class='line'><span class="p">.</span><span class="nx">globl</span> <span class="nx">_start</span>
</span><span class='line'><span class="p">.</span><span class="nx">section</span> <span class="p">.</span><span class="nx">text</span>
</span><span class='line'><span class="nx">_start</span><span class="o">:</span>
</span></code></pre></td></tr></table></div></figure>


<p>A <strong>label</strong> is just a placeholder for a memory position. On <a href="https://en.wikipedia.org/wiki/Von_Neumann_architecture">Von Neumann architecture</a> (which is the architecture used by most of modern computers), code is actually kept on memory along with the data that it manipulates. For the processor, there&rsquo;s absolutely no distinction into code and data. In the above example, the label would exercise the function of pointing to a &lsquo;code line&rsquo; (This is a oversimplification).</p>

<p>You must have noticed the use of <code>globl</code> directive. It&rsquo;s used to make a symbol visible to the linker. We&rsquo;ll talk about it later, just be informed that it&rsquo;s mandatory to the _start label.</p>

<p>Alright! Now let&rsquo;s make our program just exit in order to obtain a basic executable program.</p>

<figure class='code'><figcaption><span>main.s</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='as'><span class='line'><span class="p">.</span><span class="nx">globl</span> <span class="nx">_start</span>
</span><span class='line'><span class="p">.</span><span class="nx">section</span> <span class="p">.</span><span class="nx">text</span>
</span><span class='line'><span class="nx">_start</span><span class="o">:</span>
</span><span class='line'>  <span class="nx">mov</span> <span class="nx">$1</span><span class="o">,</span> <span class="o">%</span><span class="nx">rax</span>
</span><span class='line'>  <span class="nx">mov</span> <span class="nx">$0</span><span class="o">,</span> <span class="o">%</span><span class="nx">rbx</span>
</span><span class='line'>  <span class="nb">int</span> <span class="nx">$0x80</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>rax</code> and <code>rbx</code> are both <a href="https://en.wikipedia.org/wiki/Processor_register">general purporse registers</a>. The <code>int</code> instruction is a <strong>interruption</strong>. When we use the 0x80 code, we are saying that this interruption must be handled by the linux operating system. In another words, we are performing a <a href="https://en.wikipedia.org/wiki/System_call">system call</a>. The code of the system call is stored in the <code>rax</code> register. The <code>1</code> is the code for the <strong>exit</strong> system call. The <strong>exit</strong> system call takes one parameter, the return value, which is stored in the <code>rbx</code> register. In this case, we are returning the value <code>0</code>. By the way, the <code>$</code> is used to indicate constant values. If we omit it, it would be interpreted as a memory address instead.</p>

<p>In C, the code we just typed would be equivalent to:</p>

<figure class='code'><figcaption><span>main.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can turn it into a executable code by calling:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>as main.s -o main.o
</span><span class='line'>ld main.o -o main
</span><span class='line'>./main
</span></code></pre></td></tr></table></div></figure>


<p>But a program like that is of no use, right? So let&rsquo;s create our factorial function. Functions in assembly are a kind of a headache, because you need to explicitally manipulate the stack.</p>

<h2>The stack</h2>

<p><strong>Stack</strong> is a contiguous region of memory reserved for the program by the operating system.</p>

<p><img src="https://www.cs.umd.edu/class/sum2003/cmsc311/Notes/Mips/Figs/stack1.png" alt="" /></p>

<p>There&rsquo;s a special register called <code>rsp</code> (stack pointer) that points to the &lsquo;top&rsquo; of the stack. So how do we store things in the stack? By simply using <code>mov</code> instruction and manipulating the stack pointer. For example, let&rsquo;s suppose we want to store two values in the stack, <code>1</code>  and <code>2</code>. It could be accomplished that way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='as'><span class='line'><span class="nx">sub</span> <span class="nx">$16</span><span class="o">,</span> <span class="o">%</span><span class="nx">rsp</span>
</span><span class='line'><span class="nx">mov</span> <span class="nx">$1</span><span class="o">,</span> <span class="o">%</span><span class="nx">rax</span>
</span><span class='line'><span class="nx">mov</span> <span class="nx">$2</span><span class="o">,</span> <span class="o">%</span><span class="nx">rbx</span>
</span><span class='line'><span class="nx">mov</span> <span class="o">%</span><span class="nx">rax</span><span class="o">,</span> <span class="mi">16</span><span class="p">(</span><span class="o">%</span><span class="nx">rsp</span><span class="p">)</span>
</span><span class='line'><span class="nx">mov</span> <span class="o">%</span><span class="nx">rbx</span><span class="o">,</span> <span class="mi">8</span><span class="p">(</span><span class="o">%</span><span class="nx">rsp</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Stack is a structure that grows upward, in the sense of it first begins with addresses of higher values and grows towards addresses of lower values. In the above example, we are using <strong>8</strong> bytes of the stack to store the value <code>1</code> and equally 8 bytes to store the value <code>2</code>, so we need to step down the stack pointer by a value of 16 (we use 8 bytes because on x64 architecture, the registers have 8 bytes. 8 x 8 = 64 bits).</p>

<p>Since manipulating the stack pointer directly is boring, there are two special instructions to accomplish the same effect: <code>push</code> and <code>pop</code>. <code>push</code> subtracts the stack pointer by 8 and stores the parameter into the current address pointed by the stack pointer. <code>pop</code> moves the data stored in the address currently pointed by the stack pointer to a register and adds the stack pointer by 8.</p>

<h2>Recursive factorial function</h2>

<p>Create a file named <code>factorial.s</code>. Insert the following code:</p>

<figure class='code'><figcaption><span>factorial.s</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='as'><span class='line'><span class="p">.</span><span class="nx">globl</span> <span class="nx">factorial</span>
</span><span class='line'><span class="p">.</span><span class="nx">type</span> <span class="nx">factorial</span><span class="o">,</span><span class="err">@</span><span class="kd">function</span>
</span><span class='line'><span class="nx">factorial</span><span class="o">:</span>
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<p>We use the <code>globl</code> directive because we want the <strong>factorial</strong> label to be visible to other programs (we want to use the function in other programs). Here&rsquo;s the first trick: &ldquo;Calling&rdquo; a function is simply jumping to the memory address where this function is defined.</p>

<p>The new thing here is the <code>type</code> directive. Don&rsquo;t worry, it&rsquo;s just a directive to indicate that the label is not a common label but actually a function.</p>

<p>Now let&rsquo;s go back to our main program and call this function:</p>

<figure class='code'><figcaption><span>main.s</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='as'><span class='line'><span class="p">.</span><span class="nx">globl</span> <span class="nx">_start</span>
</span><span class='line'><span class="p">.</span><span class="nx">section</span> <span class="p">.</span><span class="nx">text</span>
</span><span class='line'><span class="nx">_start</span><span class="o">:</span>
</span><span class='line'>  <span class="nx">push</span> <span class="nx">$5</span>
</span><span class='line'>  <span class="nx">call</span> <span class="nx">factorial</span>
</span><span class='line'>  <span class="nx">add</span> <span class="nx">$8</span><span class="o">,</span> <span class="o">%</span><span class="nx">rsp</span>
</span><span class='line'>  <span class="nx">mov</span> <span class="o">%</span><span class="nx">rax</span><span class="o">,</span> <span class="o">%</span><span class="nx">rbx</span>
</span><span class='line'>  <span class="nx">mov</span> <span class="nx">$1</span><span class="o">,</span> <span class="o">%</span><span class="nx">rax</span>
</span><span class='line'>  <span class="nb">int</span> <span class="nx">$0x80</span>
</span></code></pre></td></tr></table></div></figure>


<p>This may seem complicated at the first glance, but it&rsquo;s rather simple. We first store the value <code>5</code> in the stack. Since we cannot pass arguments directly while calling the function like in other languages, we need to store the arguments in the stack. In this case, 5 will be first the argument for the <code>factorial</code> function: The number we want to calculate the factorial.</p>

<p>After that, we use the <code>call</code> instruction. What the <code>call</code> instruction actually does is just storing the current address into the stack pointer (because we need to know to where return after the function has been finished!) and jumping to the <code>factorial</code> label.</p>

<p>Finally, we increase the stack pointer (because we no longer need the function parameters stored in the stack, we can safely override them to prevent <em>memory leaks</em>) and move the function return (the function return is, by convenction, always stored in the <code>rax</code> register) to the <code>rbx</code> so we can display it after the program has been executed (through the echo $? command).</p>

<p>Our main program is finished. It&rsquo;s roughly equivalent to the following C program:</p>

<figure class='code'><figcaption><span>main.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">factorial</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">factorial</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s focus on our factorial function.
The very first thing we need to do in a function is to store the <code>rbp</code> register. <code>rbp</code> is the base pointer register. It points to the beginning of the current <strong>stack frame</strong>. Stack frame is the region of stack where we stored our function parameters and function return address. Since we can call functions inside functions, we need to store the &lsquo;context&rsquo; of the previous function call (if any).</p>

<figure class='code'><figcaption><span>factorial.s</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='as'><span class='line'><span class="p">.</span><span class="nx">globl</span> <span class="nx">factorial</span>
</span><span class='line'><span class="p">.</span><span class="nx">type</span> <span class="nx">factorial</span><span class="o">,</span><span class="err">@</span><span class="kd">function</span>
</span><span class='line'><span class="nx">factorial</span><span class="o">:</span>
</span><span class='line'>  <span class="nx">push</span> <span class="o">%</span><span class="nx">rbp</span>
</span><span class='line'>  <span class="nx">mov</span> <span class="o">%</span><span class="nx">rsp</span><span class="o">,</span> <span class="o">%</span><span class="nx">rbp</span>
</span></code></pre></td></tr></table></div></figure>


<p>We move the current stack pointer to the <code>rbp</code> register. Now we are within the context of the current function. Let&rsquo;s retrieve the arguments:</p>

<figure class='code'><figcaption><span>factorial.s</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='as'><span class='line'><span class="p">.</span><span class="nx">globl</span> <span class="nx">factorial</span>
</span><span class='line'><span class="p">.</span><span class="nx">type</span> <span class="nx">factorial</span><span class="o">,</span><span class="err">@</span><span class="kd">function</span>
</span><span class='line'><span class="nx">factorial</span><span class="o">:</span>
</span><span class='line'>  <span class="nx">push</span> <span class="o">%</span><span class="nx">rbp</span>
</span><span class='line'>  <span class="nx">mov</span> <span class="o">%</span><span class="nx">rsp</span><span class="o">,</span> <span class="o">%</span><span class="nx">rbp</span>
</span><span class='line'>  <span class="nx">mov</span> <span class="mi">16</span><span class="p">(</span><span class="o">%</span><span class="nx">rbp</span><span class="p">)</span><span class="o">,</span> <span class="o">%</span><span class="nx">rbx</span> <span class="err">#</span> <span class="nx">Get</span> <span class="nx">the</span> <span class="nx">first</span> <span class="nx">parameter</span>
</span></code></pre></td></tr></table></div></figure>


<p>Remember: We use <code>rbp + 16</code> because we pushed the parameter value into the stack first (the second pushed value was the function return address, therefore it stands on top).</p>

<p>Since we are implementing the recursive version, we first need to define the recursion base: If the parameter value is less or equal than 1, return 1.</p>

<figure class='code'><figcaption><span>factorial.s</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='as'><span class='line'><span class="p">.</span><span class="nx">globl</span> <span class="nx">factorial</span>
</span><span class='line'><span class="p">.</span><span class="nx">type</span> <span class="nx">factorial</span><span class="o">,</span><span class="err">@</span><span class="kd">function</span>
</span><span class='line'><span class="nx">factorial</span><span class="o">:</span>
</span><span class='line'>  <span class="nx">push</span> <span class="o">%</span><span class="nx">rbp</span>
</span><span class='line'>  <span class="nx">mov</span> <span class="o">%</span><span class="nx">rsp</span><span class="o">,</span> <span class="o">%</span><span class="nx">rbp</span>
</span><span class='line'>  <span class="nx">mov</span> <span class="mi">16</span><span class="p">(</span><span class="o">%</span><span class="nx">rbp</span><span class="p">)</span><span class="o">,</span> <span class="o">%</span><span class="nx">rbx</span> <span class="err">#</span> <span class="nx">Get</span> <span class="nx">the</span> <span class="nx">first</span> <span class="nx">parameter</span>
</span><span class='line'>  <span class="err">#</span> <span class="nx">Check</span> <span class="nx">recursion</span> <span class="nx">base</span>
</span><span class='line'>  <span class="nx">cmp</span> <span class="nx">$1</span><span class="o">,</span> <span class="o">%</span><span class="nx">rbx</span>
</span><span class='line'>  <span class="nx">je</span> <span class="nx">factorial_base</span>
</span><span class='line'><span class="nx">factorial_base</span><span class="o">:</span>
</span><span class='line'>  <span class="err">#</span> <span class="nx">Return</span> <span class="nx">value</span> <span class="mi">1</span>
</span><span class='line'>  <span class="nx">mov</span> <span class="nx">$1</span><span class="o">,</span> <span class="o">%</span><span class="nx">rax</span>
</span><span class='line'><span class="nx">factorial_end</span><span class="o">:</span>
</span><span class='line'>  <span class="err">#</span> <span class="nx">Restore</span> <span class="nx">pointer</span>
</span><span class='line'>  <span class="nx">mov</span> <span class="o">%</span><span class="nx">rbp</span><span class="o">,</span> <span class="o">%</span><span class="nx">rsp</span>
</span><span class='line'>  <span class="nx">pop</span> <span class="o">%</span><span class="nx">rbp</span> <span class="err">#</span> <span class="nx">Restore</span> <span class="nx">context</span>
</span><span class='line'>  <span class="nx">ret</span> <span class="err">#</span> <span class="nx">Return</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wow, a lot of things happened here! Let&rsquo;s calmly analyze each one of them. First, we compare the parameter value to one (through the <code>cmp</code> instruction). Then, we check if the parameter value is equal than one. If so, we jump to the <code>factorial_base</code> label. This <strong>conditional jump</strong> is accomplished by the <code>je</code> instruction (jump on equal). The <code>cmp</code> instruction sets a flag on <code>flags</code> register, which the <strong>conditional jump</strong> will look up to decide if it will jump or not.</p>

<p>Once within the <code>factorial_base</code> label, we move the value <code>1</code> into the <code>rax</code> register. The <code>rax</code> will store the final value of our calculation. The program flow will then move automatically to the label right below, <code>factorial_end</code>.</p>

<p>The <code>factorial_end</code> label will restore the stack pointer to where it was when the function was called (in case we have manipulated it inside the function body, which we didn&rsquo;t, but it&rsquo;s a good pratice to keep our code generic) and will then restore the base pointer register. Finally, there&rsquo;s this <code>ret</code> instruction, which will return to the value currently pointed by the stack pointer (the function return address).</p>

<p>Now let&rsquo;s implement the recursive calls:</p>

<figure class='code'><figcaption><span>factorial.s</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='as'><span class='line'><span class="p">.</span><span class="nx">globl</span> <span class="nx">factorial</span>
</span><span class='line'><span class="p">.</span><span class="nx">type</span> <span class="nx">factorial</span><span class="o">,</span><span class="err">@</span><span class="kd">function</span>
</span><span class='line'><span class="nx">factorial</span><span class="o">:</span>
</span><span class='line'>  <span class="nx">push</span> <span class="o">%</span><span class="nx">rbp</span>
</span><span class='line'>  <span class="nx">mov</span> <span class="o">%</span><span class="nx">rsp</span><span class="o">,</span> <span class="o">%</span><span class="nx">rbp</span>
</span><span class='line'>  <span class="nx">mov</span> <span class="mi">16</span><span class="p">(</span><span class="o">%</span><span class="nx">rbp</span><span class="p">)</span><span class="o">,</span> <span class="o">%</span><span class="nx">rbx</span> <span class="err">#</span> <span class="nx">Get</span> <span class="nx">the</span> <span class="nx">first</span> <span class="nx">parameter</span>
</span><span class='line'>  <span class="err">#</span> <span class="nx">Check</span> <span class="nx">recursion</span> <span class="nx">base</span>
</span><span class='line'>  <span class="nx">cmp</span> <span class="nx">$1</span><span class="o">,</span> <span class="o">%</span><span class="nx">rbx</span>
</span><span class='line'>  <span class="nx">je</span> <span class="nx">factorial_base</span>
</span><span class='line'>  <span class="err">#</span> <span class="nx">Decrease</span> <span class="nx">the</span> <span class="nx">value</span> <span class="nx">of</span> <span class="nx">parameter</span>
</span><span class='line'>  <span class="nx">dec</span> <span class="o">%</span><span class="nx">rbx</span>
</span><span class='line'>  <span class="err">#</span> <span class="nx">Call</span> <span class="nx">factorial</span> <span class="nx">recursively</span>
</span><span class='line'>  <span class="nx">push</span> <span class="o">%</span><span class="nx">rbx</span>
</span><span class='line'>  <span class="nx">call</span> <span class="nx">factorial</span>
</span><span class='line'>  <span class="nx">add</span> <span class="nx">$8</span><span class="o">,</span> <span class="o">%</span><span class="nx">rsp</span>
</span><span class='line'>  <span class="err">#</span> <span class="nx">Multiply</span> <span class="nx">the</span> <span class="nx">current</span> <span class="nx">parameter</span> <span class="nx">by</span> <span class="nx">the</span> <span class="nx">recursive</span> <span class="nx">call</span> <span class="k">return</span> <span class="nx">value</span>
</span><span class='line'>  <span class="nx">mov</span> <span class="mi">16</span><span class="p">(</span><span class="o">%</span><span class="nx">rbp</span><span class="p">)</span><span class="o">,</span> <span class="o">%</span><span class="nx">rbx</span>
</span><span class='line'>  <span class="nx">imul</span> <span class="o">%</span><span class="nx">rbx</span><span class="o">,</span> <span class="o">%</span><span class="nx">rax</span>
</span><span class='line'>  <span class="err">#</span> <span class="nx">Finish</span> <span class="kd">function</span>
</span><span class='line'>  <span class="nx">jmp</span> <span class="nx">factorial_end</span>
</span><span class='line'><span class="nx">factorial_base</span><span class="o">:</span>
</span><span class='line'>  <span class="err">#</span> <span class="nx">Return</span> <span class="nx">value</span> <span class="mi">1</span>
</span><span class='line'>  <span class="nx">mov</span> <span class="nx">$1</span><span class="o">,</span> <span class="o">%</span><span class="nx">rax</span>
</span><span class='line'><span class="nx">factorial_end</span><span class="o">:</span>
</span><span class='line'>  <span class="err">#</span> <span class="nx">Restore</span> <span class="nx">pointer</span>
</span><span class='line'>  <span class="nx">mov</span> <span class="o">%</span><span class="nx">rbp</span><span class="o">,</span> <span class="o">%</span><span class="nx">rsp</span>
</span><span class='line'>  <span class="nx">pop</span> <span class="o">%</span><span class="nx">rbp</span> <span class="err">#</span> <span class="nx">Restore</span> <span class="nx">context</span>
</span><span class='line'>  <span class="nx">ret</span> <span class="err">#</span> <span class="nx">Return</span>
</span></code></pre></td></tr></table></div></figure>


<p>After we checked our recursion base condition (and failed), we decremented the value of the parameter in order to pass it as argument to the same function again (through the <code>decl</code> instruction). The way of calling the same function is identical to the code we wrote on our main program: We push the arguments into the stack and call the <code>call</code> instruction.</p>

<p>Once the recursive function has been finished, its return value is stored in the <code>rax</code> register. Before multiplying the current parameter by the return value of the recursive call, we first need to restore its original value (remember: When we made recursive call, it was overrided). We accomplish it by calling: <code>mov 16(%rbp), %rbx</code>. We then multiply the value of <code>rbx</code> by <code>rax</code> and store the result in <code>rax</code> through the <code>imul</code> instruction. After it, we jump to the end of our function (<code>factorial_end</code>).</p>

<p>That&rsquo;s it! Not that hard, right? Take of time to ensure you have understood every piece of our code.</p>

<p>The above code is roughly equivalent to the following C code:</p>

<figure class='code'><figcaption><span>factorial.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">factorial</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">n</span> <span class="o">*</span> <span class="n">factorial</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>hehe, Assembly is such a pain. :)</p>

<h2>Generating executable code</h2>

<p>Now let&rsquo;s generate our executable code. First, let&rsquo;s generate <a href="https://en.wikipedia.org/wiki/Object_code">object code</a> from our both assembly programs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>as main.s -o main.o
</span><span class='line'>as factorial.s -o factorial.o
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Let&rsquo;s link our two object codes into a single executable code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ld main.o factorial.o -o main
</span></code></pre></td></tr></table></div></figure>


<p>Now execute:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./main
</span></code></pre></td></tr></table></div></figure>


<p>We can check our program return by calling:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="nv">$?</span>
</span></code></pre></td></tr></table></div></figure>


<p>A value of <code>120</code> must have prompted, that is the factorial of 5.</p>

<p>It&rsquo;s worth noting that if we omit the <code>.globl factorial</code> in <code>factorial.s</code>, the linker would prompt an error, since it cannot resolve the symbol.</p>

<h2>Iterative factorial function</h2>

<p>The factorial function can also be implemented in a single loop. Observe the following C code:</p>

<figure class='code'><figcaption><span>iterative_factorial.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">factorial</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">n</span> <span class="o">*=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>      <span class="n">i</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since the program is bigger in C than the previous version, we may think that it would be even more complex in Assembly than the previous Assembly program. However, it&rsquo;s actually simpler:</p>

<figure class='code'><figcaption><span>iterative_factorial.s</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='as'><span class='line'><span class="p">.</span><span class="nx">section</span> <span class="p">.</span><span class="nx">text</span>
</span><span class='line'><span class="p">.</span><span class="nx">globl</span> <span class="nx">factorial</span>
</span><span class='line'><span class="p">.</span><span class="nx">type</span> <span class="nx">factorial</span><span class="o">,</span> <span class="err">@</span><span class="kd">function</span>
</span><span class='line'><span class="nx">factorial</span><span class="o">:</span>
</span><span class='line'>        <span class="nx">push</span> <span class="o">%</span><span class="nx">rbp</span>
</span><span class='line'>        <span class="nx">mov</span> <span class="o">%</span><span class="nx">rsp</span><span class="o">,</span> <span class="o">%</span><span class="nx">rbp</span>
</span><span class='line'>        <span class="nx">mov</span> <span class="mi">16</span><span class="p">(</span><span class="o">%</span><span class="nx">rsp</span><span class="p">)</span><span class="o">,</span> <span class="o">%</span><span class="nx">rax</span>
</span><span class='line'>        <span class="nx">mov</span> <span class="o">%</span><span class="nx">rax</span><span class="o">,</span> <span class="o">%</span><span class="nx">rbx</span>
</span><span class='line'>        <span class="nx">dec</span> <span class="o">%</span><span class="nx">rbx</span>
</span><span class='line'>        <span class="nx">jmp</span> <span class="nx">factorial_loop</span>
</span><span class='line'><span class="nx">factorial_loop</span><span class="o">:</span>
</span><span class='line'>        <span class="nx">cmp</span> <span class="nx">$1</span><span class="o">,</span> <span class="o">%</span><span class="nx">rbx</span>
</span><span class='line'>        <span class="nx">je</span> <span class="nx">factorial_end</span>
</span><span class='line'>        <span class="nx">imul</span> <span class="o">%</span><span class="nx">rbx</span><span class="o">,</span> <span class="o">%</span><span class="nx">rax</span>
</span><span class='line'>        <span class="nx">dec</span> <span class="o">%</span><span class="nx">rbx</span>
</span><span class='line'>        <span class="nx">jmp</span> <span class="nx">factorial_loop</span>
</span><span class='line'><span class="nx">factorial_end</span><span class="o">:</span>
</span><span class='line'>        <span class="nx">mov</span> <span class="o">%</span><span class="nx">rbp</span><span class="o">,</span> <span class="o">%</span><span class="nx">rsp</span>
</span><span class='line'>        <span class="nx">pop</span> <span class="o">%</span><span class="nx">rbp</span>
</span><span class='line'>        <span class="nx">ret</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>We copy the parameter value to the <code>rbx</code> register. It will exercise the same function of the <code>i</code> variable in the C code. We then decrease the value of i and then jump to the loop.</p>

<p>On our loop, we compare the value of <code>rbx</code> (i) to one. If it&rsquo;s equal, we exit our loop. Otherwise, we multiply <code>rbx</code> by <code>rax</code> and store the result in <code>rax</code>. In the end, we return to the beginning of our loop.</p>

<h2>Conclusion</h2>

<p>Well, well&hellip; We learnt important Assembly concepts in this tutorial: System calls, the stack, functions&hellip; It&rsquo;s a lot! You already are able to implement some other simple algorithms (try Fibonacci!).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Is It a Cat or a Dog? A Neural Network Application in OpenCV]]></title>
    <link href="http://abner-math.github.io/blog/2016/01/31/is-it-a-cat-or-dog-a-neural-network-application-in-opencv/"/>
    <updated>2016-01-31T13:23:41-03:00</updated>
    <id>http://abner-math.github.io/blog/2016/01/31/is-it-a-cat-or-dog-a-neural-network-application-in-opencv</id>
    <content type="html"><![CDATA[<p style="text-align:center;"><img src="http://abner-math.github.io/images/posts/ann_dog2.jpg" alt="" /><br><i>Who is the good boy?</i></p>

<p>From time to time, a website named <a href="http://www.kaggle.com">Kaggle</a> hosts several competitions in the fields of Data Science and Computer Vision. One of those competitions was the <a href="https://www.kaggle.com/c/dogs-vs-cats">Dogs vs. Cats</a> challenge, where the objective was &ldquo;to create an algorithm to distinguish dogs from cats&rdquo;. Although this particular challenge already has been finished, I thought that it&rsquo;d give me a pretty good material to a tutorial. Let&rsquo;s learn how to solve this problem together using OpenCV!</p>

<!-- more --> 


<p>Here&rsquo;s a live demo:</p>

<iframe src="http://catordog-picoledelimao.rhcloud.com/" width="100%" height="500px"></iframe>


<h2>Setup environment</h2>

<p>I&rsquo;ll assume that you already have OpenCV 3.0 configured in your machine (if you don&rsquo;t, you can do it <a href="http://docs.opencv.org/2.4/doc/tutorials/introduction/table_of_content_introduction/table_of_content_introduction.html#table-of-content-introduction">here</a>). Also, I&rsquo;ll use the Boost library to read files in a directory (you can perhaps skip it and replace my code by dirent.h. It should work in the same way). You can download Boost <a href="http://www.boost.org/">here</a>. Those are the only two external libraries that I&rsquo;m going to use in this tutorial.</p>

<p>Ok, ok, let&rsquo;s start by downloading the training and test sets. Click <a href="https://www.kaggle.com/c/dogs-vs-cats/data">here</a> and download the <a href="https://www.kaggle.com/c/dogs-vs-cats/download/test1.zip">test1.zip</a> (271.15mb). You may need to register first. After downloading, extract them to a folder of your preference. The training set will be used to adjust the parameters of our neural network (we will talk in details later), while the test set will be used to check the performance of our neural network (how good it is at generalizing unseen examples). Unhappily, the provided test set by Kaggle is not labeled, so we will split the training set (in the provided link) and use a part of it as our test set.</p>

<h2>Reading training samples</h2>

<p>Let&rsquo;s start coding! First, let&rsquo;s start by reading the list of files within the training set directory:</p>

<figure class='code'><figcaption><span>opencv_ann.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="cp">#include &lt;functional&gt;</span>
</span><span class='line'><span class="cp">#include &lt;map&gt;</span>
</span><span class='line'><span class="cp">#include &lt;set&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fstream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;opencv2/core/core.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;opencv2/highgui/highgui.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;opencv2/features2d/features2d.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;opencv2/ml/ml.hpp&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;boost/filesystem.hpp&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="n">fs</span> <span class="o">=</span> <span class="n">boost</span><span class="o">::</span><span class="n">filesystem</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Get all files in directory (not recursive)</span>
</span><span class='line'><span class="cm"> * @param directory Directory where the files are contained</span>
</span><span class='line'><span class="cm"> * @return A list containing the file name of all files inside given directory</span>
</span><span class='line'><span class="cm"> **/</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">getFilesInDirectory</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">directory</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">files</span><span class="p">;</span>
</span><span class='line'>  <span class="n">fs</span><span class="o">::</span><span class="n">path</span> <span class="n">root</span><span class="p">(</span><span class="n">directory</span><span class="p">);</span>
</span><span class='line'>  <span class="n">fs</span><span class="o">::</span><span class="n">directory_iterator</span> <span class="n">it_end</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">fs</span><span class="o">::</span><span class="n">directory_iterator</span> <span class="n">it</span><span class="p">(</span><span class="n">root</span><span class="p">);</span> <span class="n">it</span> <span class="o">!=</span> <span class="n">it_end</span><span class="p">;</span> <span class="o">++</span><span class="n">it</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">fs</span><span class="o">::</span><span class="n">is_regular_file</span><span class="p">(</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">path</span><span class="p">()))</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">files</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">path</span><span class="p">().</span><span class="n">string</span><span class="p">());</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">files</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">!=</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Usage: &lt;IMAGES_DIRECTORY&gt;  &lt;NETWORK_INPUT_LAYER_SIZE&gt; &lt;TRAIN_SPLIT_RATIO&gt;&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">imagesDir</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">networkInputSize</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">trainSplitSize</span> <span class="o">=</span> <span class="n">atof</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Reading training set...&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">start</span> <span class="o">=</span> <span class="p">(</span><span class="kt">double</span><span class="p">)</span><span class="n">cv</span><span class="o">::</span><span class="n">getTickCount</span><span class="p">();</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">files</span> <span class="o">=</span> <span class="n">getFilesInDirectory</span><span class="p">(</span><span class="n">imagesDir</span><span class="p">);</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">random_shuffle</span><span class="p">(</span><span class="n">files</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">files</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The function <code>getFilesInDirectory</code> expects as input a directory and returns a list of filenames within this directory. In our <code>main</code>, we expect to receive three parameters from command line: The directory where our training set is stored, the size of our network input layer and the ratio of our training set (i.e., 0.75 indicates that 75% of the images within the training set will be used to train our neural network while the remaining 25% will be used to test it). We then shuffle the list of filenames (in order to prevent <em>bias</em>). Pretty straight-forward until here, aye? :)</p>

<p>Now we are going to iterate over each filename inside <code>files</code> and read the image associated to it. Since we will do it twice (one during the training step and another during the test step), let&rsquo;s create a function apart in order to modularize our code.</p>

<figure class='code'><figcaption><span>opencv_ann.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;::</span><span class="n">const_iterator</span> <span class="n">vec_iter</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Read images from a list of file names and returns, for each read image,</span>
</span><span class='line'><span class="cm"> * its class name and its local descriptors</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">readImages</span><span class="p">(</span><span class="n">vec_iter</span> <span class="n">begin</span><span class="p">,</span> <span class="n">vec_iter</span> <span class="n">end</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">void</span> <span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span><span class="p">,</span> <span class="k">const</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="o">&amp;</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">callback</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">begin</span><span class="p">;</span> <span class="n">it</span> <span class="o">!=</span> <span class="n">end</span><span class="p">;</span> <span class="o">++</span><span class="n">it</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">filename</span> <span class="o">=</span> <span class="o">*</span><span class="n">it</span><span class="p">;</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Reading image &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">filename</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;...&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">img</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">imread</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">img</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;WARNING: Could not read image.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">classname</span> <span class="o">=</span> <span class="n">getClassName</span><span class="p">(</span><span class="n">filename</span><span class="p">);</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">descriptors</span> <span class="o">=</span> <span class="n">getDescriptors</span><span class="p">(</span><span class="n">img</span><span class="p">);</span>
</span><span class='line'>      <span class="n">callback</span><span class="p">(</span><span class="n">classname</span><span class="p">,</span> <span class="n">descriptors</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There it is. The <code>readImages</code> function expect to receive as input two vector iterators (one for the start of our vector and another for the end, indicating the range from which we will iterate over). Finally, it expects another third parameter, a lambda function called &ldquo;callback&rdquo; (lambda functions are only available on C++11, so enable it on compiler by adding the <code>-std=c++11</code> flag or <code>-std=c++0x</code> on old compilers). Now let&rsquo;s look more carefuly on what&rsquo;s happening inside this function.</p>

<p>We use a <code>for</code> to iterate over each filename between the limiters <code>begin</code> and <code>end</code>. For each filename, we read its associated image through the OpenCV <code>imread</code> function. The second parameter passed to <code>imread</code> indicates the color space (0 = gray scale. We don&rsquo;t need the color information in this example. You&rsquo;ll find the explanation later). After calling <code>imread</code>, we check if we could really read the image (through the <code>empty</code> method). If don&rsquo;t, we skip to the next filename. Otherwise, we get the class name and the descriptors associated to the read image and return them to the &ldquo;callback&rdquo; function. Now let&rsquo;s implement the <code>getClassName</code> and <code>getDescriptors</code> functions.</p>

<p>If you look at the files inside the training set you extracted, you will find out that they are named as &ldquo;dog.XXXXX.jpg&rdquo; or &ldquo;cat.XXXXX.jpg&rdquo;. The first three letters is always the class name, where the remaining is only an identifier. So let&rsquo;s get those three first letters!</p>

<figure class='code'><figcaption><span>opencv_ann.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Extract the class name from a file name </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kr">inline</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">getClassName</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">filename</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">filename</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="n">filename</span><span class="p">.</span><span class="n">find_last_of</span><span class="p">(</span><span class="sc">&#39;/&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now what should the <code>getDescriptors</code> function looks like? Let&rsquo;s figure out on the next topic.</p>

<h2>Extracting features</h2>

<p>There are several approaches here. We could use the <a href="https://en.wikipedia.org/wiki/Color_histogram"><strong>color histogram</strong></a>, or perhaps the <a href="https://en.wikipedia.org/wiki/Histogram_of_oriented_gradients"><strong>histogram of oriented gradients</strong></a>, etc., &hellip; However, I&rsquo;m going through a different approach. I&rsquo;m going to use the <a href="http://isit.u-clermont1.fr/~ab/Publications/Alcantarilla_Bartoli_Davison_ECCV12.pdf"><strong>KAZE</strong></a> algorithm to extract local features from the image. Since we can&rsquo;t submit local features to a neural network (because the number of descriptors varies), I&rsquo;m also going to use the <a href="https://en.wikipedia.org/wiki/Bag-of-words_model_in_computer_vision"><strong>Bag of words</strong></a> strategy in order to address this problem, turning all set of descriptors into a single <strong>histogram of visual words</strong>, and THAT will be used as input to our neural network. Got it? Excellent! So let&rsquo;s implement the <code>getDescriptors</code> to extract the KAZE features from an image, and later, after all KAZE features had been extracted, we&rsquo;ll apply the Bag of Words technique.</p>

<figure class='code'><figcaption><span>opencv_ann.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Extract local features for an image</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">getDescriptors</span><span class="p">(</span><span class="k">const</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="o">&amp;</span> <span class="n">img</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Ptr</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">KAZE</span><span class="o">&gt;</span> <span class="n">kaze</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">KAZE</span><span class="o">::</span><span class="n">create</span><span class="p">();</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">KeyPoint</span><span class="o">&gt;</span> <span class="n">keypoints</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">descriptors</span><span class="p">;</span>
</span><span class='line'>  <span class="n">kaze</span><span class="o">-&gt;</span><span class="n">detectAndCompute</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">noArray</span><span class="p">(),</span> <span class="n">keypoints</span><span class="p">,</span> <span class="n">descriptors</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">descriptors</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Ok, now let&rsquo;s go back to our main:</p>

<figure class='code'><figcaption><span>opencv_ann.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="k">struct</span> <span class="n">ImageData</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">classname</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">bowFeatures</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">!=</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Usage: &lt;IMAGES_DIRECTORY&gt;  &lt;NETWORK_INPUT_LAYER_SIZE&gt; &lt;TRAIN_SPLIT_RATIO&gt;&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">imagesDir</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">networkInputSize</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">trainSplitRatio</span> <span class="o">=</span> <span class="n">atof</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Reading training set...&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">start</span> <span class="o">=</span> <span class="p">(</span><span class="kt">double</span><span class="p">)</span><span class="n">cv</span><span class="o">::</span><span class="n">getTickCount</span><span class="p">();</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">files</span> <span class="o">=</span> <span class="n">getFilesInDirectory</span><span class="p">(</span><span class="n">imagesDir</span><span class="p">);</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">random_shuffle</span><span class="p">(</span><span class="n">files</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">files</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">descriptorsSet</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">ImageData</span><span class="o">*&gt;</span> <span class="n">descriptorsMetadata</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">set</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">classes</span><span class="p">;</span>
</span><span class='line'>  <span class="n">readImages</span><span class="p">(</span><span class="n">files</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">files</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="p">(</span><span class="kt">size_t</span><span class="p">)(</span><span class="n">files</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">*</span> <span class="n">trainSplitRatio</span><span class="p">),</span>
</span><span class='line'>      <span class="p">[</span><span class="o">&amp;</span><span class="p">](</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">classname</span><span class="p">,</span> <span class="k">const</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="o">&amp;</span> <span class="n">descriptors</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Append to the set of classes</span>
</span><span class='line'>      <span class="n">classes</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">classname</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">// Append to the list of descriptors</span>
</span><span class='line'>      <span class="n">descriptorsSet</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">descriptors</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">// Append metadata to each extracted feature</span>
</span><span class='line'>      <span class="n">ImageData</span><span class="o">*</span> <span class="n">data</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ImageData</span><span class="p">;</span>
</span><span class='line'>      <span class="n">data</span><span class="o">-&gt;</span><span class="n">classname</span> <span class="o">=</span> <span class="n">classname</span><span class="p">;</span>
</span><span class='line'>      <span class="n">data</span><span class="o">-&gt;</span><span class="n">bowFeatures</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="o">::</span><span class="n">zeros</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">Size</span><span class="p">(</span><span class="n">networkInputSize</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">CV_32F</span><span class="p">);</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">descriptors</span><span class="p">.</span><span class="n">rows</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">descriptorsMetadata</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Time elapsed in minutes: &quot;</span> <span class="o">&lt;&lt;</span> <span class="p">((</span><span class="kt">double</span><span class="p">)</span><span class="n">cv</span><span class="o">::</span><span class="n">getTickCount</span><span class="p">()</span> <span class="o">-</span> <span class="n">start</span><span class="p">)</span> <span class="o">/</span> <span class="n">cv</span><span class="o">::</span><span class="n">getTickFrequency</span><span class="p">()</span> <span class="o">/</span> <span class="mf">60.0</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I created a struct named <code>ImageData</code>, with two fields: <code>classname</code> and <code>bowFeatures</code>. Before calling the <code>readImages</code> function, I instanciated three variables: <code>descriptorsSet</code> (the set of descriptors of all read images), <code>descriptorsMetadata</code> (a vector of the struct we previously created. It&rsquo;s being filled in such way that it has the same number of elements as the number of rows of <code>descriptorsSet</code>. That way, the i-th row of <code>descriptorsSet</code> can also be used to access its metadata (the class name, for instance)). And, for last, the <code>classes</code> variables (a set containing all found classes).</p>

<h2>Training the Bag of Words</h2>

<p>Now that we have the whole set of descriptors stored in the <code>descriptorsSet</code> variable, we can apply the Bag of words strategy. The Bag of Words algorithm is really simple: First we use a clustering algorithm (such as <a href="https://en.wikipedia.org/wiki/K-means_clustering"><strong>k-means</strong></a>) to obtain k centroids. Each centroid representates a <strong>visual word</strong> (the set of visual words is often called <strong>vocabulary</strong>). For each image, we create a histogram of size M, where M is the number of visual words. Now, for each extracted descriptor from the image, we measure its distance to all visual words, obtaining the index of the nearest one. We use that index to increment the position of histogram corresponding to that index, obtaining, that way, <strong>a histogram of visual words</strong>, that can later be submitted to our neural network.</p>

<p style="text-align:center;"><img src="http://abner-math.github.io/images/posts/ann_2.jpg" alt="" /><br>
Source: <a href="http://www.ifp.illinois.edu/~yuhuang/sceneclassification.html">http://www.ifp.illinois.edu/~yuhuang/sceneclassification.html</a></p>

<figure class='code'><figcaption><span>opencv_ann.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Creating vocabulary...&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">start</span> <span class="o">=</span> <span class="p">(</span><span class="kt">double</span><span class="p">)</span><span class="n">cv</span><span class="o">::</span><span class="n">getTickCount</span><span class="p">();</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">labels</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">vocabulary</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// Use k-means to find k centroids (the words of our vocabulary)</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">kmeans</span><span class="p">(</span><span class="n">descriptorsSet</span><span class="p">,</span> <span class="n">networkInputSize</span><span class="p">,</span> <span class="n">labels</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">TermCriteria</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">TermCriteria</span><span class="o">::</span><span class="n">EPS</span> <span class="o">+</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">TermCriteria</span><span class="o">::</span><span class="n">MAX_ITER</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mf">0.01</span><span class="p">),</span> <span class="mi">1</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">KMEANS_PP_CENTERS</span><span class="p">,</span> <span class="n">vocabulary</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// No need to keep it on memory anymore</span>
</span><span class='line'>  <span class="n">descriptorsSet</span><span class="p">.</span><span class="n">release</span><span class="p">();</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Time elapsed in minutes: &quot;</span> <span class="o">&lt;&lt;</span> <span class="p">((</span><span class="kt">double</span><span class="p">)</span><span class="n">cv</span><span class="o">::</span><span class="n">getTickCount</span><span class="p">()</span> <span class="o">-</span> <span class="n">start</span><span class="p">)</span> <span class="o">/</span> <span class="n">cv</span><span class="o">::</span><span class="n">getTickFrequency</span><span class="p">()</span> <span class="o">/</span> <span class="mf">60.0</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// Convert a set of local features for each image in a single descriptors</span>
</span><span class='line'>  <span class="c1">// using the bag of words technique</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Getting histograms of visual words...&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span><span class="o">*</span> <span class="n">ptrLabels</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)(</span><span class="n">labels</span><span class="p">.</span><span class="n">data</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">labels</span><span class="p">.</span><span class="n">rows</span> <span class="o">*</span> <span class="n">labels</span><span class="p">.</span><span class="n">cols</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">label</span> <span class="o">=</span> <span class="o">*</span><span class="n">ptrLabels</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="n">ImageData</span><span class="o">*</span> <span class="n">data</span> <span class="o">=</span> <span class="n">descriptorsMetadata</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="n">data</span><span class="o">-&gt;</span><span class="n">bowFeatures</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">label</span><span class="p">)</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>We use OpenCV <code>k-means</code> function to obtain k centroids (where k is the size of our network input layer, since the size of our histogram must be compatible with it), stored in the <code>vocabulary</code> variable. We also pass an additional parameter, <code>labels</code>, indicating the index of the nearest cluster for each descriptor, so we don&rsquo;t need to computer it twice. Now, iterating over each element of <code>labels</code>, we fill our histograms, the <code>bowFeatures</code> field of our <code>ImageData</code> struct. The strategy of filling the <code>descriptorsMetadata</code> to make its number of elements as the number of rows of <code>descriptorsSet</code> seemed to be very convenient here, as we can directly access the histogram associated to each descriptor.</p>

<h2>Training the neural network</h2>

<p>Now that we have the histogram of visual words for each image, we can finally supply them to our neural network. But, before that, we need to tell to our neural network the expected output for each image. The reason for that is simple: A neural network, or more precisely, the variation of neural network that we are interested in using, called <a href="https://en.wikipedia.org/wiki/Multilayer_perceptron"><strong>Multilayer perceptron</strong></a>, is a <strong>supervised learning algorithm</strong>. A supervised learning algorithm is one that tries to estimate a function H(x) (called <strong>hypothesis function</strong>) that correctly maps inputs to outputs (for instance, we are considering as input the images and as output the class associated to each image - cat or dog).</p>

<p>So we need to supply the class name associated to each image (or, more precisely, to each histogram of visual words) in order to enable it to &ldquo;learn&rdquo; the pattern. However, a neural network doesn&rsquo;t understand categorical data. It works by showing numbers in the input layer and numbers in the output layer, and then it will try to adjust its weights in order that a function (called <strong>activation function</strong>) applied to the input numbers results in the output numbers. This process is shown in the image below.</p>

<p style="text-align:center;"><img src="http://abner-math.github.io/images/posts/ann_3.gif" alt="" /></p>

<p>Since the activation function generally outputs values between 0 and 1, it&rsquo;s usual to encode the classes as a sequence of zeros where only one bit is set to one. This bit is different for each class. For example, consider the example of number of classes = 4. We would then have four codifications:</p>

<p>Class A = 1000<br>
Class B = 0100<br>
Class C = 0010<br>
Class D = 0001<br></p>

<p>As we only have two classes, our codification will be:</p>

<p>Cat = 10<br>
Dog = 01<br></p>

<figure class='code'><figcaption><span>opencv_ann.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="c1">// Filling matrixes to be used by the neural network</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Preparing neural network...&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">trainSamples</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">trainResponses</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">set</span><span class="o">&lt;</span><span class="n">ImageData</span><span class="o">*&gt;</span> <span class="n">uniqueMetadata</span><span class="p">(</span><span class="n">descriptorsMetadata</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">descriptorsMetadata</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">uniqueMetadata</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">it</span> <span class="o">!=</span> <span class="n">uniqueMetadata</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">ImageData</span><span class="o">*</span> <span class="n">data</span> <span class="o">=</span> <span class="o">*</span><span class="n">it</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">normalizedHist</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">normalize</span><span class="p">(</span><span class="n">data</span><span class="o">-&gt;</span><span class="n">bowFeatures</span><span class="p">,</span> <span class="n">normalizedHist</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">data</span><span class="o">-&gt;</span><span class="n">bowFeatures</span><span class="p">.</span><span class="n">rows</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">NORM_MINMAX</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="p">());</span>
</span><span class='line'>      <span class="n">trainSamples</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">normalizedHist</span><span class="p">);</span>
</span><span class='line'>      <span class="n">trainResponses</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">getClassCode</span><span class="p">(</span><span class="n">classes</span><span class="p">,</span> <span class="n">data</span><span class="o">-&gt;</span><span class="n">classname</span><span class="p">));</span>
</span><span class='line'>      <span class="k">delete</span> <span class="o">*</span><span class="n">it</span><span class="p">;</span> <span class="c1">// clear memory</span>
</span><span class='line'>      <span class="n">it</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">descriptorsMetadata</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice the use of the <code>getClassCode</code>. It&rsquo;s a function that turns a class name into its binary codification. Also, pay attention to the <code>cv::normalize</code> function. We normalize the histogram of visual words in order to remove the bias of number of descriptors.</p>

<figure class='code'><figcaption><span>opencv_ann.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Transform a class name into an id</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">getClassId</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">set</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;&amp;</span> <span class="n">classes</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">classname</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">classes</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">it</span> <span class="o">!=</span> <span class="n">classes</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">it</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">it</span> <span class="o">==</span> <span class="n">classname</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="o">++</span><span class="n">index</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">index</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Get a binary code associated to a class</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">getClassCode</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">set</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;&amp;</span> <span class="n">classes</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">classname</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">code</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="o">::</span><span class="n">zeros</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">Size</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">classes</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">1</span><span class="p">),</span> <span class="n">CV_32F</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">getClassId</span><span class="p">(</span><span class="n">classes</span><span class="p">,</span> <span class="n">classname</span><span class="p">);</span>
</span><span class='line'>  <span class="n">code</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">index</span><span class="p">)</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">code</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now we have the inputs and outputs for our neural network! We are finally able to train it!</p>

<figure class='code'><figcaption><span>opencv_ann.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Get a trained neural network according to some inputs and outputs</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">cv</span><span class="o">::</span><span class="n">Ptr</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">ml</span><span class="o">::</span><span class="n">ANN_MLP</span><span class="o">&gt;</span> <span class="n">getTrainedNeuralNetwork</span><span class="p">(</span><span class="k">const</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="o">&amp;</span> <span class="n">trainSamples</span><span class="p">,</span> <span class="k">const</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="o">&amp;</span> <span class="n">trainResponses</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">networkInputSize</span> <span class="o">=</span> <span class="n">trainSamples</span><span class="p">.</span><span class="n">cols</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">networkOutputSize</span> <span class="o">=</span> <span class="n">trainResponses</span><span class="p">.</span><span class="n">cols</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Ptr</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">ml</span><span class="o">::</span><span class="n">ANN_MLP</span><span class="o">&gt;</span> <span class="n">mlp</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">ml</span><span class="o">::</span><span class="n">ANN_MLP</span><span class="o">::</span><span class="n">create</span><span class="p">();</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">layerSizes</span> <span class="o">=</span> <span class="p">{</span> <span class="n">networkInputSize</span><span class="p">,</span> <span class="n">networkInputSize</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>      <span class="n">networkOutputSize</span> <span class="p">};</span>
</span><span class='line'>  <span class="n">mlp</span><span class="o">-&gt;</span><span class="n">setLayerSizes</span><span class="p">(</span><span class="n">layerSizes</span><span class="p">);</span>
</span><span class='line'>  <span class="n">mlp</span><span class="o">-&gt;</span><span class="n">setActivationFunction</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">ml</span><span class="o">::</span><span class="n">ANN_MLP</span><span class="o">::</span><span class="n">SIGMOID_SYM</span><span class="p">);</span>
</span><span class='line'>  <span class="n">mlp</span><span class="o">-&gt;</span><span class="n">train</span><span class="p">(</span><span class="n">trainSamples</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">ml</span><span class="o">::</span><span class="n">ROW_SAMPLE</span><span class="p">,</span> <span class="n">trainResponses</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">mlp</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="c1">// Training neural network</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Training neural network...&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">start</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">getTickCount</span><span class="p">();</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Ptr</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">ml</span><span class="o">::</span><span class="n">ANN_MLP</span><span class="o">&gt;</span> <span class="n">mlp</span> <span class="o">=</span> <span class="n">getTrainedNeuralNetwork</span><span class="p">(</span><span class="n">networkInputSize</span><span class="p">,</span>
</span><span class='line'>      <span class="n">trainSamples</span><span class="p">,</span> <span class="n">trainResponses</span><span class="p">);</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Time elapsed in minutes: &quot;</span> <span class="o">&lt;&lt;</span> <span class="p">((</span><span class="kt">double</span><span class="p">)</span><span class="n">cv</span><span class="o">::</span><span class="n">getTickCount</span><span class="p">()</span> <span class="o">-</span> <span class="n">start</span><span class="p">)</span> <span class="o">/</span> <span class="n">cv</span><span class="o">::</span><span class="n">getTickFrequency</span><span class="p">()</span> <span class="o">/</span> <span class="mf">60.0</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// We can clear memory now </span>
</span><span class='line'>  <span class="n">trainSamples</span><span class="p">.</span><span class="n">release</span><span class="p">();</span>
</span><span class='line'>  <span class="n">trainResponses</span><span class="p">.</span><span class="n">release</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>getTrainedNeuralNetwork</code> function expects to receive as input the size of training samples and training outputs. Inside the function, I first set two variables: <code>networkInputSize</code>, that is the number of columns (features) of our training samples and <code>networkOutputSize</code>, that is the number of columns of our training outputs. I then set <code>layerSizes</code>, that defines the number of layers and number of nodes for each layer of our network. For instance, I&rsquo;m creating a network that only have one hidden layer (with size <code>networkInputSize / 2</code>), since I think it&rsquo;ll be enough for our task. If you want improved accuracy, we can increase it, at cost of performance.</p>

<h2>Evaluating our network</h2>

<p>And now the training step is DONE! Let&rsquo;s use our trained neural network to evaluate our test samples and measure how good it is. First, let&rsquo;s train a FLANN model from the vocabulary, so we can calculate the histogram of visual words for each test sample much faster:</p>

<figure class='code'><figcaption><span>opencv_ann.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// Train FLANN </span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Training FLANN...&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">start</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">getTickCount</span><span class="p">();</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">FlannBasedMatcher</span> <span class="n">flann</span><span class="p">;</span>
</span><span class='line'>  <span class="n">flann</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">vocabulary</span><span class="p">);</span>
</span><span class='line'>  <span class="n">flann</span><span class="p">.</span><span class="n">train</span><span class="p">();</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Time elapsed in minutes: &quot;</span> <span class="o">&lt;&lt;</span> <span class="p">((</span><span class="kt">double</span><span class="p">)</span><span class="n">cv</span><span class="o">::</span><span class="n">getTickCount</span><span class="p">()</span> <span class="o">-</span> <span class="n">start</span><span class="p">)</span> <span class="o">/</span> <span class="n">cv</span><span class="o">::</span><span class="n">getTickFrequency</span><span class="p">()</span> <span class="o">/</span> <span class="mf">60.0</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s read the test samples:</p>

<figure class='code'><figcaption><span>opencv_ann.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="c1">// Reading test set </span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Reading test set...&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">start</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">getTickCount</span><span class="p">();</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">testSamples</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">testOutputExpected</span><span class="p">;</span>
</span><span class='line'>  <span class="n">readImages</span><span class="p">(</span><span class="n">files</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="p">(</span><span class="kt">size_t</span><span class="p">)(</span><span class="n">files</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">*</span> <span class="n">trainSplitRatio</span><span class="p">),</span> <span class="n">files</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span>
</span><span class='line'>      <span class="p">[</span><span class="o">&amp;</span><span class="p">](</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">classname</span><span class="p">,</span> <span class="k">const</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="o">&amp;</span> <span class="n">descriptors</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Get histogram of visual words using bag of words technique</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">bowFeatures</span> <span class="o">=</span> <span class="n">getBOWFeatures</span><span class="p">(</span><span class="n">flann</span><span class="p">,</span> <span class="n">descriptors</span><span class="p">,</span> <span class="n">networkInputSize</span><span class="p">);</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">normalize</span><span class="p">(</span><span class="n">bowFeatures</span><span class="p">,</span> <span class="n">bowFeatures</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">bowFeatures</span><span class="p">.</span><span class="n">rows</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">NORM_MINMAX</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="p">());</span>
</span><span class='line'>      <span class="n">testSamples</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">bowFeatures</span><span class="p">);</span>
</span><span class='line'>      <span class="n">testOutputExpected</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">getClassId</span><span class="p">(</span><span class="n">classes</span><span class="p">,</span> <span class="n">classname</span><span class="p">));</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Time elapsed in minutes: &quot;</span> <span class="o">&lt;&lt;</span> <span class="p">((</span><span class="kt">double</span><span class="p">)</span><span class="n">cv</span><span class="o">::</span><span class="n">getTickCount</span><span class="p">()</span> <span class="o">-</span> <span class="n">start</span><span class="p">)</span> <span class="o">/</span> <span class="n">cv</span><span class="o">::</span><span class="n">getTickFrequency</span><span class="p">()</span> <span class="o">/</span> <span class="mf">60.0</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We instanciated two variables: <code>testSamples</code> (set of histogram of visual words for each test samples) and <code>testOutputExpected</code> (the output expected for each test sample. We are using a number that correspond to the id of the class, obtained through the <code>getClassId</code> previously defined). We then get the Bag of Words features through the <code>getBOWFeatures</code> function and normalize it. What we still didn&rsquo;t define is the <code>getBOWFeatures</code> function, that turns a set of local KAZE features into a histogram of visual words. Let&rsquo;s do it:</p>

<figure class='code'><figcaption><span>opencv_ann.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Turn local features into a single bag of words histogram of </span>
</span><span class='line'><span class="cm"> * of visual words (a.k.a., bag of words features)</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">getBOWFeatures</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">FlannBasedMatcher</span><span class="o">&amp;</span> <span class="n">flann</span><span class="p">,</span> <span class="k">const</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="o">&amp;</span> <span class="n">descriptors</span><span class="p">,</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">vocabularySize</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">outputArray</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="o">::</span><span class="n">zeros</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">Size</span><span class="p">(</span><span class="n">vocabularySize</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">CV_32F</span><span class="p">);</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">DMatch</span><span class="o">&gt;</span> <span class="n">matches</span><span class="p">;</span>
</span><span class='line'>  <span class="n">flann</span><span class="p">.</span><span class="n">match</span><span class="p">(</span><span class="n">descriptors</span><span class="p">,</span> <span class="n">matches</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">matches</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">visualWord</span> <span class="o">=</span> <span class="n">matches</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">trainIdx</span><span class="p">;</span>
</span><span class='line'>      <span class="n">outputArray</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">visualWord</span><span class="p">)</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">outputArray</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It uses the FLANN <code>match</code> method to calculate the nearest visual word for each descriptor. It then fill a histogram with the number of occurrences for each visual word. Pretty simple, right?</p>

<p>Now that we have the inputs and outputs for the test samples, let&rsquo;s calculate a <a href="https://en.wikipedia.org/wiki/Confusion_matrix"><strong>confusion matrix</strong></a>.</p>

<figure class='code'><figcaption><span>opencv_ann.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Receives a column matrix contained the probabilities associated to </span>
</span><span class='line'><span class="cm"> * each class and returns the id of column which contains the highest</span>
</span><span class='line'><span class="cm"> * probability</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">getPredictedClass</span><span class="p">(</span><span class="k">const</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="o">&amp;</span> <span class="n">predictions</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">maxPrediction</span> <span class="o">=</span> <span class="n">predictions</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">maxPredictionIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">float</span><span class="o">*</span> <span class="n">ptrPredictions</span> <span class="o">=</span> <span class="n">predictions</span><span class="p">.</span><span class="n">ptr</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">predictions</span><span class="p">.</span><span class="n">cols</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">float</span> <span class="n">prediction</span> <span class="o">=</span> <span class="o">*</span><span class="n">ptrPredictions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">prediction</span> <span class="o">&gt;</span> <span class="n">maxPrediction</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">maxPrediction</span> <span class="o">=</span> <span class="n">prediction</span><span class="p">;</span>
</span><span class='line'>          <span class="n">maxPredictionIndex</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">maxPredictionIndex</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Get a confusion matrix from a set of test samples and their expected</span>
</span><span class='line'><span class="cm"> * outputs</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">getConfusionMatrix</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">Ptr</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">ml</span><span class="o">::</span><span class="n">ANN_MLP</span><span class="o">&gt;</span> <span class="n">mlp</span><span class="p">,</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="o">&amp;</span> <span class="n">testSamples</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">testOutputExpected</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">testOutput</span><span class="p">;</span>
</span><span class='line'>  <span class="n">mlp</span><span class="o">-&gt;</span><span class="n">predict</span><span class="p">(</span><span class="n">testSamples</span><span class="p">,</span> <span class="n">testOutput</span><span class="p">);</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">confusionMatrix</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">testOutput</span><span class="p">.</span><span class="n">rows</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">predictedClass</span> <span class="o">=</span> <span class="n">getPredictedClass</span><span class="p">(</span><span class="n">testOutput</span><span class="p">.</span><span class="n">row</span><span class="p">(</span><span class="n">i</span><span class="p">));</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">expectedClass</span> <span class="o">=</span> <span class="n">testOutputExpected</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>      <span class="n">confusionMatrix</span><span class="p">[</span><span class="n">expectedClass</span><span class="p">][</span><span class="n">predictedClass</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">confusionMatrix</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Print a confusion matrix on screen</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">void</span> <span class="n">printConfusionMatrix</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;&amp;</span> <span class="n">confusionMatrix</span><span class="p">,</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">set</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;&amp;</span> <span class="n">classes</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">classes</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">it</span> <span class="o">!=</span> <span class="n">classes</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">it</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">it</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; &quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">confusionMatrix</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">confusionMatrix</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">confusionMatrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; &quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Get the accuracy for a model (i.e., percentage of correctly predicted</span>
</span><span class='line'><span class="cm"> * test samples)</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">float</span> <span class="n">getAccuracy</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;&amp;</span> <span class="n">confusionMatrix</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">hits</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">confusionMatrix</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">confusionMatrix</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">i</span><span class="p">).</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">j</span><span class="p">)</span> <span class="n">hits</span> <span class="o">+=</span> <span class="n">confusionMatrix</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">i</span><span class="p">).</span><span class="n">at</span><span class="p">(</span><span class="n">j</span><span class="p">);</span>
</span><span class='line'>          <span class="n">total</span> <span class="o">+=</span> <span class="n">confusionMatrix</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">i</span><span class="p">).</span><span class="n">at</span><span class="p">(</span><span class="n">j</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">hits</span> <span class="o">/</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="n">total</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="c1">// Get confusion matrix of the test set</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">confusionMatrix</span> <span class="o">=</span> <span class="n">getConfusionMatrix</span><span class="p">(</span><span class="n">mlp</span><span class="p">,</span>
</span><span class='line'>      <span class="n">testSamples</span><span class="p">,</span> <span class="n">testOutputExpected</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// Get accuracy of our model</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Confusion matrix: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">printConfusionMatrix</span><span class="p">(</span><span class="n">confusionMatrix</span><span class="p">,</span> <span class="n">classes</span><span class="p">);</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Accuracy: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">getAccuracy</span><span class="p">(</span><span class="n">confusionMatrix</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>OK, a lot happened here. Let&rsquo;s check it step by step. First, in the <code>getConfusionMatrix</code>, I use the MLP <code>predict</code> method to predict the class for each test sample. It returns a matrix with the same number of columns as our number of classes, where on each column lies a &ldquo;probability&rdquo; of the sample belong to class corresponding to that column. We use than a function called <code>getPredictedClass</code>, which is called over each row of the output of <code>predict</code> method and return the column index with highest &ldquo;probability&rdquo;. Now that we have the predicted and expected classes, we can construct our confusion matrix by simplying incrementing the index composed by the tuple (expected, predicted).</p>

<p>In possess of the confusion matrix, we can easily calculate the <strong>accuracy</strong>, that is the ratio of correctly predicted samples, by simplying summing the diagonal of our confusion matrix (number of correct predictions) and diving by the sum of our cells of our confusion matrix (number of test samples).</p>

<p style="text-align:center;"> <img src="http://abner-math.github.io/images/posts/ann_4.png" alt="" /></p>

<h2>Saving models</h2>

<p>Finally, let&rsquo;s save our models, so we can use it later on a production environment:</p>

<figure class='code'><figcaption><span>opencv_ann.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Save our obtained models (neural network, bag of words vocabulary</span>
</span><span class='line'><span class="cm"> * and class names) to use it later</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">saveModels</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">Ptr</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">ml</span><span class="o">::</span><span class="n">ANN_MLP</span><span class="o">&gt;</span> <span class="n">mlp</span><span class="p">,</span> <span class="k">const</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="o">&amp;</span> <span class="n">vocabulary</span><span class="p">,</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">set</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;&amp;</span> <span class="n">classes</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">mlp</span><span class="o">-&gt;</span><span class="n">save</span><span class="p">(</span><span class="s">&quot;mlp.yaml&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">FileStorage</span> <span class="n">fs</span><span class="p">(</span><span class="s">&quot;vocabulary.yaml&quot;</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">FileStorage</span><span class="o">::</span><span class="n">WRITE</span><span class="p">);</span>
</span><span class='line'>  <span class="n">fs</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;vocabulary&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">vocabulary</span><span class="p">;</span>
</span><span class='line'>  <span class="n">fs</span><span class="p">.</span><span class="n">release</span><span class="p">();</span>   
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">ofstream</span> <span class="n">classesOutput</span><span class="p">(</span><span class="s">&quot;classes.txt&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">classes</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">it</span> <span class="o">!=</span> <span class="n">classes</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">it</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">classesOutput</span> <span class="o">&lt;&lt;</span> <span class="n">getClassId</span><span class="p">(</span><span class="n">classes</span><span class="p">,</span> <span class="o">*</span><span class="n">it</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">it</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">classesOutput</span><span class="p">.</span><span class="n">close</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// Save models</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Saving models...&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">saveModels</span><span class="p">(</span><span class="n">mlp</span><span class="p">,</span> <span class="n">vocabulary</span><span class="p">,</span> <span class="n">classes</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The MLP object that its own saving function called <code>save</code> (it also has a <code>load</code> method that can later be used to load a trained neural network from a file). We save the vocabulary (since we need it in order to convert the local features into a histogram of visual words) into a file named &ldquo;vocabulary.yaml&rdquo;. And, finally, we also save the class names associated to each id (so we can map the output of neural network to a name). That&rsquo;s it! The full code can be found below.</p>

<center><input id="spoiler" type="button" value="See source code" onclick="toggle_visibility('code');"></center>


<div id="code">
<figure class='code'><figcaption><span>opencv_ann.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="cp">#include &lt;functional&gt;</span>
</span><span class='line'><span class="cp">#include &lt;map&gt;</span>
</span><span class='line'><span class="cp">#include &lt;set&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fstream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;opencv2/core/core.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;opencv2/highgui/highgui.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;opencv2/features2d/features2d.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;opencv2/ml/ml.hpp&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;boost/filesystem.hpp&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="n">fs</span> <span class="o">=</span> <span class="n">boost</span><span class="o">::</span><span class="n">filesystem</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;::</span><span class="n">const_iterator</span> <span class="n">vec_iter</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">ImageData</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">classname</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">bowFeatures</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Get all files in directory (not recursive)</span>
</span><span class='line'><span class="cm"> * @param directory Directory where the files are contained</span>
</span><span class='line'><span class="cm"> * @return A list containing the file name of all files inside given directory</span>
</span><span class='line'><span class="cm"> **/</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">getFilesInDirectory</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">directory</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">files</span><span class="p">;</span>
</span><span class='line'>  <span class="n">fs</span><span class="o">::</span><span class="n">path</span> <span class="n">root</span><span class="p">(</span><span class="n">directory</span><span class="p">);</span>
</span><span class='line'>  <span class="n">fs</span><span class="o">::</span><span class="n">directory_iterator</span> <span class="n">it_end</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">fs</span><span class="o">::</span><span class="n">directory_iterator</span> <span class="n">it</span><span class="p">(</span><span class="n">root</span><span class="p">);</span> <span class="n">it</span> <span class="o">!=</span> <span class="n">it_end</span><span class="p">;</span> <span class="o">++</span><span class="n">it</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">fs</span><span class="o">::</span><span class="n">is_regular_file</span><span class="p">(</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">path</span><span class="p">()))</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">files</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">path</span><span class="p">().</span><span class="n">string</span><span class="p">());</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">files</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Extract the class name from a file name </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kr">inline</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">getClassName</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">filename</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">filename</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="n">filename</span><span class="p">.</span><span class="n">find_last_of</span><span class="p">(</span><span class="sc">&#39;/&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Extract local features for an image</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">getDescriptors</span><span class="p">(</span><span class="k">const</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="o">&amp;</span> <span class="n">img</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Ptr</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">KAZE</span><span class="o">&gt;</span> <span class="n">kaze</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">KAZE</span><span class="o">::</span><span class="n">create</span><span class="p">();</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">KeyPoint</span><span class="o">&gt;</span> <span class="n">keypoints</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">descriptors</span><span class="p">;</span>
</span><span class='line'>  <span class="n">kaze</span><span class="o">-&gt;</span><span class="n">detectAndCompute</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">noArray</span><span class="p">(),</span> <span class="n">keypoints</span><span class="p">,</span> <span class="n">descriptors</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">descriptors</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Read images from a list of file names and returns, for each read image,</span>
</span><span class='line'><span class="cm"> * its class name and its local descriptors</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">void</span> <span class="n">readImages</span><span class="p">(</span><span class="n">vec_iter</span> <span class="n">begin</span><span class="p">,</span> <span class="n">vec_iter</span> <span class="n">end</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">void</span> <span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span><span class="p">,</span> <span class="k">const</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="o">&amp;</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">callback</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">begin</span><span class="p">;</span> <span class="n">it</span> <span class="o">!=</span> <span class="n">end</span><span class="p">;</span> <span class="o">++</span><span class="n">it</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">filename</span> <span class="o">=</span> <span class="o">*</span><span class="n">it</span><span class="p">;</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Reading image &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">filename</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;...&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">img</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">imread</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">img</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;WARNING: Could not read image.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">classname</span> <span class="o">=</span> <span class="n">getClassName</span><span class="p">(</span><span class="n">filename</span><span class="p">);</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">descriptors</span> <span class="o">=</span> <span class="n">getDescriptors</span><span class="p">(</span><span class="n">img</span><span class="p">);</span>
</span><span class='line'>      <span class="n">callback</span><span class="p">(</span><span class="n">classname</span><span class="p">,</span> <span class="n">descriptors</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Transform a class name into an id</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="n">getClassId</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">set</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;&amp;</span> <span class="n">classes</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">classname</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">classes</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">it</span> <span class="o">!=</span> <span class="n">classes</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">it</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">it</span> <span class="o">==</span> <span class="n">classname</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="o">++</span><span class="n">index</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">index</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Get a binary code associated to a class</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">getClassCode</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">set</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;&amp;</span> <span class="n">classes</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">classname</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">code</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="o">::</span><span class="n">zeros</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">Size</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">classes</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">1</span><span class="p">),</span> <span class="n">CV_32F</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">getClassId</span><span class="p">(</span><span class="n">classes</span><span class="p">,</span> <span class="n">classname</span><span class="p">);</span>
</span><span class='line'>  <span class="n">code</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">index</span><span class="p">)</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">code</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Turn local features into a single bag of words histogram of </span>
</span><span class='line'><span class="cm"> * of visual words (a.k.a., bag of words features)</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">getBOWFeatures</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">FlannBasedMatcher</span><span class="o">&amp;</span> <span class="n">flann</span><span class="p">,</span> <span class="k">const</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="o">&amp;</span> <span class="n">descriptors</span><span class="p">,</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">vocabularySize</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">outputArray</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="o">::</span><span class="n">zeros</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">Size</span><span class="p">(</span><span class="n">vocabularySize</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">CV_32F</span><span class="p">);</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">DMatch</span><span class="o">&gt;</span> <span class="n">matches</span><span class="p">;</span>
</span><span class='line'>  <span class="n">flann</span><span class="p">.</span><span class="n">match</span><span class="p">(</span><span class="n">descriptors</span><span class="p">,</span> <span class="n">matches</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">matches</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">visualWord</span> <span class="o">=</span> <span class="n">matches</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">trainIdx</span><span class="p">;</span>
</span><span class='line'>      <span class="n">outputArray</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">visualWord</span><span class="p">)</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">outputArray</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Get a trained neural network according to some inputs and outputs</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">cv</span><span class="o">::</span><span class="n">Ptr</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">ml</span><span class="o">::</span><span class="n">ANN_MLP</span><span class="o">&gt;</span> <span class="n">getTrainedNeuralNetwork</span><span class="p">(</span><span class="k">const</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="o">&amp;</span> <span class="n">trainSamples</span><span class="p">,</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="o">&amp;</span> <span class="n">trainResponses</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">networkInputSize</span> <span class="o">=</span> <span class="n">trainSamples</span><span class="p">.</span><span class="n">cols</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">networkOutputSize</span> <span class="o">=</span> <span class="n">trainResponses</span><span class="p">.</span><span class="n">cols</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Ptr</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">ml</span><span class="o">::</span><span class="n">ANN_MLP</span><span class="o">&gt;</span> <span class="n">mlp</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">ml</span><span class="o">::</span><span class="n">ANN_MLP</span><span class="o">::</span><span class="n">create</span><span class="p">();</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">layerSizes</span> <span class="o">=</span> <span class="p">{</span> <span class="n">networkInputSize</span><span class="p">,</span> <span class="n">networkInputSize</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>      <span class="n">networkOutputSize</span> <span class="p">};</span>
</span><span class='line'>  <span class="n">mlp</span><span class="o">-&gt;</span><span class="n">setLayerSizes</span><span class="p">(</span><span class="n">layerSizes</span><span class="p">);</span>
</span><span class='line'>  <span class="n">mlp</span><span class="o">-&gt;</span><span class="n">setActivationFunction</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">ml</span><span class="o">::</span><span class="n">ANN_MLP</span><span class="o">::</span><span class="n">SIGMOID_SYM</span><span class="p">);</span>
</span><span class='line'>  <span class="n">mlp</span><span class="o">-&gt;</span><span class="n">train</span><span class="p">(</span><span class="n">trainSamples</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">ml</span><span class="o">::</span><span class="n">ROW_SAMPLE</span><span class="p">,</span> <span class="n">trainResponses</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">mlp</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Receives a column matrix contained the probabilities associated to </span>
</span><span class='line'><span class="cm"> * each class and returns the id of column which contains the highest</span>
</span><span class='line'><span class="cm"> * probability</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="n">getPredictedClass</span><span class="p">(</span><span class="k">const</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="o">&amp;</span> <span class="n">predictions</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">maxPrediction</span> <span class="o">=</span> <span class="n">predictions</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">maxPredictionIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">float</span><span class="o">*</span> <span class="n">ptrPredictions</span> <span class="o">=</span> <span class="n">predictions</span><span class="p">.</span><span class="n">ptr</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">predictions</span><span class="p">.</span><span class="n">cols</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">float</span> <span class="n">prediction</span> <span class="o">=</span> <span class="o">*</span><span class="n">ptrPredictions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">prediction</span> <span class="o">&gt;</span> <span class="n">maxPrediction</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">maxPrediction</span> <span class="o">=</span> <span class="n">prediction</span><span class="p">;</span>
</span><span class='line'>          <span class="n">maxPredictionIndex</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">maxPredictionIndex</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Get a confusion matrix from a set of test samples and their expected</span>
</span><span class='line'><span class="cm"> * outputs</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">getConfusionMatrix</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">Ptr</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">ml</span><span class="o">::</span><span class="n">ANN_MLP</span><span class="o">&gt;</span> <span class="n">mlp</span><span class="p">,</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="o">&amp;</span> <span class="n">testSamples</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">testOutputExpected</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">testOutput</span><span class="p">;</span>
</span><span class='line'>  <span class="n">mlp</span><span class="o">-&gt;</span><span class="n">predict</span><span class="p">(</span><span class="n">testSamples</span><span class="p">,</span> <span class="n">testOutput</span><span class="p">);</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">confusionMatrix</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">testOutput</span><span class="p">.</span><span class="n">rows</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">predictedClass</span> <span class="o">=</span> <span class="n">getPredictedClass</span><span class="p">(</span><span class="n">testOutput</span><span class="p">.</span><span class="n">row</span><span class="p">(</span><span class="n">i</span><span class="p">));</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">expectedClass</span> <span class="o">=</span> <span class="n">testOutputExpected</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>      <span class="n">confusionMatrix</span><span class="p">[</span><span class="n">expectedClass</span><span class="p">][</span><span class="n">predictedClass</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">confusionMatrix</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Print a confusion matrix on screen</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">void</span> <span class="n">printConfusionMatrix</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;&amp;</span> <span class="n">confusionMatrix</span><span class="p">,</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">set</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;&amp;</span> <span class="n">classes</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">classes</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">it</span> <span class="o">!=</span> <span class="n">classes</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">it</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">it</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; &quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">confusionMatrix</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">confusionMatrix</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">confusionMatrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; &quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Get the accuracy for a model (i.e., percentage of correctly predicted</span>
</span><span class='line'><span class="cm"> * test samples)</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">float</span> <span class="n">getAccuracy</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;&amp;</span> <span class="n">confusionMatrix</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">hits</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">confusionMatrix</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">confusionMatrix</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">i</span><span class="p">).</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">j</span><span class="p">)</span> <span class="n">hits</span> <span class="o">+=</span> <span class="n">confusionMatrix</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">i</span><span class="p">).</span><span class="n">at</span><span class="p">(</span><span class="n">j</span><span class="p">);</span>
</span><span class='line'>          <span class="n">total</span> <span class="o">+=</span> <span class="n">confusionMatrix</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">i</span><span class="p">).</span><span class="n">at</span><span class="p">(</span><span class="n">j</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">hits</span> <span class="o">/</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="n">total</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Save our obtained models (neural network, bag of words vocabulary</span>
</span><span class='line'><span class="cm"> * and class names) to use it later</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">void</span> <span class="n">saveModels</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">Ptr</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">ml</span><span class="o">::</span><span class="n">ANN_MLP</span><span class="o">&gt;</span> <span class="n">mlp</span><span class="p">,</span> <span class="k">const</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="o">&amp;</span> <span class="n">vocabulary</span><span class="p">,</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">set</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;&amp;</span> <span class="n">classes</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">mlp</span><span class="o">-&gt;</span><span class="n">save</span><span class="p">(</span><span class="s">&quot;mlp.yaml&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">FileStorage</span> <span class="n">fs</span><span class="p">(</span><span class="s">&quot;vocabulary.yaml&quot;</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">FileStorage</span><span class="o">::</span><span class="n">WRITE</span><span class="p">);</span>
</span><span class='line'>  <span class="n">fs</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;vocabulary&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">vocabulary</span><span class="p">;</span>
</span><span class='line'>  <span class="n">fs</span><span class="p">.</span><span class="n">release</span><span class="p">();</span>   
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">ofstream</span> <span class="n">classesOutput</span><span class="p">(</span><span class="s">&quot;classes.txt&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">classes</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">it</span> <span class="o">!=</span> <span class="n">classes</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">it</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">classesOutput</span> <span class="o">&lt;&lt;</span> <span class="n">getClassId</span><span class="p">(</span><span class="n">classes</span><span class="p">,</span> <span class="o">*</span><span class="n">it</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">it</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">classesOutput</span><span class="p">.</span><span class="n">close</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">!=</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Usage: &lt;IMAGES_DIRECTORY&gt;  &lt;NETWORK_INPUT_LAYER_SIZE&gt; &lt;TRAIN_SPLIT_RATIO&gt;&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">imagesDir</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">networkInputSize</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">trainSplitRatio</span> <span class="o">=</span> <span class="n">atof</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Reading training set...&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">start</span> <span class="o">=</span> <span class="p">(</span><span class="kt">double</span><span class="p">)</span><span class="n">cv</span><span class="o">::</span><span class="n">getTickCount</span><span class="p">();</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">files</span> <span class="o">=</span> <span class="n">getFilesInDirectory</span><span class="p">(</span><span class="n">imagesDir</span><span class="p">);</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">random_shuffle</span><span class="p">(</span><span class="n">files</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">files</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">descriptorsSet</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">ImageData</span><span class="o">*&gt;</span> <span class="n">descriptorsMetadata</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">set</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">classes</span><span class="p">;</span>
</span><span class='line'>  <span class="n">readImages</span><span class="p">(</span><span class="n">files</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">files</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="p">(</span><span class="kt">size_t</span><span class="p">)(</span><span class="n">files</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">*</span> <span class="n">trainSplitRatio</span><span class="p">),</span>
</span><span class='line'>      <span class="p">[</span><span class="o">&amp;</span><span class="p">](</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">classname</span><span class="p">,</span> <span class="k">const</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="o">&amp;</span> <span class="n">descriptors</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Append to the set of classes</span>
</span><span class='line'>      <span class="n">classes</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">classname</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">// Append to the list of descriptors</span>
</span><span class='line'>      <span class="n">descriptorsSet</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">descriptors</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">// Append metadata to each extracted feature</span>
</span><span class='line'>      <span class="n">ImageData</span><span class="o">*</span> <span class="n">data</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ImageData</span><span class="p">;</span>
</span><span class='line'>      <span class="n">data</span><span class="o">-&gt;</span><span class="n">classname</span> <span class="o">=</span> <span class="n">classname</span><span class="p">;</span>
</span><span class='line'>      <span class="n">data</span><span class="o">-&gt;</span><span class="n">bowFeatures</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="o">::</span><span class="n">zeros</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">Size</span><span class="p">(</span><span class="n">networkInputSize</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">CV_32F</span><span class="p">);</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">descriptors</span><span class="p">.</span><span class="n">rows</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">descriptorsMetadata</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Time elapsed in minutes: &quot;</span> <span class="o">&lt;&lt;</span> <span class="p">((</span><span class="kt">double</span><span class="p">)</span><span class="n">cv</span><span class="o">::</span><span class="n">getTickCount</span><span class="p">()</span> <span class="o">-</span> <span class="n">start</span><span class="p">)</span> <span class="o">/</span> <span class="n">cv</span><span class="o">::</span><span class="n">getTickFrequency</span><span class="p">()</span> <span class="o">/</span> <span class="mf">60.0</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Creating vocabulary...&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">start</span> <span class="o">=</span> <span class="p">(</span><span class="kt">double</span><span class="p">)</span><span class="n">cv</span><span class="o">::</span><span class="n">getTickCount</span><span class="p">();</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">labels</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">vocabulary</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// Use k-means to find k centroids (the words of our vocabulary)</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">kmeans</span><span class="p">(</span><span class="n">descriptorsSet</span><span class="p">,</span> <span class="n">networkInputSize</span><span class="p">,</span> <span class="n">labels</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">TermCriteria</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">TermCriteria</span><span class="o">::</span><span class="n">EPS</span> <span class="o">+</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">TermCriteria</span><span class="o">::</span><span class="n">MAX_ITER</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mf">0.01</span><span class="p">),</span> <span class="mi">1</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">KMEANS_PP_CENTERS</span><span class="p">,</span> <span class="n">vocabulary</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// No need to keep it on memory anymore</span>
</span><span class='line'>  <span class="n">descriptorsSet</span><span class="p">.</span><span class="n">release</span><span class="p">();</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Time elapsed in minutes: &quot;</span> <span class="o">&lt;&lt;</span> <span class="p">((</span><span class="kt">double</span><span class="p">)</span><span class="n">cv</span><span class="o">::</span><span class="n">getTickCount</span><span class="p">()</span> <span class="o">-</span> <span class="n">start</span><span class="p">)</span> <span class="o">/</span> <span class="n">cv</span><span class="o">::</span><span class="n">getTickFrequency</span><span class="p">()</span> <span class="o">/</span> <span class="mf">60.0</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// Convert a set of local features for each image in a single descriptors</span>
</span><span class='line'>  <span class="c1">// using the bag of words technique</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Getting histograms of visual words...&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span><span class="o">*</span> <span class="n">ptrLabels</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)(</span><span class="n">labels</span><span class="p">.</span><span class="n">data</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">labels</span><span class="p">.</span><span class="n">rows</span> <span class="o">*</span> <span class="n">labels</span><span class="p">.</span><span class="n">cols</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">label</span> <span class="o">=</span> <span class="o">*</span><span class="n">ptrLabels</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="n">ImageData</span><span class="o">*</span> <span class="n">data</span> <span class="o">=</span> <span class="n">descriptorsMetadata</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="n">data</span><span class="o">-&gt;</span><span class="n">bowFeatures</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">label</span><span class="p">)</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// Filling matrixes to be used by the neural network</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Preparing neural network...&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">trainSamples</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">trainResponses</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">set</span><span class="o">&lt;</span><span class="n">ImageData</span><span class="o">*&gt;</span> <span class="n">uniqueMetadata</span><span class="p">(</span><span class="n">descriptorsMetadata</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">descriptorsMetadata</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">uniqueMetadata</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">it</span> <span class="o">!=</span> <span class="n">uniqueMetadata</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">ImageData</span><span class="o">*</span> <span class="n">data</span> <span class="o">=</span> <span class="o">*</span><span class="n">it</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">normalizedHist</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">normalize</span><span class="p">(</span><span class="n">data</span><span class="o">-&gt;</span><span class="n">bowFeatures</span><span class="p">,</span> <span class="n">normalizedHist</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">data</span><span class="o">-&gt;</span><span class="n">bowFeatures</span><span class="p">.</span><span class="n">rows</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">NORM_MINMAX</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="p">());</span>
</span><span class='line'>      <span class="n">trainSamples</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">normalizedHist</span><span class="p">);</span>
</span><span class='line'>      <span class="n">trainResponses</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">getClassCode</span><span class="p">(</span><span class="n">classes</span><span class="p">,</span> <span class="n">data</span><span class="o">-&gt;</span><span class="n">classname</span><span class="p">));</span>
</span><span class='line'>      <span class="k">delete</span> <span class="o">*</span><span class="n">it</span><span class="p">;</span> <span class="c1">// clear memory</span>
</span><span class='line'>      <span class="n">it</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">descriptorsMetadata</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// Training neural network</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Training neural network...&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">start</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">getTickCount</span><span class="p">();</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Ptr</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">ml</span><span class="o">::</span><span class="n">ANN_MLP</span><span class="o">&gt;</span> <span class="n">mlp</span> <span class="o">=</span> <span class="n">getTrainedNeuralNetwork</span><span class="p">(</span><span class="n">trainSamples</span><span class="p">,</span> <span class="n">trainResponses</span><span class="p">);</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Time elapsed in minutes: &quot;</span> <span class="o">&lt;&lt;</span> <span class="p">((</span><span class="kt">double</span><span class="p">)</span><span class="n">cv</span><span class="o">::</span><span class="n">getTickCount</span><span class="p">()</span> <span class="o">-</span> <span class="n">start</span><span class="p">)</span> <span class="o">/</span> <span class="n">cv</span><span class="o">::</span><span class="n">getTickFrequency</span><span class="p">()</span> <span class="o">/</span> <span class="mf">60.0</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// We can clear memory now </span>
</span><span class='line'>  <span class="n">trainSamples</span><span class="p">.</span><span class="n">release</span><span class="p">();</span>
</span><span class='line'>  <span class="n">trainResponses</span><span class="p">.</span><span class="n">release</span><span class="p">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// Train FLANN </span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Training FLANN...&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">start</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">getTickCount</span><span class="p">();</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">FlannBasedMatcher</span> <span class="n">flann</span><span class="p">;</span>
</span><span class='line'>  <span class="n">flann</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">vocabulary</span><span class="p">);</span>
</span><span class='line'>  <span class="n">flann</span><span class="p">.</span><span class="n">train</span><span class="p">();</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Time elapsed in minutes: &quot;</span> <span class="o">&lt;&lt;</span> <span class="p">((</span><span class="kt">double</span><span class="p">)</span><span class="n">cv</span><span class="o">::</span><span class="n">getTickCount</span><span class="p">()</span> <span class="o">-</span> <span class="n">start</span><span class="p">)</span> <span class="o">/</span> <span class="n">cv</span><span class="o">::</span><span class="n">getTickFrequency</span><span class="p">()</span> <span class="o">/</span> <span class="mf">60.0</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// Reading test set </span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Reading test set...&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">start</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">getTickCount</span><span class="p">();</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">testSamples</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">testOutputExpected</span><span class="p">;</span>
</span><span class='line'>  <span class="n">readImages</span><span class="p">(</span><span class="n">files</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="p">(</span><span class="kt">size_t</span><span class="p">)(</span><span class="n">files</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">*</span> <span class="n">trainSplitRatio</span><span class="p">),</span> <span class="n">files</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span>
</span><span class='line'>      <span class="p">[</span><span class="o">&amp;</span><span class="p">](</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">classname</span><span class="p">,</span> <span class="k">const</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="o">&amp;</span> <span class="n">descriptors</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Get histogram of visual words using bag of words technique</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">bowFeatures</span> <span class="o">=</span> <span class="n">getBOWFeatures</span><span class="p">(</span><span class="n">flann</span><span class="p">,</span> <span class="n">descriptors</span><span class="p">,</span> <span class="n">networkInputSize</span><span class="p">);</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">normalize</span><span class="p">(</span><span class="n">bowFeatures</span><span class="p">,</span> <span class="n">bowFeatures</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">bowFeatures</span><span class="p">.</span><span class="n">rows</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">NORM_MINMAX</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="p">());</span>
</span><span class='line'>      <span class="n">testSamples</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">bowFeatures</span><span class="p">);</span>
</span><span class='line'>      <span class="n">testOutputExpected</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">getClassId</span><span class="p">(</span><span class="n">classes</span><span class="p">,</span> <span class="n">classname</span><span class="p">));</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Time elapsed in minutes: &quot;</span> <span class="o">&lt;&lt;</span> <span class="p">((</span><span class="kt">double</span><span class="p">)</span><span class="n">cv</span><span class="o">::</span><span class="n">getTickCount</span><span class="p">()</span> <span class="o">-</span> <span class="n">start</span><span class="p">)</span> <span class="o">/</span> <span class="n">cv</span><span class="o">::</span><span class="n">getTickFrequency</span><span class="p">()</span> <span class="o">/</span> <span class="mf">60.0</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// Get confusion matrix of the test set</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">confusionMatrix</span> <span class="o">=</span> <span class="n">getConfusionMatrix</span><span class="p">(</span><span class="n">mlp</span><span class="p">,</span>
</span><span class='line'>      <span class="n">testSamples</span><span class="p">,</span> <span class="n">testOutputExpected</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// Get accuracy of our model</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Confusion matrix: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">printConfusionMatrix</span><span class="p">(</span><span class="n">confusionMatrix</span><span class="p">,</span> <span class="n">classes</span><span class="p">);</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Accuracy: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">getAccuracy</span><span class="p">(</span><span class="n">confusionMatrix</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// Save models</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Saving models...&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">saveModels</span><span class="p">(</span><span class="n">mlp</span><span class="p">,</span> <span class="n">vocabulary</span><span class="p">,</span> <span class="n">classes</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>Compile it by calling:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>g++ opencv_ann.cpp -std<span class="o">=</span>c++0x  -I/usr/local/include/opencv -I/usr/local/include/boost -I/usr/local/include -L/usr/local/lib -lopencv_shape -lopencv_stitching -lopencv_objdetect -lopencv_superres -lopencv_videostab -lopencv_calib3d -lopencv_features2d -lopencv_highgui -lopencv_videoio -lopencv_imgcodecs -lopencv_video -lopencv_photo -lopencv_ml -lopencv_imgproc -lopencv_flann -lopencv_core -lopencv_hal -lboost_filesystem -lboost_system -o mlp
</span></code></pre></td></tr></table></div></figure>


<p>For instance, here&rsquo;s the result I got from the Kaggle&rsquo;s training set (using networkInputSize = 512, trainSplitRatio = 0.7)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">Confusion</span> <span class="nl">matrix</span><span class="p">:</span>
</span><span class='line'><span class="n">cat</span> <span class="n">dog</span>
</span><span class='line'><span class="mi">2669</span> <span class="mi">1097</span>
</span><span class='line'><span class="mi">1053</span> <span class="mi">2681</span>
</span><span class='line'><span class="nl">Accuracy</span><span class="p">:</span> <span class="mf">0.713333</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not bad! Not bad at all, considering the difficulty of some images! ;)</p>

<p style="text-align:center;"><img src="http://abner-math.github.io/images/posts/ann_dog.jpg" alt="" /> <img src="http://abner-math.github.io/images/posts/ann_cat.jpg" alt="" /></p>

<p>If you are interested in knowing how the server used to present the live demo in the beginning of this tutorial looks like, you can take a look at the source code below.</p>

<center><input id="spoiler2" type="button" value="See source code" onclick="toggle_visibility('code2');"></center>


<div id="code2">
<figure class='code'><figcaption><span>demo.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;set&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdlib&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;boost/bind.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/asio.hpp&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;opencv2/core/core.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;opencv2/highgui/highgui.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;opencv2/features2d/features2d.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;opencv2/ml/ml.hpp&gt;</span>
</span><span class='line'>  
</span><span class='line'><span class="k">using</span> <span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">ip</span><span class="o">::</span><span class="n">tcp</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Context</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">vocabulary</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">FlannBasedMatcher</span> <span class="n">flann</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">classes</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Ptr</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">ml</span><span class="o">::</span><span class="n">ANN_MLP</span><span class="o">&gt;</span> <span class="n">mlp</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Extract local features for an image</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">getDescriptors</span><span class="p">(</span><span class="k">const</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="o">&amp;</span> <span class="n">img</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Ptr</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">KAZE</span><span class="o">&gt;</span> <span class="n">kaze</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">KAZE</span><span class="o">::</span><span class="n">create</span><span class="p">();</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">KeyPoint</span><span class="o">&gt;</span> <span class="n">keypoints</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">descriptors</span><span class="p">;</span>
</span><span class='line'>  <span class="n">kaze</span><span class="o">-&gt;</span><span class="n">detectAndCompute</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">noArray</span><span class="p">(),</span> <span class="n">keypoints</span><span class="p">,</span> <span class="n">descriptors</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">descriptors</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Get a histogram of visual words for an image</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">getBOWFeatures</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">FlannBasedMatcher</span><span class="o">&amp;</span> <span class="n">flann</span><span class="p">,</span> <span class="k">const</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="o">&amp;</span> <span class="n">img</span><span class="p">,</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">vocabularySize</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">descriptors</span> <span class="o">=</span> <span class="n">getDescriptors</span><span class="p">(</span><span class="n">img</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">outputArray</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="o">::</span><span class="n">zeros</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">Size</span><span class="p">(</span><span class="n">vocabularySize</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">CV_32F</span><span class="p">);</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">DMatch</span><span class="o">&gt;</span> <span class="n">matches</span><span class="p">;</span>
</span><span class='line'>  <span class="n">flann</span><span class="p">.</span><span class="n">match</span><span class="p">(</span><span class="n">descriptors</span><span class="p">,</span> <span class="n">matches</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">matches</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">visualWord</span> <span class="o">=</span> <span class="n">matches</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">trainIdx</span><span class="p">;</span>
</span><span class='line'>      <span class="n">outputArray</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">visualWord</span><span class="p">)</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">outputArray</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Receives a column matrix contained the probabilities associated to </span>
</span><span class='line'><span class="cm"> * each class and returns the id of column which contains the highest</span>
</span><span class='line'><span class="cm"> * probability</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="n">getPredictedClass</span><span class="p">(</span><span class="k">const</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="o">&amp;</span> <span class="n">predictions</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">maxPrediction</span> <span class="o">=</span> <span class="n">predictions</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">maxPredictionIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">float</span><span class="o">*</span> <span class="n">ptrPredictions</span> <span class="o">=</span> <span class="n">predictions</span><span class="p">.</span><span class="n">ptr</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">predictions</span><span class="p">.</span><span class="n">cols</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">float</span> <span class="n">prediction</span> <span class="o">=</span> <span class="o">*</span><span class="n">ptrPredictions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">prediction</span> <span class="o">&gt;</span> <span class="n">maxPrediction</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">maxPrediction</span> <span class="o">=</span> <span class="n">prediction</span><span class="p">;</span>
</span><span class='line'>          <span class="n">maxPredictionIndex</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">maxPredictionIndex</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Get the predicted class for a sample</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="n">getClass</span><span class="p">(</span><span class="k">const</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="o">&amp;</span> <span class="n">bowFeatures</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Ptr</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">ml</span><span class="o">::</span><span class="n">ANN_MLP</span><span class="o">&gt;</span> <span class="n">mlp</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">output</span><span class="p">;</span>
</span><span class='line'>  <span class="n">mlp</span><span class="o">-&gt;</span><span class="n">predict</span><span class="p">(</span><span class="n">bowFeatures</span><span class="p">,</span> <span class="n">output</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nf">getPredictedClass</span><span class="p">(</span><span class="n">output</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">session</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">session</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">io_service</span><span class="o">&amp;</span> <span class="n">io_service</span><span class="p">,</span> <span class="n">Context</span><span class="o">*</span> <span class="n">context</span><span class="p">)</span>
</span><span class='line'>  <span class="o">:</span> <span class="n">socket_</span><span class="p">(</span><span class="n">io_service</span><span class="p">),</span> <span class="n">context</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">tcp</span><span class="o">::</span><span class="n">socket</span><span class="o">&amp;</span> <span class="n">socket</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">socket_</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="n">start</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">socket_</span><span class="p">.</span><span class="n">async_read_some</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">buffer</span><span class="p">(</span><span class="n">data_</span><span class="p">,</span> <span class="n">max_length</span><span class="p">),</span>
</span><span class='line'>          <span class="n">boost</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span><span class="o">&amp;</span><span class="n">session</span><span class="o">::</span><span class="n">handle_read</span><span class="p">,</span> <span class="k">this</span><span class="p">,</span>
</span><span class='line'>            <span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">placeholders</span><span class="o">::</span><span class="n">error</span><span class="p">,</span>
</span><span class='line'>            <span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">placeholders</span><span class="o">::</span><span class="n">bytes_transferred</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="n">Context</span><span class="o">*</span> <span class="n">context</span><span class="p">;</span>
</span><span class='line'>  <span class="n">tcp</span><span class="o">::</span><span class="n">socket</span> <span class="n">socket_</span><span class="p">;</span>
</span><span class='line'>  <span class="k">enum</span> <span class="p">{</span> <span class="n">max_length</span> <span class="o">=</span> <span class="mi">1024</span> <span class="p">};</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">data_</span><span class="p">[</span><span class="n">max_length</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kt">void</span> <span class="nf">handle_read</span><span class="p">(</span><span class="k">const</span> <span class="n">boost</span><span class="o">::</span><span class="n">system</span><span class="o">::</span><span class="n">error_code</span><span class="o">&amp;</span> <span class="n">error</span><span class="p">,</span>
</span><span class='line'>    <span class="kt">size_t</span> <span class="n">bytes_transferred</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">error</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>          <span class="c1">// Reading image</span>
</span><span class='line'>          <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">filename</span><span class="p">(</span><span class="n">data_</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">find</span><span class="p">(</span><span class="n">data_</span><span class="p">,</span> <span class="n">data_</span> <span class="o">+</span> <span class="n">bytes_transferred</span><span class="p">,</span> <span class="sc">&#39;\n&#39;</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>          <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">img</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">imread</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">img</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="c1">// Processing image</span>
</span><span class='line'>              <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">bowFeatures</span> <span class="o">=</span> <span class="n">getBOWFeatures</span><span class="p">(</span><span class="n">context</span><span class="o">-&gt;</span><span class="n">flann</span><span class="p">,</span> <span class="n">img</span><span class="p">,</span> <span class="n">context</span><span class="o">-&gt;</span><span class="n">vocabulary</span><span class="p">.</span><span class="n">rows</span><span class="p">);</span>
</span><span class='line'>              <span class="n">cv</span><span class="o">::</span><span class="n">normalize</span><span class="p">(</span><span class="n">bowFeatures</span><span class="p">,</span> <span class="n">bowFeatures</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">bowFeatures</span><span class="p">.</span><span class="n">rows</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">NORM_MINMAX</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="p">());</span>
</span><span class='line'>              <span class="kt">int</span> <span class="n">predictedClass</span> <span class="o">=</span> <span class="n">getClass</span><span class="p">(</span><span class="n">bowFeatures</span><span class="p">,</span> <span class="n">context</span><span class="o">-&gt;</span><span class="n">mlp</span><span class="p">);</span>
</span><span class='line'>              <span class="n">result</span> <span class="o">=</span> <span class="n">context</span><span class="o">-&gt;</span><span class="n">classes</span><span class="p">[</span><span class="n">predictedClass</span><span class="p">];</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">result</span> <span class="o">=</span> <span class="s">&quot;error&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          
</span><span class='line'>          <span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">data_</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">data_</span><span class="p">));</span>
</span><span class='line'>          <span class="n">strcpy</span><span class="p">(</span><span class="n">data_</span><span class="p">,</span> <span class="n">result</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'>          <span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">async_write</span><span class="p">(</span><span class="n">socket_</span><span class="p">,</span>
</span><span class='line'>            <span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">buffer</span><span class="p">(</span><span class="n">data_</span><span class="p">,</span> <span class="n">bytes_transferred</span><span class="p">),</span>
</span><span class='line'>            <span class="n">boost</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span><span class="o">&amp;</span><span class="n">session</span><span class="o">::</span><span class="n">handle_write</span><span class="p">,</span> <span class="k">this</span><span class="p">,</span>
</span><span class='line'>              <span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">placeholders</span><span class="o">::</span><span class="n">error</span><span class="p">));</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">delete</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">handle_write</span><span class="p">(</span><span class="k">const</span> <span class="n">boost</span><span class="o">::</span><span class="n">system</span><span class="o">::</span><span class="n">error_code</span><span class="o">&amp;</span> <span class="n">error</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">error</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">socket_</span><span class="p">.</span><span class="n">async_read_some</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">buffer</span><span class="p">(</span><span class="n">data_</span><span class="p">,</span> <span class="n">max_length</span><span class="p">),</span>
</span><span class='line'>            <span class="n">boost</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span><span class="o">&amp;</span><span class="n">session</span><span class="o">::</span><span class="n">handle_read</span><span class="p">,</span> <span class="k">this</span><span class="p">,</span>
</span><span class='line'>              <span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">placeholders</span><span class="o">::</span><span class="n">error</span><span class="p">,</span>
</span><span class='line'>              <span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">placeholders</span><span class="o">::</span><span class="n">bytes_transferred</span><span class="p">));</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">delete</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">server</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">server</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">io_service</span><span class="o">&amp;</span> <span class="n">io_service</span><span class="p">,</span> <span class="kt">short</span> <span class="n">port</span><span class="p">,</span> <span class="n">Context</span><span class="o">*</span> <span class="n">context</span><span class="p">)</span>
</span><span class='line'>    <span class="o">:</span> <span class="n">io_service_</span><span class="p">(</span><span class="n">io_service</span><span class="p">),</span>
</span><span class='line'>      <span class="n">acceptor_</span><span class="p">(</span><span class="n">io_service</span><span class="p">,</span> <span class="n">tcp</span><span class="o">::</span><span class="n">endpoint</span><span class="p">(</span><span class="n">tcp</span><span class="o">::</span><span class="n">v4</span><span class="p">(),</span> <span class="n">port</span><span class="p">)),</span>
</span><span class='line'>      <span class="n">context</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">start_accept</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="n">Context</span><span class="o">*</span> <span class="n">context</span><span class="p">;</span>
</span><span class='line'>  <span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">io_service</span><span class="o">&amp;</span> <span class="n">io_service_</span><span class="p">;</span>
</span><span class='line'>  <span class="n">tcp</span><span class="o">::</span><span class="n">acceptor</span> <span class="n">acceptor_</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kt">void</span> <span class="nf">start_accept</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">session</span><span class="o">*</span> <span class="n">new_session</span> <span class="o">=</span> <span class="k">new</span> <span class="n">session</span><span class="p">(</span><span class="n">io_service_</span><span class="p">,</span> <span class="n">context</span><span class="p">);</span>
</span><span class='line'>      <span class="n">acceptor_</span><span class="p">.</span><span class="n">async_accept</span><span class="p">(</span><span class="n">new_session</span><span class="o">-&gt;</span><span class="n">socket</span><span class="p">(),</span>
</span><span class='line'>          <span class="n">boost</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span><span class="o">&amp;</span><span class="n">server</span><span class="o">::</span><span class="n">handle_accept</span><span class="p">,</span> <span class="k">this</span><span class="p">,</span> <span class="n">new_session</span><span class="p">,</span>
</span><span class='line'>            <span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">placeholders</span><span class="o">::</span><span class="n">error</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">handle_accept</span><span class="p">(</span><span class="n">session</span><span class="o">*</span> <span class="n">new_session</span><span class="p">,</span>
</span><span class='line'>    <span class="k">const</span> <span class="n">boost</span><span class="o">::</span><span class="n">system</span><span class="o">::</span><span class="n">error_code</span><span class="o">&amp;</span> <span class="n">error</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">error</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="n">new_session</span><span class="o">-&gt;</span><span class="n">start</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="k">delete</span> <span class="n">new_session</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">start_accept</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">!=</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Usage: &lt;NEURAL_NETWORK_INPUT_FILENAME&gt; &lt;VOCABULARY_INPUT_FILENAME&gt; &lt;CLASSES_INPUT_FILENAME&gt; &lt;PORT_NUMBER&gt;&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">neuralNetworkInputFilename</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">vocabularyInputFilename</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">classesInputFilename</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">portNumber</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">4</span><span class="p">]);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Loading models...&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">start</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">getTickCount</span><span class="p">();</span>
</span><span class='line'>  <span class="c1">// Reading neural network</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Ptr</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">ml</span><span class="o">::</span><span class="n">ANN_MLP</span><span class="o">&gt;</span> <span class="n">mlp</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">ml</span><span class="o">::</span><span class="n">ANN_MLP</span><span class="o">::</span><span class="n">load</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">ml</span><span class="o">::</span><span class="n">ANN_MLP</span><span class="o">&gt;</span><span class="p">(</span><span class="n">neuralNetworkInputFilename</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// Read vocabulary</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">vocabulary</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">FileStorage</span> <span class="n">fs</span><span class="p">(</span><span class="n">vocabularyInputFilename</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">FileStorage</span><span class="o">::</span><span class="n">READ</span><span class="p">);</span>
</span><span class='line'>  <span class="n">fs</span><span class="p">[</span><span class="s">&quot;vocabulary&quot;</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="n">vocabulary</span><span class="p">;</span>
</span><span class='line'>  <span class="n">fs</span><span class="p">.</span><span class="n">release</span><span class="p">();</span>
</span><span class='line'>  <span class="c1">// Reading existing classes</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">classes</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">ifstream</span> <span class="n">classesInput</span><span class="p">(</span><span class="n">classesInputFilename</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">line</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">getline</span><span class="p">(</span><span class="n">classesInput</span><span class="p">,</span> <span class="n">line</span><span class="p">))</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">stringstream</span> <span class="n">ss</span><span class="p">;</span>
</span><span class='line'>      <span class="n">ss</span> <span class="o">&lt;&lt;</span> <span class="n">line</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">index</span><span class="p">;</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">classname</span><span class="p">;</span>
</span><span class='line'>      <span class="n">ss</span> <span class="o">&gt;&gt;</span> <span class="n">index</span><span class="p">;</span>
</span><span class='line'>      <span class="n">ss</span> <span class="o">&gt;&gt;</span> <span class="n">classname</span><span class="p">;</span>
</span><span class='line'>      <span class="n">classes</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="n">classname</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Time elapsed in seconds: &quot;</span> <span class="o">&lt;&lt;</span> <span class="p">((</span><span class="kt">double</span><span class="p">)</span><span class="n">cv</span><span class="o">::</span><span class="n">getTickCount</span><span class="p">()</span> <span class="o">-</span> <span class="n">start</span><span class="p">)</span> <span class="o">/</span> <span class="n">cv</span><span class="o">::</span><span class="n">getTickFrequency</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// Train FLANN </span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Training FLANN...&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">start</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">getTickCount</span><span class="p">();</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">FlannBasedMatcher</span> <span class="n">flann</span><span class="p">;</span>
</span><span class='line'>  <span class="n">flann</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">vocabulary</span><span class="p">);</span>
</span><span class='line'>  <span class="n">flann</span><span class="p">.</span><span class="n">train</span><span class="p">();</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Time elapsed in seconds: &quot;</span> <span class="o">&lt;&lt;</span> <span class="p">((</span><span class="kt">double</span><span class="p">)</span><span class="n">cv</span><span class="o">::</span><span class="n">getTickCount</span><span class="p">()</span> <span class="o">-</span> <span class="n">start</span><span class="p">)</span> <span class="o">/</span> <span class="n">cv</span><span class="o">::</span><span class="n">getTickFrequency</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// Socket initialization</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Listening to socket on port &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">portNumber</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;...&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">try</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">io_service</span> <span class="n">io_service</span><span class="p">;</span>
</span><span class='line'>      <span class="n">Context</span><span class="o">*</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Context</span><span class="p">;</span>
</span><span class='line'>      <span class="n">context</span><span class="o">-&gt;</span><span class="n">vocabulary</span> <span class="o">=</span> <span class="n">vocabulary</span><span class="p">;</span>
</span><span class='line'>      <span class="n">context</span><span class="o">-&gt;</span><span class="n">flann</span> <span class="o">=</span> <span class="n">flann</span><span class="p">;</span>
</span><span class='line'>      <span class="n">context</span><span class="o">-&gt;</span><span class="n">classes</span> <span class="o">=</span> <span class="n">classes</span><span class="p">;</span>
</span><span class='line'>      <span class="n">context</span><span class="o">-&gt;</span><span class="n">mlp</span> <span class="o">=</span> <span class="n">mlp</span><span class="p">;</span>
</span><span class='line'>      <span class="n">server</span> <span class="n">s</span><span class="p">(</span><span class="n">io_service</span><span class="p">,</span> <span class="n">portNumber</span><span class="p">,</span> <span class="n">context</span><span class="p">);</span>
</span><span class='line'>      <span class="n">io_service</span><span class="p">.</span><span class="n">run</span><span class="p">();</span>
</span><span class='line'>      <span class="k">delete</span> <span class="n">context</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">catch</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">exception</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Exception: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<script>
$(function() {
    $("#code2").hide();
});
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solving the Sliding Puzzle]]></title>
    <link href="http://abner-math.github.io/blog/2015/12/06/solving-the-sliding-puzzle/"/>
    <updated>2015-12-06T17:01:05-03:00</updated>
    <id>http://abner-math.github.io/blog/2015/12/06/solving-the-sliding-puzzle</id>
    <content type="html"><![CDATA[<script src="http://abner-math.github.io/js/sliding-puzzle/minheap.js"></script>


<script src="http://abner-math.github.io/js/sliding-puzzle/sliding-puzzle.js"></script>


<script src="http://abner-math.github.io/js/sliding-puzzle/sliding-puzzle-frontend.js"></script>


<p><link href="http://abner-math.github.io/stylesheets/sliding-puzzle.css" rel="stylesheet" type="text/css"></p>

<p>Sliding puzzle is a game composed by 2<sup>n</sup> - 1 pieces dispersed along a board and a blank space. Those pieces are then shuffled and the objective is to rearrange them back to their original form, where the disposition of pieces is on ascending order, like shown below (go on, it&rsquo;s interactive):</p>

<center>
    <div>
        <div id="container-a-example" class="puzzle"></div>
    </div>
</center>


<p></p>

<script type="text/javascript">
    new PuzzleGUI($("#container-a-example"), 4, 50, 5, 100, 10, Algorithm.AManhattan);
</script>


<p>You can rearrange the pieces &ldquo;moving&rdquo; the blank space across the board. Since you can only move it in four directions, it&rsquo;s a hell of a task to solve this game for a human, sometimes taking hours. Luckily, we dispose of some good algorithms to solve it, taking only few milliseconds even for the worst case. Let&rsquo;s explore them in this tutorial! :)</p>

<!-- more -->


<h2>Finding the correct abstraction</h2>

<p>The hardest part of a problem is surely finding a useful abstraction for it, that allows a solution to be even thought! Like most path finding problems, the sliding puzzle can be correctly abstracted as a <strong>graph</strong>, i.e., a set of vertices connected by edges.</p>

<p>It&rsquo;s common to use the term &ldquo;<strong>state</strong>&rdquo; to designate vertices. The meaning of a state depends on the problem. For example, for the sliding puzzle, each state is a determined disposition of pieces. Logically, there&rsquo;s also a &ldquo;<strong>goal state</strong>&rdquo;, a state where the problem is solved. Finally, the edges are the allowed actions that takes our problem from a state to another. For example, in the sliding puzzle, the set of allowed actions is to move the blank space in four directions (up, down, left, right). The figure below illustrates well those concepts.</p>

<p style="text-align:center;"><img src="http://www.ibm.com/developerworks/library/j-ai-search/figure06.png" alt="" /></p>

<p>Assimilated those concepts, our job is simply to find a path from any state to the goal state, and that can be done with any graph search algorithm. Let&rsquo;s discuss the pros/cons of some approaches.</p>

<h2>Javascript implementation of Sliding Puzzle</h2>

<p>Before discussing about specific algorithms, let&rsquo;s implement the building blocks. I&rsquo;ll start with a class called &ldquo;Puzzle&rdquo;, containing basically four attributes: dimension (dimension of our puzzle, i.e., 3 = 8-puzzle, 4 = 15-puzzle, etc.,&hellip;), the board (two-dimensional numeric array), the path and the last performed move (we will cover those last two later).</p>

<figure class='code'><figcaption><span>sliding-puzzle.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Puzzle</span><span class="p">(</span><span class="nx">dimension</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span> <span class="o">=</span> <span class="nx">dimension</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">board</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">path</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">lastMove</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// Fill the board</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">dimension</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">board</span><span class="p">.</span><span class="nx">push</span><span class="p">([]);</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">dimension</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">i</span> <span class="o">==</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="nx">j</span> <span class="o">==</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">this</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">this</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">dimension</span> <span class="o">*</span> <span class="nx">i</span> <span class="o">+</span> <span class="nx">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Let&rsquo;s create some utilitary methods that will help during the craft of our solution:</p>

<figure class='code'><figcaption><span>sliding-puzzle.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Get the (x, y) position of the blank space</span>
</span><span class='line'><span class="nx">Puzzle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getBlankSpacePosition</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="p">[</span><span class="nx">i</span><span class="p">,</span> <span class="nx">j</span><span class="p">];</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Swap two items on a bidimensional array</span>
</span><span class='line'><span class="nx">Puzzle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">swap</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">i1</span><span class="p">,</span> <span class="nx">j1</span><span class="p">,</span> <span class="nx">i2</span><span class="p">,</span> <span class="nx">j2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">temp</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i1</span><span class="p">][</span><span class="nx">j1</span><span class="p">];</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i1</span><span class="p">][</span><span class="nx">j1</span><span class="p">]</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i2</span><span class="p">][</span><span class="nx">j2</span><span class="p">];</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i2</span><span class="p">][</span><span class="nx">j2</span><span class="p">]</span> <span class="o">=</span> <span class="nx">temp</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And finally, let&rsquo;s implement the methods that will move the pieces:</p>

<figure class='code'><figcaption><span>sliding-puzzle.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Direction</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">LEFT</span><span class="o">:</span> <span class="s2">&quot;left&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">RIGHT</span><span class="o">:</span> <span class="s2">&quot;right&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">UP</span><span class="o">:</span> <span class="s2">&quot;up&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">DOWN</span><span class="o">:</span> <span class="s2">&quot;dow&quot;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Return the direction that a piece can be moved, if any</span>
</span><span class='line'><span class="nx">Puzzle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getMove</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">piece</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">blankSpacePosition</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getBlankSpacePosition</span><span class="p">();</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">line</span> <span class="o">=</span> <span class="nx">blankSpacePosition</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">column</span> <span class="o">=</span> <span class="nx">blankSpacePosition</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">line</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">piece</span> <span class="o">==</span> <span class="k">this</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">line</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="nx">column</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">Direction</span><span class="p">.</span><span class="nx">DOWN</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">line</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="nx">piece</span> <span class="o">==</span> <span class="k">this</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">line</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="nx">column</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">Direction</span><span class="p">.</span><span class="nx">UP</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">column</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">piece</span> <span class="o">==</span> <span class="k">this</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">line</span><span class="p">][</span><span class="nx">column</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">Direction</span><span class="p">.</span><span class="nx">RIGHT</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">column</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="nx">piece</span> <span class="o">==</span> <span class="k">this</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">line</span><span class="p">][</span><span class="nx">column</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">Direction</span><span class="p">.</span><span class="nx">LEFT</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Move a piece, if possible, and return the direction that it was moved</span>
</span><span class='line'><span class="nx">Puzzle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">move</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">piece</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">move</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getMove</span><span class="p">(</span><span class="nx">piece</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">move</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">blankSpacePosition</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getBlankSpacePosition</span><span class="p">();</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">line</span> <span class="o">=</span> <span class="nx">blankSpacePosition</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">column</span> <span class="o">=</span> <span class="nx">blankSpacePosition</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>      <span class="k">switch</span> <span class="p">(</span><span class="nx">move</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="nx">Direction</span><span class="p">.</span><span class="nx">LEFT</span><span class="o">:</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">swap</span><span class="p">(</span><span class="nx">line</span><span class="p">,</span> <span class="nx">column</span><span class="p">,</span> <span class="nx">line</span><span class="p">,</span> <span class="nx">column</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="nx">Direction</span><span class="p">.</span><span class="nx">RIGHT</span><span class="o">:</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">swap</span><span class="p">(</span><span class="nx">line</span><span class="p">,</span> <span class="nx">column</span><span class="p">,</span> <span class="nx">line</span><span class="p">,</span> <span class="nx">column</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="nx">Direction</span><span class="p">.</span><span class="nx">UP</span><span class="o">:</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">swap</span><span class="p">(</span><span class="nx">line</span><span class="p">,</span> <span class="nx">column</span><span class="p">,</span> <span class="nx">line</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">column</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="nx">Direction</span><span class="p">.</span><span class="nx">DOWN</span><span class="o">:</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">swap</span><span class="p">(</span><span class="nx">line</span><span class="p">,</span> <span class="nx">column</span><span class="p">,</span> <span class="nx">line</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">column</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">move</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">lastMove</span> <span class="o">=</span> <span class="nx">piece</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">move</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Breadth-First Search (BFS)</h2>

<p>The most well-known graph search algorithm, along with Depth-First Search (DFS). I believe you are already familiarized with this algorithm. It works really simple: For each visited node, its immediate children are stored on a queue, and it&rsquo;s performed recursively until the queue is empty or a goal state is reached, that way transversing the graph &ldquo;level-by-level&rdquo;.</p>

<p>In order to implement the BFS, we are going to need first two method beforehand: &ldquo;<strong>isGoalState</strong>&rdquo; and &ldquo;<strong>visit</strong>&rdquo;. The &ldquo;isGoalState&rdquo; will check if the current state is a solution to the puzzle, while &ldquo;visit&rdquo; will generate the immediate children of the current state in the state space.</p>

<p>Let&rsquo;s start with &ldquo;isGoalState&rdquo;. Well, it&rsquo;s kinda simple: We are in a goal state if all pieces are in their places. The original place of a piece can be defined as <code>[(piece - 1) % dimension, (piece - 1) / dimension]</code>. Let&rsquo;s take some examples to check if this formule makes sense:</p>

<figure class='code'><figcaption><span>sliding-puzzle.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">piece</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="nx">dimension</span> <span class="o">=</span> <span class="mi">3</span> <span class="p">(</span><span class="mi">8</span><span class="o">-</span><span class="nx">puzzle</span><span class="p">)</span>
</span><span class='line'><span class="nx">original</span> <span class="nx">place</span> <span class="o">=</span> <span class="p">[(</span><span class="mi">1</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="mi">3</span><span class="p">,</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">piece</span> <span class="o">=</span> <span class="mi">7</span>
</span><span class='line'><span class="nx">dimension</span> <span class="o">=</span> <span class="mi">4</span> <span class="p">(</span><span class="mi">15</span><span class="o">-</span><span class="nx">puzzle</span><span class="p">)</span>
</span><span class='line'><span class="nx">original</span> <span class="nx">place</span> <span class="o">=</span> <span class="p">[(</span><span class="mi">7</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="mi">4</span><span class="p">,</span> <span class="p">(</span><span class="mi">7</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Seems correct so far. That way our method is as follows:</p>

<figure class='code'><figcaption><span>sliding-puzzle.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Puzzle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">isGoalState</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">piece</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">];</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">piece</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">originalLine</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">((</span><span class="nx">piece</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span><span class="p">);</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">originalColumn</span> <span class="o">=</span> <span class="p">(</span><span class="nx">piece</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span><span class="p">;</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="nx">i</span> <span class="o">!=</span> <span class="nx">originalLine</span> <span class="o">||</span> <span class="nx">j</span> <span class="o">!=</span> <span class="nx">originalColumn</span><span class="p">)</span> <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>About the &ldquo;visit&rdquo; method, first we need to know all allowed moves we can do in a certain state. For example, if the blank space is on the bottom-left of screen, we may not be able to move down nor left. Luckily, this functionality is already implemented through the method &ldquo;getMove&rdquo; described on previous section.</p>

<figure class='code'><figcaption><span>sliding-puzzle.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Return all current allowed moves</span>
</span><span class='line'><span class="nx">Puzzle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getAllowedMoves</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">allowedMoves</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">piece</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">];</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getMove</span><span class="p">(</span><span class="nx">piece</span><span class="p">)</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">allowedMoves</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">piece</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">allowedMoves</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>But knowing the allowed moves is not enough. We need to generate new states. In order to do that, we are going to need an utilitary method that makes a copy of the current state:</p>

<figure class='code'><figcaption><span>sliding-puzzle.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Return a copy of current puzzle</span>
</span><span class='line'><span class="nx">Puzzle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getCopy</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">newPuzzle</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Puzzle</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">dimension</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">newPuzzle</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">path</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">newPuzzle</span><span class="p">.</span><span class="nx">path</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">path</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">newPuzzle</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that we are not just copying the board, but also the path. &ldquo;path&rdquo; is an attribute that stores the pieces that were moved so far, that way allowing us to reexecute the whole process when a goal state is found.</p>

<p>And now we can finally implement it:</p>

<figure class='code'><figcaption><span>sliding-puzzle.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Puzzle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">visit</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">children</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">allowedMoves</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getAllowedMoves</span><span class="p">();</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">allowedMoves</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span>  <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">move</span> <span class="o">=</span> <span class="nx">allowedMoves</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">move</span> <span class="o">!=</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastMove</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">newInstance</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getCopy</span><span class="p">();</span>
</span><span class='line'>          <span class="nx">newInstance</span><span class="p">.</span><span class="nx">move</span><span class="p">(</span><span class="nx">move</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">newInstance</span><span class="p">.</span><span class="nx">path</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">move</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">children</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">newInstance</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">children</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that we are ignoring moves that are equal to &ldquo;lastMove&rdquo;. There&rsquo;s a reason behind it: Moving a piece that was already moved on the last turn will only make it to turn back to its original position! In another words, going back to a state that was already explored. That why we are &ldquo;prunning&rdquo; the tree avoiding this kind of behavior.</p>

<p>*sigh* After all those necessary things, we are now ready to finally implement the BFS algorithm, that is ridiculously simple:</p>

<figure class='code'><figcaption><span>sliding-puzzle.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Puzzle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">solveBFS</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">startingState</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getCopy</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">startingState</span><span class="p">.</span><span class="nx">path</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">states</span> <span class="o">=</span> <span class="p">[</span><span class="nx">startingState</span><span class="p">];</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="nx">states</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">state</span> <span class="o">=</span> <span class="nx">states</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>      <span class="nx">states</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">state</span><span class="p">.</span><span class="nx">isGoalState</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">state</span><span class="p">.</span><span class="nx">path</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">states</span> <span class="o">=</span> <span class="nx">states</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">state</span><span class="p">.</span><span class="nx">visit</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>We create an array called &ldquo;states&rdquo; to store the states that are waiting to be visited and put the current state on it. On a loop, we remove the first element (through the &ldquo;shift&rdquo; method, remember we are simulating a queue) and then check if that element is a goal state. If it is, return the sets of steps from our initial state until it (the &ldquo;path&rdquo; attribute), otherwise visit it and append the immediate children to the list of states.</p>

<p><strong>*BONUS*</strong>! You can check a simulation below:</p>

<center>
    <h3>BFS</h3>
    <div>
        <div id="container-bfs" class="puzzle"></div>
        <br>
        Time elapsed: <span id="elapsed">0</span>ms
        <br>
        <button id="shuffle">Shuffle</button>
        <button id="solve">Solve</button>
    </div>
</center>




<script type="text/javascript">
    new PuzzleGUI($("#container-bfs"), 4, 50, 5, 100, 10, Algorithm.BFS);
</script>


<p><strong>PRO</strong>: It&rsquo;s easy to be implemented.<br>
<strong>CON</strong>: Waaaaaaay too slow.</p>

<h2>A*</h2>

<p>As we saw previously, the BFS can correctly find an optimal solution to our problem, i.e., find a path from the starting state to the goal state with the minimum number of steps, but it has a huge drawback: it&rsquo;s too slow! If you shuffle the game too much and try to run it, it will possibly freeze your browser.</p>

<p>So here&rsquo;s the A*, the top #1 favorite algorithm for problem solving agents, and, good for us, it&rsquo;s pretty simple too!</p>

<p>It works similarly to BFS, but with some differences: Instead of a queue, we use a priority queue (a.k.a., min-heap), that is a data structure that instead of returning the first element added, it returns the element with lowest value. And, to each discovered state, we assign a value to it, that can be defined as:</p>

<p>f(n) = g(n) + h(n)</p>

<p>g(n) (called <strong>real cost function</strong>) is the cost necessary to go from the starting state to the state n. Since we already discovered the whole path to it, we can easily calculate that cost with precision (for our sliding puzzle example, that cost can be represented as the path length, for example).</p>

<p>h(n) (called <strong>heuristic function</strong>) is the estimated cost to go from the state n to the goal state. But here&rsquo;s the trick: We don&rsquo;t know the path from state n to the goal state yet! It&rsquo;s called <em>heuristic</em> precisely because we use heuristics to estimate it.</p>

<p>For priority-queue implementation, I&rsquo;m going to use that you can you find <a href="http://www.digitaltsunami.net/projects/javascript/minheap/index.html">here</a>.</p>

<p>Let&rsquo;s start initializing the algorithm:</p>

<figure class='code'><figcaption><span>sliding-puzzle.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Puzzle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">solveA</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">states</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MinHeap</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">distance</span> <span class="o">-</span> <span class="nx">b</span><span class="p">.</span><span class="nx">distance</span><span class="p">;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">path</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="nx">states</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">puzzle</span><span class="o">:</span> <span class="k">this</span><span class="p">,</span> <span class="nx">distance</span><span class="o">:</span> <span class="mi">0</span><span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, on a loop, we are going to retrieve the items with lowest value until the &ldquo;states&rdquo; variable is empty or a goal state is reached.</p>

<figure class='code'><figcaption><span>sliding-puzzle.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Puzzle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">solveA</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">states</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MinHeap</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">distance</span> <span class="o">-</span> <span class="nx">b</span><span class="p">.</span><span class="nx">distance</span><span class="p">;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">path</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="nx">states</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">puzzle</span><span class="o">:</span> <span class="k">this</span><span class="p">,</span> <span class="nx">distance</span><span class="o">:</span> <span class="mi">0</span><span class="p">});</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="nx">states</span><span class="p">.</span><span class="nx">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">state</span> <span class="o">=</span> <span class="nx">states</span><span class="p">.</span><span class="nx">pop</span><span class="p">().</span><span class="nx">puzzle</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">state</span><span class="p">.</span><span class="nx">isGoalState</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">state</span><span class="p">.</span><span class="nx">path</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>And finally, we are going to visit the retrieved state&rsquo;s children, calculate their weights and insert them into the queue.</p>

<figure class='code'><figcaption><span>sliding-puzzle.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Puzzle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">solveA</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">states</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MinHeap</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">distance</span> <span class="o">-</span> <span class="nx">b</span><span class="p">.</span><span class="nx">distance</span><span class="p">;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">path</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="nx">states</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">puzzle</span><span class="o">:</span> <span class="k">this</span><span class="p">,</span> <span class="nx">distance</span><span class="o">:</span> <span class="mi">0</span><span class="p">});</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="nx">states</span><span class="p">.</span><span class="nx">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">state</span> <span class="o">=</span> <span class="nx">states</span><span class="p">.</span><span class="nx">pop</span><span class="p">().</span><span class="nx">puzzle</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">state</span><span class="p">.</span><span class="nx">isGoalState</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">state</span><span class="p">.</span><span class="nx">path</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">children</span> <span class="o">=</span> <span class="nx">state</span><span class="p">.</span><span class="nx">visit</span><span class="p">();</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">child</span> <span class="o">=</span> <span class="nx">children</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">f</span> <span class="o">=</span> <span class="nx">child</span><span class="p">.</span><span class="nx">g</span><span class="p">()</span> <span class="o">+</span> <span class="nx">child</span><span class="p">.</span><span class="nx">h</span><span class="p">();</span>
</span><span class='line'>          <span class="nx">states</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">puzzle</span> <span class="o">:</span> <span class="nx">child</span><span class="p">,</span> <span class="nx">distance</span><span class="o">:</span> <span class="nx">f</span><span class="p">});</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Good, good. Now let&rsquo;s implement the &ldquo;g&rdquo; and &ldquo;h&rdquo; functions. For &ldquo;g&rdquo; function, I&rsquo;ll simply count the path length (what else could be considered as the real cost?):</p>

<figure class='code'><figcaption><span>sliding-puzzle.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Puzzle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">g</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">path</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The heuristic function is the tricky part. We could think in many things. It&rsquo;s important the heuristic be <strong>admissible</strong>, i.e., it must underestimate the real cost until the goal state. The closer the estimated value by heuristic function is to the real cost to go to the goal state, the better.</p>

<h3>Heuristic #1: Misplaced tiles</h3>

<p>This function counts simply the number of pieces(tiles) that are not in their final position. This function is almost identical to the one we implemented to check if a state is the goal:</p>

<figure class='code'><figcaption><span>sliding-puzzle.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Puzzle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">h</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">piece</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">];</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">piece</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">originalLine</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">((</span><span class="nx">piece</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span><span class="p">);</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">originalColumn</span> <span class="o">=</span> <span class="p">(</span><span class="nx">piece</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span><span class="p">;</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="nx">i</span> <span class="o">!=</span> <span class="nx">originalLine</span> <span class="o">||</span> <span class="nx">j</span> <span class="o">!=</span> <span class="nx">originalColumn</span><span class="p">)</span> <span class="nx">count</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>    
</span><span class='line'>  <span class="k">return</span> <span class="nx">count</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<center>
    <h3>A*: Misplaced tiles</h3>
    <div>
        <div id="container-a-misplaced" class="puzzle"></div>
        <br>
        Time elapsed: <span id="elapsed">0</span>ms
        <br>
        <button id="shuffle">Shuffle</button>
        <button id="solve">Solve</button>
    </div>
</center>


<p></p>

<script type="text/javascript">
    new PuzzleGUI($("#container-a-misplaced"), 4, 50, 5, 100, 10, Algorithm.AMisplaced);
</script>


<h3>Heuristic #2: Manhattan distance</h3>

<p>Instead of just counting the number of misplaced tiles, this heuristic function calculates the manhattan distance (L1 distance) between the current misplaced position and the final position. Manhattan distance can be calculated as:</p>

<p>d(x1, y1, x2, y2) = |x1 - x2| + |y1 - y2|</p>

<figure class='code'><figcaption><span>sliding-puzzle.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Puzzle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">h</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">distance</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">piece</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">];</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">piece</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">originalLine</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">((</span><span class="nx">piece</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span><span class="p">);</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">originalColumn</span> <span class="o">=</span> <span class="p">(</span><span class="nx">piece</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span><span class="p">;</span>
</span><span class='line'>              <span class="nx">distance</span> <span class="o">+=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">i</span> <span class="o">-</span> <span class="nx">originalLine</span><span class="p">)</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">j</span> <span class="o">-</span> <span class="nx">originalColumn</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>    
</span><span class='line'>  <span class="k">return</span> <span class="nx">distance</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<center>
    <h3>A*: Manhattan distance</h3>
    <div>
        <div id="container-a-manhattan" class="puzzle"></div>
        <br>
        Time elapsed: <span id="elapsed">0</span>ms
        <br>
        <button id="shuffle">Shuffle</button>
        <button id="solve">Solve</button>
    </div>
</center>


<p></p>

<script type="text/javascript">
    new PuzzleGUI($("#container-a-manhattan"), 4, 50, 5, 100, 10, Algorithm.AManhattan);
</script>


<p>This heuristic is obviously better than the previous, since it always yields a higher value and hence closer to the real cost.</p>

<h2>Full code</h2>

<p>You can get the full code here:</p>

<center><input id="spoiler" type="button" value="See source code" onclick="toggle_visibility('code');"></center>


<div id="code">
<figure class='code'><figcaption><span>sliding-puzzle.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Direction</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">LEFT</span><span class="o">:</span> <span class="s2">&quot;left&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">RIGHT</span><span class="o">:</span> <span class="s2">&quot;right&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">UP</span><span class="o">:</span> <span class="s2">&quot;up&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">DOWN</span><span class="o">:</span> <span class="s2">&quot;dow&quot;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Algorithm</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">BFS</span><span class="o">:</span> <span class="s2">&quot;BFS&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">AMisplaced</span><span class="o">:</span> <span class="s2">&quot;A*: Misplaced tiles&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">AManhattan</span><span class="o">:</span> <span class="s2">&quot;A*: Manhattan distance&quot;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">Puzzle</span><span class="p">(</span><span class="nx">dimension</span><span class="p">,</span> <span class="nx">solve_func</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">board</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">path</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span> <span class="o">=</span> <span class="nx">dimension</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">solve_func</span> <span class="o">=</span> <span class="nx">solve_func</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">lastMove</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">dimension</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">board</span><span class="p">.</span><span class="nx">push</span><span class="p">([]);</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">dimension</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">i</span> <span class="o">==</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="nx">j</span> <span class="o">==</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">this</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">this</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">dimension</span> <span class="o">*</span> <span class="nx">i</span> <span class="o">+</span> <span class="nx">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Get the (x, y) position of the blank space</span>
</span><span class='line'><span class="nx">Puzzle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getBlankSpacePosition</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="p">[</span><span class="nx">i</span><span class="p">,</span> <span class="nx">j</span><span class="p">];</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Swap two items on a bidimensional array</span>
</span><span class='line'><span class="nx">Puzzle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">swap</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">i1</span><span class="p">,</span> <span class="nx">j1</span><span class="p">,</span> <span class="nx">i2</span><span class="p">,</span> <span class="nx">j2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">temp</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i1</span><span class="p">][</span><span class="nx">j1</span><span class="p">];</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i1</span><span class="p">][</span><span class="nx">j1</span><span class="p">]</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i2</span><span class="p">][</span><span class="nx">j2</span><span class="p">];</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i2</span><span class="p">][</span><span class="nx">j2</span><span class="p">]</span> <span class="o">=</span> <span class="nx">temp</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Return the direction that a piece can be moved, if any</span>
</span><span class='line'><span class="nx">Puzzle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getMove</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">piece</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">blankSpacePosition</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getBlankSpacePosition</span><span class="p">();</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">line</span> <span class="o">=</span> <span class="nx">blankSpacePosition</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">column</span> <span class="o">=</span> <span class="nx">blankSpacePosition</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">line</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">piece</span> <span class="o">==</span> <span class="k">this</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">line</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="nx">column</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">Direction</span><span class="p">.</span><span class="nx">DOWN</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">line</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="nx">piece</span> <span class="o">==</span> <span class="k">this</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">line</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="nx">column</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">Direction</span><span class="p">.</span><span class="nx">UP</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">column</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">piece</span> <span class="o">==</span> <span class="k">this</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">line</span><span class="p">][</span><span class="nx">column</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">Direction</span><span class="p">.</span><span class="nx">RIGHT</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">column</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="nx">piece</span> <span class="o">==</span> <span class="k">this</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">line</span><span class="p">][</span><span class="nx">column</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">Direction</span><span class="p">.</span><span class="nx">LEFT</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Move a piece, if possible, and return the direction that it was moved</span>
</span><span class='line'><span class="nx">Puzzle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">move</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">piece</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">move</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getMove</span><span class="p">(</span><span class="nx">piece</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">move</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">blankSpacePosition</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getBlankSpacePosition</span><span class="p">();</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">line</span> <span class="o">=</span> <span class="nx">blankSpacePosition</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">column</span> <span class="o">=</span> <span class="nx">blankSpacePosition</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>      <span class="k">switch</span> <span class="p">(</span><span class="nx">move</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="nx">Direction</span><span class="p">.</span><span class="nx">LEFT</span><span class="o">:</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">swap</span><span class="p">(</span><span class="nx">line</span><span class="p">,</span> <span class="nx">column</span><span class="p">,</span> <span class="nx">line</span><span class="p">,</span> <span class="nx">column</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="nx">Direction</span><span class="p">.</span><span class="nx">RIGHT</span><span class="o">:</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">swap</span><span class="p">(</span><span class="nx">line</span><span class="p">,</span> <span class="nx">column</span><span class="p">,</span> <span class="nx">line</span><span class="p">,</span> <span class="nx">column</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="nx">Direction</span><span class="p">.</span><span class="nx">UP</span><span class="o">:</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">swap</span><span class="p">(</span><span class="nx">line</span><span class="p">,</span> <span class="nx">column</span><span class="p">,</span> <span class="nx">line</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">column</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="nx">Direction</span><span class="p">.</span><span class="nx">DOWN</span><span class="o">:</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">swap</span><span class="p">(</span><span class="nx">line</span><span class="p">,</span> <span class="nx">column</span><span class="p">,</span> <span class="nx">line</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">column</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">move</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">lastMove</span> <span class="o">=</span> <span class="nx">piece</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">move</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Puzzle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">isGoalState</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">piece</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">];</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">piece</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">originalLine</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">((</span><span class="nx">piece</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span><span class="p">);</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">originalColumn</span> <span class="o">=</span> <span class="p">(</span><span class="nx">piece</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span><span class="p">;</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="nx">i</span> <span class="o">!=</span> <span class="nx">originalLine</span> <span class="o">||</span> <span class="nx">j</span> <span class="o">!=</span> <span class="nx">originalColumn</span><span class="p">)</span> <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Return a copy of current puzzle</span>
</span><span class='line'><span class="nx">Puzzle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getCopy</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">newPuzzle</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Puzzle</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">dimension</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">newPuzzle</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">path</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">newPuzzle</span><span class="p">.</span><span class="nx">path</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">path</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">newPuzzle</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Return all current allowed moves</span>
</span><span class='line'><span class="nx">Puzzle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getAllowedMoves</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">allowedMoves</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">piece</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">];</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getMove</span><span class="p">(</span><span class="nx">piece</span><span class="p">)</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">allowedMoves</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">piece</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">allowedMoves</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Puzzle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">visit</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">children</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">allowedMoves</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getAllowedMoves</span><span class="p">();</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">allowedMoves</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span>  <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">move</span> <span class="o">=</span> <span class="nx">allowedMoves</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">move</span> <span class="o">!=</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastMove</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">newInstance</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getCopy</span><span class="p">();</span>
</span><span class='line'>          <span class="nx">newInstance</span><span class="p">.</span><span class="nx">move</span><span class="p">(</span><span class="nx">move</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">newInstance</span><span class="p">.</span><span class="nx">path</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">move</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">children</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">newInstance</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">children</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Puzzle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">solveBFS</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">startingState</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getCopy</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">startingState</span><span class="p">.</span><span class="nx">path</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">states</span> <span class="o">=</span> <span class="p">[</span><span class="nx">startingState</span><span class="p">];</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="nx">states</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">state</span> <span class="o">=</span> <span class="nx">states</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>      <span class="nx">states</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">state</span><span class="p">.</span><span class="nx">isGoalState</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">state</span><span class="p">.</span><span class="nx">path</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">states</span> <span class="o">=</span> <span class="nx">states</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">state</span><span class="p">.</span><span class="nx">visit</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Puzzle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">g</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">path</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Puzzle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getManhattanDistance</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">distance</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">piece</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">];</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">piece</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">originalLine</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">((</span><span class="nx">piece</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span><span class="p">);</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">originalColumn</span> <span class="o">=</span> <span class="p">(</span><span class="nx">piece</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span><span class="p">;</span>
</span><span class='line'>              <span class="nx">distance</span> <span class="o">+=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">i</span> <span class="o">-</span> <span class="nx">originalLine</span><span class="p">)</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">j</span> <span class="o">-</span> <span class="nx">originalColumn</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">distance</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Puzzle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">countMisplaced</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">piece</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">];</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">piece</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">originalLine</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">((</span><span class="nx">piece</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span><span class="p">);</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">originalColumn</span> <span class="o">=</span> <span class="p">(</span><span class="nx">piece</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="k">this</span><span class="p">.</span><span class="nx">dimension</span><span class="p">;</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="nx">i</span> <span class="o">!=</span> <span class="nx">originalLine</span> <span class="o">||</span> <span class="nx">j</span> <span class="o">!=</span> <span class="nx">originalColumn</span><span class="p">)</span> <span class="nx">count</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>    
</span><span class='line'>  <span class="k">return</span> <span class="nx">count</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Puzzle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">h</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">solve_func</span> <span class="o">==</span> <span class="nx">Algorithm</span><span class="p">.</span><span class="nx">AMisplaced</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">countMisplaced</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">getManhattanDistance</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Puzzle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">solveA</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">states</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MinHeap</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">distance</span> <span class="o">-</span> <span class="nx">b</span><span class="p">.</span><span class="nx">distance</span><span class="p">;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">path</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="nx">states</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">puzzle</span><span class="o">:</span> <span class="k">this</span><span class="p">,</span> <span class="nx">distance</span><span class="o">:</span> <span class="mi">0</span><span class="p">});</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="nx">states</span><span class="p">.</span><span class="nx">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">state</span> <span class="o">=</span> <span class="nx">states</span><span class="p">.</span><span class="nx">pop</span><span class="p">().</span><span class="nx">puzzle</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">state</span><span class="p">.</span><span class="nx">isGoalState</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">state</span><span class="p">.</span><span class="nx">path</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">children</span> <span class="o">=</span> <span class="nx">state</span><span class="p">.</span><span class="nx">visit</span><span class="p">();</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">child</span> <span class="o">=</span> <span class="nx">children</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">f</span> <span class="o">=</span> <span class="nx">child</span><span class="p">.</span><span class="nx">g</span><span class="p">()</span> <span class="o">+</span> <span class="nx">child</span><span class="p">.</span><span class="nx">h</span><span class="p">();</span>
</span><span class='line'>          <span class="nx">states</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">puzzle</span> <span class="o">:</span> <span class="nx">child</span><span class="p">,</span> <span class="nx">distance</span><span class="o">:</span> <span class="nx">f</span><span class="p">});</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Puzzle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">solve</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">solve_func</span> <span class="o">==</span> <span class="nx">Algorithm</span><span class="p">.</span><span class="nx">BFS</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">solveBFS</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">solveA</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure> 
</div>


<p></input></p>

<p>And since this page itself is utilizing this code for demonstration, you can also get it visualizing the source code.</p>

<h2>Conclusion</h2>

<p>Well, that was a quite interesting tutorial. We discussed about <strong>space of states</strong>, <strong>goal state</strong>, <strong>graph search algorithms</strong>, <strong>A*</strong> and <strong>admissible heuristics</strong>. I hope you have enjoyed reading this tutorial as much as I did writing it. See ya on the next tutorial! :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fingertip Detection in OpenCV]]></title>
    <link href="http://abner-math.github.io/blog/2015/11/15/fingertip-detection-on-opencv/"/>
    <updated>2015-11-15T00:06:15-03:00</updated>
    <id>http://abner-math.github.io/blog/2015/11/15/fingertip-detection-on-opencv</id>
    <content type="html"><![CDATA[<p>Hi! In this tutorial, we will learn how to detect fingertips using OpenCV. You ready? :D</p>

<p style="text-align:center;"><img src="http://abner-math.github.io/images/posts/fingertip1.png" alt="" /></p>

<!-- more -->


<p>In computer vision, the task of recognizing an object in the scene is very common. Unhappily, there is no &ldquo;silver bullet&rdquo; which can solve this problem for all kinds of objects. Each case must be treated individually (luckily it&rsquo;s changing with the rising of convolutional neural networks). In this case, we are interested in discover the location of fingertips (if any is present) in the image.</p>

<p>Firstly, let me present you OpenCV, a open-source library for computer vision and digital image processing. It has many facilities which makes our daily life so much easier. :) (If you don&rsquo;t have OpenCV, I recommend following <a href="http://docs.opencv.org/2.4/doc/tutorials/introduction/table_of_content_introduction/table_of_content_introduction.html#table-of-content-introduction">this</a> tutorial).</p>

<p>The first step before detecting the fingertips is to detect the hand, obviously. But how to do it? With color segmentation! You see, let&rsquo;s assume you&rsquo;re in front of a background with a much different color from your skin. Also, let&rsquo;s assume that your hand is the largest part of your body showing up. In this scenario, recognizing the hand would be easy, by simply selecting the pixels belonging to the color of your skin and then retrieving the largest area. That&rsquo;s precisely what we&rsquo;ll do!</p>

<h2>Segmenting the hand skin</h2>

<p>If you ever used any image manipulation software, you should know that there are several color spaces. The most common is the RGB, where any pixel is composed by the union of three colors (red, green, blue). However, for color segmenting, the HSV color space is much better, because in there the information of color is dissociated from the information of illumination. HSV stands for <strong>H</strong>ue (the color information), <strong>S</strong> (saturation, e.g., the percentage of &lsquo;color&rsquo; present) and <strong>V</strong> (value/brightness, e.g., the percentage of &lsquo;white&rsquo; color present). Generally, human skin lies between (H=0,S=58) and (H=50,S=173).</p>

<p>Let&rsquo;s start implementing our detector. The first thing we need is to read the image from the webcam. OpenCV contains a module (imgproc) responsible for capturing images and videos.</p>

<figure class='code'><figcaption><span>fingertip_detector.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;opencv2/core/core.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;opencv2/highgui/highgui.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;opencv2/imgproc/imgproc.hpp&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">VideoCapture</span> <span class="n">cap</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">windowName</span> <span class="o">=</span> <span class="s">&quot;Fingertip detection&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">frame</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cap</span> <span class="o">&gt;&gt;</span> <span class="n">frame</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">imshow</span><span class="p">(</span><span class="n">windowName</span><span class="p">,</span> <span class="n">frame</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">waitKey</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The argument passed to the &ldquo;VideoCapture&rdquo; object indicates the index of camera that we want to access (in case you have more than one connected to your computer). In a loop, we are getting a frame from the camera (through the >> operator) each 30 milliseconds (the argument of &ldquo;waitKey&rdquo; function, which waits x milliseconds until a key has been pressed, and returns -1 if none was pressed). Finally, we show the captured frame on the screen (through the &ldquo;imshow&rdquo; function).</p>

<p>Now, let&rsquo;s convert our captured frame (which is in the BGR color space, e.g, inverted RGB) to HSV and then segment the color using the &ldquo;inRange&rdquo; operator:</p>

<figure class='code'><figcaption><span>fingertip_detector.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">VideoCapture</span> <span class="n">cap</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">windowName</span> <span class="o">=</span> <span class="s">&quot;Fingertip detection&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">minH</span> <span class="o">=</span> <span class="mi">130</span><span class="p">,</span> <span class="n">maxH</span> <span class="o">=</span> <span class="mi">160</span><span class="p">,</span> <span class="n">minS</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="n">maxS</span> <span class="o">=</span> <span class="mi">40</span><span class="p">,</span> <span class="n">minV</span> <span class="o">=</span> <span class="mi">75</span><span class="p">,</span> <span class="n">maxV</span> <span class="o">=</span> <span class="mi">130</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">frame</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cap</span> <span class="o">&gt;&gt;</span> <span class="n">frame</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">hsv</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">cvtColor</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">hsv</span><span class="p">,</span> <span class="n">CV_BGR2HSV</span><span class="p">);</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">inRange</span><span class="p">(</span><span class="n">hsv</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Scalar</span><span class="p">(</span><span class="n">minH</span><span class="p">,</span> <span class="n">minS</span><span class="p">,</span> <span class="n">minV</span><span class="p">),</span> <span class="n">cv</span><span class="o">::</span><span class="n">Scalar</span><span class="p">(</span><span class="n">maxH</span><span class="p">,</span> <span class="n">maxS</span><span class="p">,</span> <span class="n">maxV</span><span class="p">),</span> <span class="n">hsv</span><span class="p">);</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">imshow</span><span class="p">(</span><span class="n">windowName</span><span class="p">,</span> <span class="n">hsv</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">waitKey</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The &ldquo;inRange&rdquo; function receives the image that we want to threshold, the interval lower bound, the interval upper bound and the output image. The result is a black and white image, where pixels that have values inside the interval are colored with white, otherwise black.</p>

<p style="text-align:center;"><img src="http://abner-math.github.io/images/posts/fingertip2.png" alt="" /></p>

<p>As you can notice, this is a poor segmentation. We need to do a fine-tuning of HSV bounds in order to get a good segmentation. Since changing the value and recompiling the program is boring, it&rsquo;s better to use trackbars for this task:</p>

<figure class='code'><figcaption><span>fingertip_detector.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">VideoCapture</span> <span class="n">cap</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">windowName</span> <span class="o">=</span> <span class="s">&quot;Fingertip detection&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">minH</span> <span class="o">=</span> <span class="mi">130</span><span class="p">,</span> <span class="n">maxH</span> <span class="o">=</span> <span class="mi">160</span><span class="p">,</span> <span class="n">minS</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="n">maxS</span> <span class="o">=</span> <span class="mi">40</span><span class="p">,</span> <span class="n">minV</span> <span class="o">=</span> <span class="mi">75</span><span class="p">,</span> <span class="n">maxV</span> <span class="o">=</span> <span class="mi">130</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">namedWindow</span><span class="p">(</span><span class="n">windowName</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">createTrackbar</span><span class="p">(</span><span class="s">&quot;MinH&quot;</span><span class="p">,</span> <span class="n">windowName</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">minH</span><span class="p">,</span> <span class="mi">180</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">createTrackbar</span><span class="p">(</span><span class="s">&quot;MaxH&quot;</span><span class="p">,</span> <span class="n">windowName</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">maxH</span><span class="p">,</span> <span class="mi">180</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">createTrackbar</span><span class="p">(</span><span class="s">&quot;MinS&quot;</span><span class="p">,</span> <span class="n">windowName</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">minS</span><span class="p">,</span> <span class="mi">255</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">createTrackbar</span><span class="p">(</span><span class="s">&quot;MaxS&quot;</span><span class="p">,</span> <span class="n">windowName</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">maxS</span><span class="p">,</span> <span class="mi">255</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">createTrackbar</span><span class="p">(</span><span class="s">&quot;MinV&quot;</span><span class="p">,</span> <span class="n">windowName</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">minV</span><span class="p">,</span> <span class="mi">255</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">createTrackbar</span><span class="p">(</span><span class="s">&quot;MaxV&quot;</span><span class="p">,</span> <span class="n">windowName</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">maxV</span><span class="p">,</span> <span class="mi">255</span><span class="p">);</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">frame</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cap</span> <span class="o">&gt;&gt;</span> <span class="n">frame</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">hsv</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">cvtColor</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">hsv</span><span class="p">,</span> <span class="n">CV_BGR2HSV</span><span class="p">);</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">inRange</span><span class="p">(</span><span class="n">hsv</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Scalar</span><span class="p">(</span><span class="n">minH</span><span class="p">,</span> <span class="n">minS</span><span class="p">,</span> <span class="n">minV</span><span class="p">),</span> <span class="n">cv</span><span class="o">::</span><span class="n">Scalar</span><span class="p">(</span><span class="n">maxH</span><span class="p">,</span> <span class="n">maxS</span><span class="p">,</span> <span class="n">maxV</span><span class="p">),</span> <span class="n">hsv</span><span class="p">);</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">imshow</span><span class="p">(</span><span class="n">windowName</span><span class="p">,</span> <span class="n">hsv</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">waitKey</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p style="text-align:center;"><img src="http://abner-math.github.io/images/posts/fingertip3.png" alt="" /></p>

<p>Even after adjusting the interval there is too much noise. We need to apply special techniques like <strong>median blur</strong> to remove isolated dots and <strong>dilate</strong> to fill &ldquo;holes&rdquo;:</p>

<figure class='code'><figcaption><span>fingertip_detector.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">frame</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cap</span> <span class="o">&gt;&gt;</span> <span class="n">frame</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">hsv</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">cvtColor</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">hsv</span><span class="p">,</span> <span class="n">CV_BGR2HSV</span><span class="p">);</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">inRange</span><span class="p">(</span><span class="n">hsv</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Scalar</span><span class="p">(</span><span class="n">minH</span><span class="p">,</span> <span class="n">minS</span><span class="p">,</span> <span class="n">minV</span><span class="p">),</span> <span class="n">cv</span><span class="o">::</span><span class="n">Scalar</span><span class="p">(</span><span class="n">maxH</span><span class="p">,</span> <span class="n">maxS</span><span class="p">,</span> <span class="n">maxV</span><span class="p">),</span> <span class="n">hsv</span><span class="p">);</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">blurSize</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">elementSize</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">medianBlur</span><span class="p">(</span><span class="n">hsv</span><span class="p">,</span> <span class="n">hsv</span><span class="p">,</span> <span class="n">blurSize</span><span class="p">);</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">element</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">getStructuringElement</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">MORPH_ELLIPSE</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Size</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">elementSize</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">elementSize</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="n">cv</span><span class="o">::</span><span class="n">Point</span><span class="p">(</span><span class="n">elementSize</span><span class="p">,</span> <span class="n">elementSize</span><span class="p">));</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">dilate</span><span class="p">(</span><span class="n">hsv</span><span class="p">,</span> <span class="n">hsv</span><span class="p">,</span> <span class="n">element</span><span class="p">);</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">imshow</span><span class="p">(</span><span class="n">windowName</span><span class="p">,</span> <span class="n">hsv</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">waitKey</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p style="text-align:center;"><img src="http://abner-math.github.io/images/posts/fingertip4.png" alt="" /></p>

<p>Hmmm&hellip; Much better! :D But there is still some outliers&hellip; We can fix it by finding the contours of separated objects present in the thresholded image and then using only the object that has the contour with largest area.</p>

<figure class='code'><figcaption><span>fingertip_detector.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">cap</span> <span class="o">&gt;&gt;</span> <span class="n">frame</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">hsv</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">cvtColor</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">hsv</span><span class="p">,</span> <span class="n">CV_BGR2HSV</span><span class="p">);</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">inRange</span><span class="p">(</span><span class="n">hsv</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Scalar</span><span class="p">(</span><span class="n">minH</span><span class="p">,</span> <span class="n">minS</span><span class="p">,</span> <span class="n">minV</span><span class="p">),</span> <span class="n">cv</span><span class="o">::</span><span class="n">Scalar</span><span class="p">(</span><span class="n">maxH</span><span class="p">,</span> <span class="n">maxS</span><span class="p">,</span> <span class="n">maxV</span><span class="p">),</span> <span class="n">hsv</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">// Pre processing</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">blurSize</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">elementSize</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">medianBlur</span><span class="p">(</span><span class="n">hsv</span><span class="p">,</span> <span class="n">hsv</span><span class="p">,</span> <span class="n">blurSize</span><span class="p">);</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">element</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">getStructuringElement</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">MORPH_ELLIPSE</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Size</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">elementSize</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">elementSize</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="n">cv</span><span class="o">::</span><span class="n">Point</span><span class="p">(</span><span class="n">elementSize</span><span class="p">,</span> <span class="n">elementSize</span><span class="p">));</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">dilate</span><span class="p">(</span><span class="n">hsv</span><span class="p">,</span> <span class="n">hsv</span><span class="p">,</span> <span class="n">element</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">// Contour detection</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Point</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">contours</span><span class="p">;</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Vec4i</span><span class="o">&gt;</span> <span class="n">hierarchy</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">findContours</span><span class="p">(</span><span class="n">hsv</span><span class="p">,</span> <span class="n">contours</span><span class="p">,</span> <span class="n">hierarchy</span><span class="p">,</span> <span class="n">CV_RETR_EXTERNAL</span><span class="p">,</span> <span class="n">CV_CHAIN_APPROX_SIMPLE</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Point</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span>
</span><span class='line'>      <span class="kt">size_t</span> <span class="n">largestContour</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">contours</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">contourArea</span><span class="p">(</span><span class="n">contours</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">&gt;</span> <span class="n">cv</span><span class="o">::</span><span class="n">contourArea</span><span class="p">(</span><span class="n">contours</span><span class="p">[</span><span class="n">largestContour</span><span class="p">]))</span>
</span><span class='line'>              <span class="n">largestContour</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">drawContours</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">contours</span><span class="p">,</span> <span class="n">largestContour</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Scalar</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">imshow</span><span class="p">(</span><span class="n">windowName</span><span class="p">,</span> <span class="n">frame</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">waitKey</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p style="text-align:center;"><img src="http://abner-math.github.io/images/posts/fingertip5.png" alt="" /></p>

<p>The &ldquo;findContours&rdquo; function expects to receive a vector of vector of points, or, in another words, a vector of polygons. There are many detection methods. Here I chose &ldquo;CV_RETR_EXTERNAL&rdquo;, which means it will just return the most external contour, ignoring eventual contours that are inside the most external region. I then compare the areas of the returned polygons (through the &ldquo;contourArea&rdquo; function) to get the largest and then draw it on screen (through the &ldquo;drawContours&rdquo; function). We can see clearly that the result is the contour of my hand with a tiny red line. So we accomplished the task of segmenting our hand successfully. Let&rsquo;s move to the next step.</p>

<h2>Detecting fingertips</h2>

<p>In order to detect fingertips, we are going to use the <strong>Convex Hull</strong> technique. In mathematics, Convex Hull is the smallest convex set that contains a set of points. And a convex set is a set of points such that, if we trace a straight line from any pair of points in the set, that line must be also be inside the region. The result is then a nice, smooth region, much easier to be analised than our contour, that contains many imperfections. Luckily, this algorithm is also implemented on OpenCV through the &ldquo;convexHull&rdquo; function.</p>

<figure class='code'><figcaption><span>fingertip_detector.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">cap</span> <span class="o">&gt;&gt;</span> <span class="n">frame</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">hsv</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">cvtColor</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">hsv</span><span class="p">,</span> <span class="n">CV_BGR2HSV</span><span class="p">);</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">inRange</span><span class="p">(</span><span class="n">hsv</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Scalar</span><span class="p">(</span><span class="n">minH</span><span class="p">,</span> <span class="n">minS</span><span class="p">,</span> <span class="n">minV</span><span class="p">),</span> <span class="n">cv</span><span class="o">::</span><span class="n">Scalar</span><span class="p">(</span><span class="n">maxH</span><span class="p">,</span> <span class="n">maxS</span><span class="p">,</span> <span class="n">maxV</span><span class="p">),</span> <span class="n">hsv</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">// Pre processing</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">blurSize</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">elementSize</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">medianBlur</span><span class="p">(</span><span class="n">hsv</span><span class="p">,</span> <span class="n">hsv</span><span class="p">,</span> <span class="n">blurSize</span><span class="p">);</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">element</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">getStructuringElement</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">MORPH_ELLIPSE</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Size</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">elementSize</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">elementSize</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="n">cv</span><span class="o">::</span><span class="n">Point</span><span class="p">(</span><span class="n">elementSize</span><span class="p">,</span> <span class="n">elementSize</span><span class="p">));</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">dilate</span><span class="p">(</span><span class="n">hsv</span><span class="p">,</span> <span class="n">hsv</span><span class="p">,</span> <span class="n">element</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">// Contour detection</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Point</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">contours</span><span class="p">;</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Vec4i</span><span class="o">&gt;</span> <span class="n">hierarchy</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">findContours</span><span class="p">(</span><span class="n">hsv</span><span class="p">,</span> <span class="n">contours</span><span class="p">,</span> <span class="n">hierarchy</span><span class="p">,</span> <span class="n">CV_RETR_EXTERNAL</span><span class="p">,</span> <span class="n">CV_CHAIN_APPROX_SIMPLE</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Point</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span>
</span><span class='line'>      <span class="kt">size_t</span> <span class="n">largestContour</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">contours</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">contourArea</span><span class="p">(</span><span class="n">contours</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">&gt;</span> <span class="n">cv</span><span class="o">::</span><span class="n">contourArea</span><span class="p">(</span><span class="n">contours</span><span class="p">[</span><span class="n">largestContour</span><span class="p">]))</span>
</span><span class='line'>              <span class="n">largestContour</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">drawContours</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">contours</span><span class="p">,</span> <span class="n">largestContour</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Scalar</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">// Convex hull</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">contours</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Point</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">hull</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>          <span class="n">cv</span><span class="o">::</span><span class="n">convexHull</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="p">(</span><span class="n">contours</span><span class="p">[</span><span class="n">largestContour</span><span class="p">]),</span> <span class="n">hull</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nb">false</span><span class="p">);</span>
</span><span class='line'>          <span class="n">cv</span><span class="o">::</span><span class="n">drawContours</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">hull</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Scalar</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">imshow</span><span class="p">(</span><span class="n">windowName</span><span class="p">,</span> <span class="n">frame</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">waitKey</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p style="text-align:center;"><img src="http://abner-math.github.io/images/posts/fingertip6.png" alt="" /></p>

<p>We are just calculating the convex hull of our largest contour (in order to speed the process). The &ldquo;convexHull&rdquo; function expects to receive a set of polygons, just like the &ldquo;findContours&rdquo; function. Hence, drawing the region on screen follows the same logic.</p>

<p>It&rsquo;s already pretty easy detecting the fingertips through the Convex Hull region. Their locations coincide with the &ldquo;corners&rdquo; of our Convex Hull polygon. But instead of doing it manually, we are going to detect it with the aid of &ldquo;<strong>convextDefects</strong>&rdquo; function. You see, there are &ldquo;gaps&rdquo; between the convex hull region and our contour region. The &ldquo;convexDefects&rdquo; will try to approximate those gaps using straight lines. We can then use that information to find the points where our fingertips are placed.</p>

<figure class='code'><figcaption><span>fingertip_detector.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="p">...</span>
</span><span class='line'>      <span class="c1">// Convex hull</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">contours</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Point</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">hull</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>          <span class="n">cv</span><span class="o">::</span><span class="n">convexHull</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="p">(</span><span class="n">contours</span><span class="p">[</span><span class="n">largestContour</span><span class="p">]),</span> <span class="n">hull</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nb">false</span><span class="p">);</span>
</span><span class='line'>          <span class="n">cv</span><span class="o">::</span><span class="n">drawContours</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">hull</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Scalar</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">hull</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">hullIndexes</span><span class="p">;</span>
</span><span class='line'>              <span class="n">cv</span><span class="o">::</span><span class="n">convexHull</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="p">(</span><span class="n">contours</span><span class="p">[</span><span class="n">largestContour</span><span class="p">]),</span> <span class="n">hullIndexes</span><span class="p">,</span> <span class="nb">true</span><span class="p">);</span>
</span><span class='line'>              <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Vec4i</span><span class="o">&gt;</span> <span class="n">convexityDefects</span><span class="p">;</span>
</span><span class='line'>              <span class="n">cv</span><span class="o">::</span><span class="n">convexityDefects</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="p">(</span><span class="n">contours</span><span class="p">[</span><span class="n">largestContour</span><span class="p">]),</span> <span class="n">hullIndexes</span><span class="p">,</span> <span class="n">convexityDefects</span><span class="p">);</span>
</span><span class='line'>              <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">convexityDefects</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>              <span class="p">{</span>
</span><span class='line'>                  <span class="n">cv</span><span class="o">::</span><span class="n">Point</span> <span class="n">p1</span> <span class="o">=</span> <span class="n">contours</span><span class="p">[</span><span class="n">largestContour</span><span class="p">][</span><span class="n">convexityDefects</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]];</span>
</span><span class='line'>                  <span class="n">cv</span><span class="o">::</span><span class="n">Point</span> <span class="n">p2</span> <span class="o">=</span> <span class="n">contours</span><span class="p">[</span><span class="n">largestContour</span><span class="p">][</span><span class="n">convexityDefects</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]];</span>
</span><span class='line'>                  <span class="n">cv</span><span class="o">::</span><span class="n">Point</span> <span class="n">p3</span> <span class="o">=</span> <span class="n">contours</span><span class="p">[</span><span class="n">largestContour</span><span class="p">][</span><span class="n">convexityDefects</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">2</span><span class="p">]];</span>
</span><span class='line'>                  <span class="n">cv</span><span class="o">::</span><span class="n">line</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">p1</span><span class="p">,</span> <span class="n">p3</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Scalar</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>                  <span class="n">cv</span><span class="o">::</span><span class="n">line</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">p3</span><span class="p">,</span> <span class="n">p2</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Scalar</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">imshow</span><span class="p">(</span><span class="n">windowName</span><span class="p">,</span> <span class="n">frame</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">waitKey</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p style="text-align:center;"><img src="http://abner-math.github.io/images/posts/fingertip7.png" alt="" /></p>

<p>I drew the convexity defects lines in blue. The &ldquo;convexityDefects&rdquo; function returns a vector of tuples of four values. The first value is the initial point of the defect region. The second value is the ending point of the defect region. The third value is the &ldquo;middle&rdquo; point of the defect region that connects the initial point and the ending point. The result is then two lines: One from the initial point to the middle point and one from middle point to the ending point. What only interests us in the initial point, that is the point where our fingertips are placed. I will draw it to make it more evident.</p>

<p style="text-align:center;"><img src="http://abner-math.github.io/images/posts/fingertip8.png" alt="" /></p>

<p>Ta-da! What sucks, however, is that there are far more points than just our fingertips. We need to do a filtering for only the points of our interest. We can think in some cheap but useful heuristics for that: i) Consider the inner angle between the two lines of the defect region to be between a certain interval; ii) Consider the angle between the initial point and the center of the contour region to be between a certain interval; iii) Consider the length of the line from the initial point to the middle point to be above a certain threshold. I think only those three are enough.</p>

<p>The inner angle is exactly the angle between our fingers. The image below illustrates the concept better:</p>

<p style="text-align:center;"><img src="http://simena86.github.io/images/handRecognition/handangle.png" alt="" /></p>

<p>Generally, the angle between our fingers is between 20° and 120°. It can be calculated by translating the vector to the origin (by subtracting both by the middle point of the defect region) and then calculating the arc cosine of the inner product divided by the norm of the vectors:</p>

<figure class='code'><figcaption><span>fingertip_detector.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">theta</span> <span class="o">=</span> <span class="n">arcos</span><span class="p">(</span><span class="n">x</span> <span class="p">.</span> <span class="n">y</span> <span class="o">/</span> <span class="o">|</span><span class="n">x</span><span class="o">||</span><span class="n">y</span><span class="o">|</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This nice snippet will do exactly that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="kt">float</span> <span class="nf">innerAngle</span><span class="p">(</span><span class="kt">float</span> <span class="n">px1</span><span class="p">,</span> <span class="kt">float</span> <span class="n">py1</span><span class="p">,</span> <span class="kt">float</span> <span class="n">px2</span><span class="p">,</span> <span class="kt">float</span> <span class="n">py2</span><span class="p">,</span> <span class="kt">float</span> <span class="n">cx1</span><span class="p">,</span> <span class="kt">float</span> <span class="n">cy1</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'> <span class="kt">float</span> <span class="n">dist1</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">sqrt</span><span class="p">(</span>  <span class="p">(</span><span class="n">px1</span><span class="o">-</span><span class="n">cx1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">px1</span><span class="o">-</span><span class="n">cx1</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">py1</span><span class="o">-</span><span class="n">cy1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">py1</span><span class="o">-</span><span class="n">cy1</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'> <span class="kt">float</span> <span class="n">dist2</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">sqrt</span><span class="p">(</span>  <span class="p">(</span><span class="n">px2</span><span class="o">-</span><span class="n">cx1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">px2</span><span class="o">-</span><span class="n">cx1</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">py2</span><span class="o">-</span><span class="n">cy1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">py2</span><span class="o">-</span><span class="n">cy1</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'> <span class="kt">float</span> <span class="n">Ax</span><span class="p">,</span> <span class="n">Ay</span><span class="p">;</span>
</span><span class='line'> <span class="kt">float</span> <span class="n">Bx</span><span class="p">,</span> <span class="n">By</span><span class="p">;</span>
</span><span class='line'> <span class="kt">float</span> <span class="n">Cx</span><span class="p">,</span> <span class="n">Cy</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'> <span class="c1">//find closest point to C  </span>
</span><span class='line'> <span class="c1">//printf(&quot;dist = %lf %lf\n&quot;, dist1, dist2);  </span>
</span><span class='line'>
</span><span class='line'> <span class="n">Cx</span> <span class="o">=</span> <span class="n">cx1</span><span class="p">;</span>
</span><span class='line'> <span class="n">Cy</span> <span class="o">=</span> <span class="n">cy1</span><span class="p">;</span>
</span><span class='line'> <span class="k">if</span><span class="p">(</span><span class="n">dist1</span> <span class="o">&lt;</span> <span class="n">dist2</span><span class="p">)</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'>  <span class="n">Bx</span> <span class="o">=</span> <span class="n">px1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">By</span> <span class="o">=</span> <span class="n">py1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Ax</span> <span class="o">=</span> <span class="n">px2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Ay</span> <span class="o">=</span> <span class="n">py2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'> <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>  <span class="n">Bx</span> <span class="o">=</span> <span class="n">px2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">By</span> <span class="o">=</span> <span class="n">py2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Ax</span> <span class="o">=</span> <span class="n">px1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Ay</span> <span class="o">=</span> <span class="n">py1</span><span class="p">;</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'> <span class="kt">float</span> <span class="n">Q1</span> <span class="o">=</span> <span class="n">Cx</span> <span class="o">-</span> <span class="n">Ax</span><span class="p">;</span>
</span><span class='line'> <span class="kt">float</span> <span class="n">Q2</span> <span class="o">=</span> <span class="n">Cy</span> <span class="o">-</span> <span class="n">Ay</span><span class="p">;</span>
</span><span class='line'> <span class="kt">float</span> <span class="n">P1</span> <span class="o">=</span> <span class="n">Bx</span> <span class="o">-</span> <span class="n">Ax</span><span class="p">;</span>
</span><span class='line'> <span class="kt">float</span> <span class="n">P2</span> <span class="o">=</span> <span class="n">By</span> <span class="o">-</span> <span class="n">Ay</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'> <span class="kt">float</span> <span class="n">A</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">acos</span><span class="p">(</span> <span class="p">(</span><span class="n">P1</span><span class="o">*</span><span class="n">Q1</span> <span class="o">+</span> <span class="n">P2</span><span class="o">*</span><span class="n">Q2</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span> <span class="n">std</span><span class="o">::</span><span class="n">sqrt</span><span class="p">(</span><span class="n">P1</span><span class="o">*</span><span class="n">P1</span><span class="o">+</span><span class="n">P2</span><span class="o">*</span><span class="n">P2</span><span class="p">)</span> <span class="o">*</span> <span class="n">std</span><span class="o">::</span><span class="n">sqrt</span><span class="p">(</span><span class="n">Q1</span><span class="o">*</span><span class="n">Q1</span><span class="o">+</span><span class="n">Q2</span><span class="o">*</span><span class="n">Q2</span><span class="p">)</span> <span class="p">)</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'> <span class="n">A</span> <span class="o">=</span> <span class="n">A</span><span class="o">*</span><span class="mi">180</span><span class="o">/</span><span class="n">CV_PI</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'> <span class="k">return</span> <span class="n">A</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, the angle between the initial point and the center of contour region is necessary to erase points located in the lower part of the contour. In order to find the center of the contour, we must involve it with a bounding box. OpenCV already has a function for that called &ldquo;boundingBox&rdquo;. We just are going to consider points that are between -30° and 160°.</p>

<p>And finally, the length of line from the initial point to the middle point can be calculated by simply calculating the euclidean distance between the initial point and the middle point.</p>

<p>Crystal clear? Ok, here&rsquo;s the code:</p>

<figure class='code'><figcaption><span>fingertip_detector.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">hull</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">hullIndexes</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">convexHull</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="p">(</span><span class="n">contours</span><span class="p">[</span><span class="n">largestContour</span><span class="p">]),</span> <span class="n">hullIndexes</span><span class="p">,</span> <span class="nb">true</span><span class="p">);</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Vec4i</span><span class="o">&gt;</span> <span class="n">convexityDefects</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">convexityDefects</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="p">(</span><span class="n">contours</span><span class="p">[</span><span class="n">largestContour</span><span class="p">]),</span> <span class="n">hullIndexes</span><span class="p">,</span> <span class="n">convexityDefects</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Rect</span> <span class="n">boundingBox</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">boundingRect</span><span class="p">(</span><span class="n">hull</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">rectangle</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">boundingBox</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Scalar</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Point</span> <span class="n">center</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">Point</span><span class="p">(</span><span class="n">boundingBox</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">boundingBox</span><span class="p">.</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="n">boundingBox</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">boundingBox</span><span class="p">.</span><span class="n">height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Point</span><span class="o">&gt;</span> <span class="n">validPoints</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">convexityDefects</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">Point</span> <span class="n">p1</span> <span class="o">=</span> <span class="n">contours</span><span class="p">[</span><span class="n">largestContour</span><span class="p">][</span><span class="n">convexityDefects</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]];</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">Point</span> <span class="n">p2</span> <span class="o">=</span> <span class="n">contours</span><span class="p">[</span><span class="n">largestContour</span><span class="p">][</span><span class="n">convexityDefects</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]];</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">Point</span> <span class="n">p3</span> <span class="o">=</span> <span class="n">contours</span><span class="p">[</span><span class="n">largestContour</span><span class="p">][</span><span class="n">convexityDefects</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">2</span><span class="p">]];</span>
</span><span class='line'>      <span class="kt">double</span> <span class="n">angle</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">atan2</span><span class="p">(</span><span class="n">center</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">p1</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="n">center</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">p1</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">*</span> <span class="mi">180</span> <span class="o">/</span> <span class="n">CV_PI</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">double</span> <span class="n">inAngle</span> <span class="o">=</span> <span class="n">innerAngle</span><span class="p">(</span><span class="n">p1</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">p1</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="n">p2</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">p2</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="n">p3</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">p3</span><span class="p">.</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'>      <span class="kt">double</span> <span class="n">length</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">sqrt</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">pow</span><span class="p">(</span><span class="n">p1</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">p3</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="n">std</span><span class="o">::</span><span class="n">pow</span><span class="p">(</span><span class="n">p1</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">p3</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">angle</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">30</span> <span class="o">&amp;&amp;</span> <span class="n">angle</span> <span class="o">&lt;</span> <span class="mi">160</span> <span class="o">&amp;&amp;</span> <span class="n">std</span><span class="o">::</span><span class="n">abs</span><span class="p">(</span><span class="n">inAngle</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">20</span> <span class="o">&amp;&amp;</span> <span class="n">std</span><span class="o">::</span><span class="n">abs</span><span class="p">(</span><span class="n">inAngle</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">120</span> <span class="o">&amp;&amp;</span> <span class="n">length</span> <span class="o">&gt;</span> <span class="mf">0.1</span> <span class="o">*</span> <span class="n">boundingBox</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">validPoints</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">p1</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">validPoints</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">circle</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">validPoints</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="mi">9</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Scalar</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the result is good enough:</p>

<p style="text-align:center;"><img src="http://abner-math.github.io/images/posts/fingertip10.png" alt="" /></p>

<p>The final code can be found below. I improved it by removing the trackbars from the color and, instead of it, allowing the user to click on the region where the hand is located and it will automatically extract the color information from there. Click again to establish a interval of colors. I also put trackbars for the angles, so you can adjust it during the program execution and check the effect of different intervals.</p>

<center><input id="spoiler" type="button" value="See source code" onclick="toggle_visibility('code');"></center>


<div id="code">
<figure class='code'><figcaption><span>fingertip_detector.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;opencv2/core/core.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;opencv2/highgui/highgui.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;opencv2/imgproc/imgproc.hpp&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">minH</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">maxH</span> <span class="o">=</span> <span class="mi">20</span><span class="p">,</span> <span class="n">minS</span> <span class="o">=</span> <span class="mi">30</span><span class="p">,</span> <span class="n">maxS</span> <span class="o">=</span> <span class="mi">150</span><span class="p">,</span> <span class="n">minV</span> <span class="o">=</span> <span class="mi">60</span><span class="p">,</span> <span class="n">maxV</span> <span class="o">=</span> <span class="mi">255</span><span class="p">;</span>
</span><span class='line'><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">frame</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">float</span> <span class="nf">innerAngle</span><span class="p">(</span><span class="kt">float</span> <span class="n">px1</span><span class="p">,</span> <span class="kt">float</span> <span class="n">py1</span><span class="p">,</span> <span class="kt">float</span> <span class="n">px2</span><span class="p">,</span> <span class="kt">float</span> <span class="n">py2</span><span class="p">,</span> <span class="kt">float</span> <span class="n">cx1</span><span class="p">,</span> <span class="kt">float</span> <span class="n">cy1</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'> <span class="kt">float</span> <span class="n">dist1</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">sqrt</span><span class="p">(</span>  <span class="p">(</span><span class="n">px1</span><span class="o">-</span><span class="n">cx1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">px1</span><span class="o">-</span><span class="n">cx1</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">py1</span><span class="o">-</span><span class="n">cy1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">py1</span><span class="o">-</span><span class="n">cy1</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'> <span class="kt">float</span> <span class="n">dist2</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">sqrt</span><span class="p">(</span>  <span class="p">(</span><span class="n">px2</span><span class="o">-</span><span class="n">cx1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">px2</span><span class="o">-</span><span class="n">cx1</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">py2</span><span class="o">-</span><span class="n">cy1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">py2</span><span class="o">-</span><span class="n">cy1</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'> <span class="kt">float</span> <span class="n">Ax</span><span class="p">,</span> <span class="n">Ay</span><span class="p">;</span>
</span><span class='line'> <span class="kt">float</span> <span class="n">Bx</span><span class="p">,</span> <span class="n">By</span><span class="p">;</span>
</span><span class='line'> <span class="kt">float</span> <span class="n">Cx</span><span class="p">,</span> <span class="n">Cy</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'> <span class="c1">//find closest point to C  </span>
</span><span class='line'> <span class="c1">//printf(&quot;dist = %lf %lf\n&quot;, dist1, dist2);  </span>
</span><span class='line'>
</span><span class='line'> <span class="n">Cx</span> <span class="o">=</span> <span class="n">cx1</span><span class="p">;</span>
</span><span class='line'> <span class="n">Cy</span> <span class="o">=</span> <span class="n">cy1</span><span class="p">;</span>
</span><span class='line'> <span class="k">if</span><span class="p">(</span><span class="n">dist1</span> <span class="o">&lt;</span> <span class="n">dist2</span><span class="p">)</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'>  <span class="n">Bx</span> <span class="o">=</span> <span class="n">px1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">By</span> <span class="o">=</span> <span class="n">py1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Ax</span> <span class="o">=</span> <span class="n">px2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Ay</span> <span class="o">=</span> <span class="n">py2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'> <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>  <span class="n">Bx</span> <span class="o">=</span> <span class="n">px2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">By</span> <span class="o">=</span> <span class="n">py2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Ax</span> <span class="o">=</span> <span class="n">px1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Ay</span> <span class="o">=</span> <span class="n">py1</span><span class="p">;</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'> <span class="kt">float</span> <span class="n">Q1</span> <span class="o">=</span> <span class="n">Cx</span> <span class="o">-</span> <span class="n">Ax</span><span class="p">;</span>
</span><span class='line'> <span class="kt">float</span> <span class="n">Q2</span> <span class="o">=</span> <span class="n">Cy</span> <span class="o">-</span> <span class="n">Ay</span><span class="p">;</span>
</span><span class='line'> <span class="kt">float</span> <span class="n">P1</span> <span class="o">=</span> <span class="n">Bx</span> <span class="o">-</span> <span class="n">Ax</span><span class="p">;</span>
</span><span class='line'> <span class="kt">float</span> <span class="n">P2</span> <span class="o">=</span> <span class="n">By</span> <span class="o">-</span> <span class="n">Ay</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'> <span class="kt">float</span> <span class="n">A</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">acos</span><span class="p">(</span> <span class="p">(</span><span class="n">P1</span><span class="o">*</span><span class="n">Q1</span> <span class="o">+</span> <span class="n">P2</span><span class="o">*</span><span class="n">Q2</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span> <span class="n">std</span><span class="o">::</span><span class="n">sqrt</span><span class="p">(</span><span class="n">P1</span><span class="o">*</span><span class="n">P1</span><span class="o">+</span><span class="n">P2</span><span class="o">*</span><span class="n">P2</span><span class="p">)</span> <span class="o">*</span> <span class="n">std</span><span class="o">::</span><span class="n">sqrt</span><span class="p">(</span><span class="n">Q1</span><span class="o">*</span><span class="n">Q1</span><span class="o">+</span><span class="n">Q2</span><span class="o">*</span><span class="n">Q2</span><span class="p">)</span> <span class="p">)</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'> <span class="n">A</span> <span class="o">=</span> <span class="n">A</span><span class="o">*</span><span class="mi">180</span><span class="o">/</span><span class="n">CV_PI</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'> <span class="k">return</span> <span class="n">A</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">CallbackFunc</span><span class="p">(</span><span class="kt">int</span> <span class="n">event</span><span class="p">,</span> <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span> <span class="n">userdata</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">RGB</span> <span class="o">=</span> <span class="n">frame</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">Rect</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">));</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">HSV</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">cvtColor</span><span class="p">(</span><span class="n">RGB</span><span class="p">,</span> <span class="n">HSV</span><span class="p">,</span> <span class="n">CV_BGR2HSV</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Vec3b</span> <span class="n">pixel</span> <span class="o">=</span> <span class="n">HSV</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Vec3b</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">event</span> <span class="o">==</span> <span class="n">cv</span><span class="o">::</span><span class="n">EVENT_LBUTTONDBLCLK</span><span class="p">)</span> <span class="c1">// on double left clcik</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Click&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">h</span> <span class="o">=</span> <span class="n">pixel</span><span class="p">.</span><span class="n">val</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="n">pixel</span><span class="p">.</span><span class="n">val</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">v</span> <span class="o">=</span> <span class="n">pixel</span><span class="p">.</span><span class="n">val</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">minH</span> <span class="o">=</span> <span class="n">h</span><span class="p">;</span>
</span><span class='line'>          <span class="n">maxH</span> <span class="o">=</span> <span class="n">h</span><span class="p">;</span>
</span><span class='line'>          <span class="n">minS</span> <span class="o">=</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>          <span class="n">maxS</span> <span class="o">=</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>          <span class="n">minV</span> <span class="o">=</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>          <span class="n">maxV</span> <span class="o">=</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">h</span> <span class="o">&lt;</span> <span class="n">minH</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">minH</span> <span class="o">=</span> <span class="n">h</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">h</span> <span class="o">&gt;</span> <span class="n">maxH</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">maxH</span> <span class="o">=</span> <span class="n">h</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">s</span> <span class="o">&lt;</span> <span class="n">minS</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">minS</span> <span class="o">=</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">s</span> <span class="o">&gt;</span> <span class="n">maxS</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">maxS</span> <span class="o">=</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">v</span> <span class="o">&lt;</span> <span class="n">minV</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">minV</span> <span class="o">=</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">v</span> <span class="o">&gt;</span> <span class="n">maxV</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">maxV</span> <span class="o">=</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">count</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">pixel</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">VideoCapture</span> <span class="n">cap</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">windowName</span> <span class="o">=</span> <span class="s">&quot;Fingertip detection&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">namedWindow</span><span class="p">(</span><span class="n">windowName</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">setMouseCallback</span><span class="p">(</span><span class="n">windowName</span><span class="p">,</span> <span class="n">CallbackFunc</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">inAngleMin</span> <span class="o">=</span> <span class="mi">200</span><span class="p">,</span> <span class="n">inAngleMax</span> <span class="o">=</span> <span class="mi">300</span><span class="p">,</span> <span class="n">angleMin</span> <span class="o">=</span> <span class="mi">180</span><span class="p">,</span> <span class="n">angleMax</span> <span class="o">=</span> <span class="mi">359</span><span class="p">,</span> <span class="n">lengthMin</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="n">lengthMax</span> <span class="o">=</span> <span class="mi">80</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">createTrackbar</span><span class="p">(</span><span class="s">&quot;Inner angle min&quot;</span><span class="p">,</span> <span class="n">windowName</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">inAngleMin</span><span class="p">,</span> <span class="mi">360</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">createTrackbar</span><span class="p">(</span><span class="s">&quot;Inner angle max&quot;</span><span class="p">,</span> <span class="n">windowName</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">inAngleMax</span><span class="p">,</span> <span class="mi">360</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">createTrackbar</span><span class="p">(</span><span class="s">&quot;Angle min&quot;</span><span class="p">,</span> <span class="n">windowName</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">angleMin</span><span class="p">,</span> <span class="mi">360</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">createTrackbar</span><span class="p">(</span><span class="s">&quot;Angle max&quot;</span><span class="p">,</span> <span class="n">windowName</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">angleMax</span><span class="p">,</span> <span class="mi">360</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">createTrackbar</span><span class="p">(</span><span class="s">&quot;Length min&quot;</span><span class="p">,</span> <span class="n">windowName</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">lengthMin</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">createTrackbar</span><span class="p">(</span><span class="s">&quot;Length max&quot;</span><span class="p">,</span> <span class="n">windowName</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">lengthMax</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">cap</span> <span class="o">&gt;&gt;</span> <span class="n">frame</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">hsv</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">cvtColor</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">hsv</span><span class="p">,</span> <span class="n">CV_BGR2HSV</span><span class="p">);</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">inRange</span><span class="p">(</span><span class="n">hsv</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Scalar</span><span class="p">(</span><span class="n">minH</span><span class="p">,</span> <span class="n">minS</span><span class="p">,</span> <span class="n">minV</span><span class="p">),</span> <span class="n">cv</span><span class="o">::</span><span class="n">Scalar</span><span class="p">(</span><span class="n">maxH</span><span class="p">,</span> <span class="n">maxS</span><span class="p">,</span> <span class="n">maxV</span><span class="p">),</span> <span class="n">hsv</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">// Pre processing</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">blurSize</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">elementSize</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">medianBlur</span><span class="p">(</span><span class="n">hsv</span><span class="p">,</span> <span class="n">hsv</span><span class="p">,</span> <span class="n">blurSize</span><span class="p">);</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">element</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">getStructuringElement</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">MORPH_ELLIPSE</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Size</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">elementSize</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">elementSize</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="n">cv</span><span class="o">::</span><span class="n">Point</span><span class="p">(</span><span class="n">elementSize</span><span class="p">,</span> <span class="n">elementSize</span><span class="p">));</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">dilate</span><span class="p">(</span><span class="n">hsv</span><span class="p">,</span> <span class="n">hsv</span><span class="p">,</span> <span class="n">element</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">// Contour detection</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Point</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">contours</span><span class="p">;</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Vec4i</span><span class="o">&gt;</span> <span class="n">hierarchy</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">findContours</span><span class="p">(</span><span class="n">hsv</span><span class="p">,</span> <span class="n">contours</span><span class="p">,</span> <span class="n">hierarchy</span><span class="p">,</span> <span class="n">CV_RETR_EXTERNAL</span><span class="p">,</span> <span class="n">CV_CHAIN_APPROX_SIMPLE</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Point</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span>
</span><span class='line'>      <span class="kt">size_t</span> <span class="n">largestContour</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">contours</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">contourArea</span><span class="p">(</span><span class="n">contours</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">&gt;</span> <span class="n">cv</span><span class="o">::</span><span class="n">contourArea</span><span class="p">(</span><span class="n">contours</span><span class="p">[</span><span class="n">largestContour</span><span class="p">]))</span>
</span><span class='line'>              <span class="n">largestContour</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">drawContours</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">contours</span><span class="p">,</span> <span class="n">largestContour</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Scalar</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">// Convex hull</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">contours</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Point</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">hull</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>          <span class="n">cv</span><span class="o">::</span><span class="n">convexHull</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="p">(</span><span class="n">contours</span><span class="p">[</span><span class="n">largestContour</span><span class="p">]),</span> <span class="n">hull</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nb">false</span><span class="p">);</span>
</span><span class='line'>          <span class="n">cv</span><span class="o">::</span><span class="n">drawContours</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">hull</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Scalar</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">hull</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">hullIndexes</span><span class="p">;</span>
</span><span class='line'>              <span class="n">cv</span><span class="o">::</span><span class="n">convexHull</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="p">(</span><span class="n">contours</span><span class="p">[</span><span class="n">largestContour</span><span class="p">]),</span> <span class="n">hullIndexes</span><span class="p">,</span> <span class="nb">true</span><span class="p">);</span>
</span><span class='line'>              <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Vec4i</span><span class="o">&gt;</span> <span class="n">convexityDefects</span><span class="p">;</span>
</span><span class='line'>              <span class="n">cv</span><span class="o">::</span><span class="n">convexityDefects</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="p">(</span><span class="n">contours</span><span class="p">[</span><span class="n">largestContour</span><span class="p">]),</span> <span class="n">hullIndexes</span><span class="p">,</span> <span class="n">convexityDefects</span><span class="p">);</span>
</span><span class='line'>              <span class="n">cv</span><span class="o">::</span><span class="n">Rect</span> <span class="n">boundingBox</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">boundingRect</span><span class="p">(</span><span class="n">hull</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>              <span class="n">cv</span><span class="o">::</span><span class="n">rectangle</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">boundingBox</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Scalar</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span>
</span><span class='line'>              <span class="n">cv</span><span class="o">::</span><span class="n">Point</span> <span class="n">center</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">Point</span><span class="p">(</span><span class="n">boundingBox</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">boundingBox</span><span class="p">.</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="n">boundingBox</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">boundingBox</span><span class="p">.</span><span class="n">height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>              <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">Point</span><span class="o">&gt;</span> <span class="n">validPoints</span><span class="p">;</span>
</span><span class='line'>              <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">convexityDefects</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>              <span class="p">{</span>
</span><span class='line'>                  <span class="n">cv</span><span class="o">::</span><span class="n">Point</span> <span class="n">p1</span> <span class="o">=</span> <span class="n">contours</span><span class="p">[</span><span class="n">largestContour</span><span class="p">][</span><span class="n">convexityDefects</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]];</span>
</span><span class='line'>                  <span class="n">cv</span><span class="o">::</span><span class="n">Point</span> <span class="n">p2</span> <span class="o">=</span> <span class="n">contours</span><span class="p">[</span><span class="n">largestContour</span><span class="p">][</span><span class="n">convexityDefects</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]];</span>
</span><span class='line'>                  <span class="n">cv</span><span class="o">::</span><span class="n">Point</span> <span class="n">p3</span> <span class="o">=</span> <span class="n">contours</span><span class="p">[</span><span class="n">largestContour</span><span class="p">][</span><span class="n">convexityDefects</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">2</span><span class="p">]];</span>
</span><span class='line'>                  <span class="kt">double</span> <span class="n">angle</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">atan2</span><span class="p">(</span><span class="n">center</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">p1</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="n">center</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">p1</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">*</span> <span class="mi">180</span> <span class="o">/</span> <span class="n">CV_PI</span><span class="p">;</span>
</span><span class='line'>                  <span class="kt">double</span> <span class="n">inAngle</span> <span class="o">=</span> <span class="n">innerAngle</span><span class="p">(</span><span class="n">p1</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">p1</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="n">p2</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">p2</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="n">p3</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">p3</span><span class="p">.</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'>                  <span class="kt">double</span> <span class="n">length</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">sqrt</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">pow</span><span class="p">(</span><span class="n">p1</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">p3</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="n">std</span><span class="o">::</span><span class="n">pow</span><span class="p">(</span><span class="n">p1</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">p3</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span>
</span><span class='line'>                  <span class="k">if</span> <span class="p">(</span><span class="n">angle</span> <span class="o">&gt;</span> <span class="n">angleMin</span> <span class="o">-</span> <span class="mi">180</span> <span class="o">&amp;&amp;</span> <span class="n">angle</span> <span class="o">&lt;</span> <span class="n">angleMax</span> <span class="o">-</span> <span class="mi">180</span> <span class="o">&amp;&amp;</span> <span class="n">inAngle</span> <span class="o">&gt;</span> <span class="n">inAngleMin</span> <span class="o">-</span> <span class="mi">180</span> <span class="o">&amp;&amp;</span> <span class="n">inAngle</span> <span class="o">&lt;</span> <span class="n">inAngleMax</span> <span class="o">-</span> <span class="mi">180</span> <span class="o">&amp;&amp;</span> <span class="n">length</span> <span class="o">&gt;</span> <span class="n">lengthMin</span> <span class="o">/</span> <span class="mf">100.0</span> <span class="o">*</span> <span class="n">boundingBox</span><span class="p">.</span><span class="n">height</span> <span class="o">&amp;&amp;</span> <span class="n">length</span> <span class="o">&lt;</span> <span class="n">lengthMax</span> <span class="o">/</span> <span class="mf">100.0</span> <span class="o">*</span> <span class="n">boundingBox</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">{</span>
</span><span class='line'>                      <span class="n">validPoints</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">p1</span><span class="p">);</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>              <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">validPoints</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>              <span class="p">{</span>
</span><span class='line'>                  <span class="n">cv</span><span class="o">::</span><span class="n">circle</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">validPoints</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="mi">9</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">Scalar</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">cv</span><span class="o">::</span><span class="n">imshow</span><span class="p">(</span><span class="n">windowName</span><span class="p">,</span> <span class="n">frame</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">waitKey</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<h2>Conclusion</h2>

<p>Well&hellip; That wasn&rsquo;t so easy as it seemed at first. Detection tasks are indeed a pain in many cases. Even our example just works in very specific and unrealistic conditions (background with a much different color from our skin, hand is positioned in front of the camera in a certain angle, etc.,&hellip;), but, you know that they say: One step at a time. Until the next tutorial!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parallel Genetic Algorithm in C++ Using TBB]]></title>
    <link href="http://abner-math.github.io/blog/2015/10/11/parallel-genetic-algorithm-in-c-plus-plus-using-tbb/"/>
    <updated>2015-10-11T09:55:50-03:00</updated>
    <id>http://abner-math.github.io/blog/2015/10/11/parallel-genetic-algorithm-in-c-plus-plus-using-tbb</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just finished my AI course, and the idea of <a href="https://en.wikipedia.org/wiki/Evolutionary_computation">evolutionary computing</a> has appealed me incredibly. Basically, evolutionary computing is a set of algorithms inspired by <a href="https://en.wikipedia.org/wiki/Evolution">Charles Darwin&rsquo;s Theory of Evolution</a> with intent of providing some intel on solving optimization problems. On this category, it&rsquo;s included its most prominent example, the <a href="https://en.wikipedia.org/wiki/Genetic_algorithm">Genetic Algorithm</a>.</p>

<p>But what is the Genetic Algorithm? It&rsquo;s really pretty simple (and beautiful): Genetic Algorithm is a heuristic to search for the best solution of a optimization problem (such as the <a href="https://en.wikipedia.org/wiki/Knapsack_problem">Knapsack problem</a>, finding the best parameters of a neural network, and many others&hellip;), the &lsquo;best&rsquo; here having direct analogy to the Theory of Evolution &lsquo;survival of the fittest&rsquo;.</p>

<!-- more --> 


<p>Each &lsquo;<strong>individual</strong>&rsquo; (a.k.a., candidate solution) is codified as a &lsquo;<strong>chromosome</strong>&rsquo;, which is generally representated by a vector of numbers. Each vector value is called &lsquo;<strong>gene</strong>&rsquo;. A set of individuals is called &lsquo;<strong>population</strong>&rsquo;. Those &lsquo;individuals&rsquo; will then compete to have a chance to &lsquo;reproduce&rsquo;, which is the act of mixing two chromosomes to generate a new one, different but similar to both parents. The fitter the individual, the greater the chance it has to reproduce (controlled by a function called &lsquo;<strong>crossover function</strong>&rsquo;, which will always generate two new individuals, both having a certain percentage of genes of both parents. For example, if we define a crossover rate to being 30%, one child will have 30% of parent A&rsquo;s genes and 70% of parent B&rsquo;s genes, while the other will have 70% of parent A&rsquo;s genes and 30% of parent B&rsquo;s genes. There&rsquo;s also a chance of a gene suffer &lsquo;<strong>mutation</strong>&rsquo;, e.g., changing to a random value, during the crossover process). The fitness of an individual is measured through a function called &lsquo;<strong>fitness function</strong>&rsquo;. This is an iterative algorithm, and on each iteration we have a new &lsquo;<strong>generation</strong>&rsquo; of individuals. There are many stop criterias for this algorithm, one of them being the number of generations. Crystal clear? Then let&rsquo;s see a simple pseudo-code, shall we? :))</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function GENETIC_ALGORITHM(population_size, max_num_generations, crossover_rate, mutation_chance) begin
</span><span class='line'>  population = GENERATE_RANDOM_POPULATION(population_size) // GENERATE_RANDOM_POPULATION: problem depent. it depains on chromosome size and domain of allowed values
</span><span class='line'>  for gen = 1 to max_num_generations do
</span><span class='line'>      new_population = { } 
</span><span class='line'>      for i = 1 to population_size / 2 do
</span><span class='line'>          chromosome_a, chromosome_b = SELECT_INDIVIDUALS(population)
</span><span class='line'>          new_chromosome_a, new_chromosome_b = CROSSOVER(chromosome_a, chromosome_b, crossover_rate, mutation_chance)
</span><span class='line'>          INSERT(new_population, new_chromosome_a)
</span><span class='line'>          INSERT(new_population, new_chromosome_b)
</span><span class='line'>      endfor
</span><span class='line'>      population = new_population
</span><span class='line'>  endfor
</span><span class='line'>  return population
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>// On this example, we are using the Roulette method for selecting the individuals. There are many other methods.
</span><span class='line'>function SELECT_INDIVIDUALS(population) begin
</span><span class='line'>  upper_bound = 0
</span><span class='line'>  for each individual in population do
</span><span class='line'>      upper_bound = upper_bound + GET_FITNESS(individual)
</span><span class='line'>  endfor
</span><span class='line'>  i = RAND(1, upper_bound) 
</span><span class='line'>  j = RAND(1, upper_bound)
</span><span class='line'>  child_a = NULL
</span><span class='line'>  child_b = NULL
</span><span class='line'>  count = 0
</span><span class='line'>  while i &gt; 0 or j &gt; 0 do
</span><span class='line'>      if i &gt; 0 then
</span><span class='line'>          i -= GET_FITNESS(population[count])
</span><span class='line'>          if i &lt;= 0 then 
</span><span class='line'>              child_a = population[count] 
</span><span class='line'>          endif
</span><span class='line'>      endif
</span><span class='line'>      if j &gt; 0 then
</span><span class='line'>          j -= GET_FITNESS(population[count])
</span><span class='line'>          if j &lt;= 0 then
</span><span class='line'>              child_b = population[count]
</span><span class='line'>          endif
</span><span class='line'>      endif
</span><span class='line'>      count = count + 1
</span><span class='line'>  endwhile 
</span><span class='line'>  return { child_a, child_b } 
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>function CROSSOVER(parent_a, parent_b, crossover_rate, mutation_chance) begin
</span><span class='line'>  size = SIZE(parent_a) 
</span><span class='line'>  split_index_a = FLOOR(size * crossover_rate)
</span><span class='line'>  split_index_b = FLOOR(size * (1 - crossover_rate))
</span><span class='line'>  child_a = CONCATENATE(SLICE(parent_a, 1, split_index_a), SLICE(parent_b, split_index_a + 1, size))
</span><span class='line'>  child_b = CONCATENATE(SLICE(parent_a, 1, split_index_b), SLICE(parent_b, split_index_b + 1, size))
</span><span class='line'>  for i = 1 to size do
</span><span class='line'>      if RAND(0, 1) &lt;= mutation_chance then
</span><span class='line'>          MUTATE(child_a, i) // MUTATE: problem dependent. it depains on domain of allowed values.
</span><span class='line'>      endif
</span><span class='line'>      if RAND(0, 1) &lt;= mutation_chance then
</span><span class='line'>          MUTATE(child_b, i) 
</span><span class='line'>      endif 
</span><span class='line'>  endfor
</span><span class='line'>  return { child_a, child_b }
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h2>Implementation on C++</h2>

<p>As you can notice, the functions &lsquo;GENERATE_RANDOM_POPULATION&rsquo;, &lsquo;GET_FITNESS&rsquo; and &lsquo;MUTATE&rsquo; are all problem dependents. It depains on informations like chromosome size, domain of allowed values, etc., &hellip; For our implementation on C++, we are letting the user provide pointers to their own-defined functions. Also, the user may use other informations other than numbers to codify their chromosomes. That&rsquo;s why we are going to use templates. Our little program starts as simple (or not) as follows:</p>

<figure class='code'><figcaption><span>genetic_algorithm.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">T</span><span class="o">**</span> <span class="n">geneticAlgorithm</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">chromosomeSize</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">populationSize</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">maxNumGenerations</span><span class="p">,</span> <span class="kt">float</span> <span class="n">crossoverRate</span><span class="p">,</span> <span class="kt">float</span> <span class="n">mutationChance</span><span class="p">,</span>
</span><span class='line'>  <span class="n">T</span><span class="o">**</span> <span class="p">(</span><span class="o">*</span><span class="n">generateRandomPopulation</span><span class="p">)(</span><span class="kt">size_t</span><span class="p">,</span> <span class="kt">size_t</span><span class="p">),</span> <span class="kt">float</span> <span class="p">(</span><span class="o">*</span><span class="n">getFitness</span><span class="p">)(</span><span class="n">T</span><span class="o">*</span><span class="p">),</span> <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">mutate</span><span class="p">)(</span><span class="n">T</span><span class="o">*</span><span class="p">,</span> <span class="kt">size_t</span><span class="p">),</span> <span class="kt">bool</span> <span class="n">maximization</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// TODO</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As C++ is unable to look up an array size on runtime, we also had to add a new parameter to obtain that information (chromosomeSize). Also, notice the parameter &lsquo;maximization&rsquo;. It serves to turn the algorithm flexible to both, maximization and minimization problems.</p>

<p>Let&rsquo;s advance and start implementing the main loop.</p>

<figure class='code'><figcaption><span>genetic_algorithm.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">T</span><span class="o">**</span> <span class="n">geneticAlgorithm</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">chromosomeSize</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">populationSize</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">maxNumGenerations</span><span class="p">,</span> <span class="kt">float</span> <span class="n">crossoverRate</span><span class="p">,</span> <span class="kt">float</span> <span class="n">mutationChance</span><span class="p">,</span>
</span><span class='line'>  <span class="n">T</span><span class="o">**</span> <span class="p">(</span><span class="o">*</span><span class="n">generateRandomPopulation</span><span class="p">)(</span><span class="kt">size_t</span><span class="p">,</span> <span class="kt">size_t</span><span class="p">),</span> <span class="kt">float</span> <span class="p">(</span><span class="o">*</span><span class="n">getFitness</span><span class="p">)(</span><span class="n">T</span><span class="o">*</span><span class="p">),</span> <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">mutate</span><span class="p">)(</span><span class="n">T</span><span class="o">*</span><span class="p">,</span> <span class="kt">size_t</span><span class="p">),</span> <span class="kt">bool</span> <span class="n">maximization</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">T</span><span class="o">**</span> <span class="n">population</span> <span class="o">=</span> <span class="n">generateRandomPopulation</span><span class="p">(</span><span class="n">chromosomeSize</span><span class="p">,</span> <span class="n">populationSize</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">maxNumGenerations</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">float</span><span class="o">*</span> <span class="n">fitnesses</span> <span class="o">=</span> <span class="n">getFitnesses</span><span class="p">(</span><span class="n">population</span><span class="p">,</span> <span class="n">populationSize</span><span class="p">,</span> <span class="n">getFitness</span><span class="p">,</span> <span class="n">maximization</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">// Get upper bound</span>
</span><span class='line'>      <span class="kt">float</span> <span class="n">upperBound</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">populationSize</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">upperBound</span> <span class="o">+=</span> <span class="n">fitnesses</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">T</span><span class="o">**</span> <span class="n">newPopulation</span> <span class="o">=</span> <span class="k">new</span> <span class="n">T</span><span class="o">*</span><span class="p">[</span><span class="n">populationSize</span><span class="p">];</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">populationSize</span><span class="p">;</span> <span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="c1">// TODO</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">delete</span> <span class="n">fitnesses</span><span class="p">;</span>
</span><span class='line'>      <span class="n">clear</span><span class="p">(</span><span class="n">population</span><span class="p">,</span> <span class="n">populationSize</span><span class="p">);</span>
</span><span class='line'>      <span class="n">population</span> <span class="o">=</span> <span class="n">newPopulation</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>    
</span><span class='line'>  <span class="k">return</span> <span class="n">population</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The function &lsquo;getFitnesses&rsquo; is responsible to calculate the fitness value for all individuals. Since it&rsquo;s only necessary to do once for generation, we moved it to outside the inner loop (which populates the new population). We also calculated a &lsquo;upperBound&rsquo;, necessary to implementate our roullete (check the pseudo-code). We then finally allocated memory for the new populate, and after it has been populated, we deallocated memory for the old population (through the method &lsquo;clear&rsquo;) and assigned the reference to the new population. Implementations for the methods &lsquo;getFitnesses&rsquo; and &lsquo;clear&rsquo; can be found below:</p>

<figure class='code'><figcaption><span>genetic_algorithm.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">float</span><span class="o">*</span> <span class="n">getFitnesses</span><span class="p">(</span><span class="n">T</span><span class="o">**</span> <span class="n">population</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">populationSize</span><span class="p">,</span> <span class="kt">float</span> <span class="p">(</span><span class="o">*</span><span class="n">getFitness</span><span class="p">)(</span><span class="n">T</span><span class="o">*</span><span class="p">),</span> <span class="kt">bool</span> <span class="n">maximization</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">float</span><span class="o">*</span> <span class="n">fitnesses</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">float</span><span class="p">[</span><span class="n">populationSize</span><span class="p">];</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">populationSize</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">fitnesses</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">getFitness</span><span class="p">(</span><span class="n">population</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// Invert values on minimization problems</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">maximization</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">float</span> <span class="n">maxFitness</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">numeric_limits</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;::</span><span class="n">min</span><span class="p">();</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">populationSize</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">fitnesses</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">maxFitness</span><span class="p">)</span> <span class="n">maxFitness</span> <span class="o">=</span> <span class="n">fitnesses</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">populationSize</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">fitnesses</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">maxFitness</span> <span class="o">-</span> <span class="n">fitnesses</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">fitnesses</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">void</span> <span class="n">clear</span><span class="p">(</span><span class="n">T</span><span class="o">**</span> <span class="n">population</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">populationSize</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">populationSize</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">delete</span> <span class="n">population</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">delete</span><span class="p">[]</span> <span class="n">population</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that on &lsquo;getFitnesses&rsquo;, we had to &ldquo;invert&rdquo; the fitness values in case of maximization is disabled. That&rsquo;s because the roulette always favours the individuals which have the biggest range of values. So we need to do this little trick by subtracing by the maximum value found.</p>

<p>Questions, please? No? Alright, let&rsquo;s then advance with the implementation of the inner loop.</p>

<figure class='code'><figcaption><span>genetic_algorithm.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">T</span><span class="o">**</span> <span class="n">geneticAlgorithm</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">chromosomeSize</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">populationSize</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">maxNumGenerations</span><span class="p">,</span> <span class="kt">float</span> <span class="n">crossoverRate</span><span class="p">,</span> <span class="kt">float</span> <span class="n">mutationChance</span><span class="p">,</span>
</span><span class='line'>  <span class="n">T</span><span class="o">**</span> <span class="p">(</span><span class="o">*</span><span class="n">generateRandomPopulation</span><span class="p">)(</span><span class="kt">size_t</span><span class="p">,</span> <span class="kt">size_t</span><span class="p">),</span> <span class="kt">float</span> <span class="p">(</span><span class="o">*</span><span class="n">getFitness</span><span class="p">)(</span><span class="n">T</span><span class="o">*</span><span class="p">),</span> <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">mutate</span><span class="p">)(</span><span class="n">T</span><span class="o">*</span><span class="p">,</span> <span class="kt">size_t</span><span class="p">),</span> <span class="kt">bool</span> <span class="n">maximization</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">T</span><span class="o">**</span> <span class="n">population</span> <span class="o">=</span> <span class="n">generateRandomPopulation</span><span class="p">(</span><span class="n">chromosomeSize</span><span class="p">,</span> <span class="n">populationSize</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">maxNumGenerations</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">float</span><span class="o">*</span> <span class="n">fitnesses</span> <span class="o">=</span> <span class="n">getFitnesses</span><span class="p">(</span><span class="n">population</span><span class="p">,</span> <span class="n">populationSize</span><span class="p">,</span> <span class="n">getFitness</span><span class="p">,</span> <span class="n">maximization</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">// Get upper bound</span>
</span><span class='line'>      <span class="kt">float</span> <span class="n">upperBound</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">populationSize</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">upperBound</span> <span class="o">+=</span> <span class="n">fitnesses</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">T</span><span class="o">**</span> <span class="n">newPopulation</span> <span class="o">=</span> <span class="k">new</span> <span class="n">T</span><span class="o">*</span><span class="p">[</span><span class="n">populationSize</span><span class="p">];</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">populationSize</span><span class="p">;</span> <span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">T</span><span class="o">*</span><span class="p">,</span> <span class="n">T</span><span class="o">*&gt;</span> <span class="n">parents</span> <span class="o">=</span> <span class="n">selectIndividuals</span><span class="p">(</span><span class="n">population</span><span class="p">,</span> <span class="n">populationSize</span><span class="p">,</span> <span class="n">fitnesses</span><span class="p">,</span> <span class="n">upperBound</span><span class="p">);</span>
</span><span class='line'>          <span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">T</span><span class="o">*</span><span class="p">,</span> <span class="n">T</span><span class="o">*&gt;</span> <span class="n">children</span> <span class="o">=</span> <span class="n">crossover</span><span class="p">(</span><span class="n">parents</span><span class="p">,</span> <span class="n">chromosomeSize</span><span class="p">,</span> <span class="n">crossoverRate</span><span class="p">,</span> <span class="n">mutationChance</span><span class="p">,</span> <span class="n">mutate</span><span class="p">);</span>
</span><span class='line'>          <span class="n">newPopulation</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">children</span><span class="p">.</span><span class="n">first</span><span class="p">;</span>
</span><span class='line'>          <span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="n">newPopulation</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">children</span><span class="p">.</span><span class="n">second</span><span class="p">;</span>
</span><span class='line'>          <span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>    
</span><span class='line'>      <span class="k">delete</span> <span class="n">fitnesses</span><span class="p">;</span>
</span><span class='line'>      <span class="n">clear</span><span class="p">(</span><span class="n">population</span><span class="p">,</span> <span class="n">populationSize</span><span class="p">);</span>
</span><span class='line'>      <span class="n">population</span> <span class="o">=</span> <span class="n">newPopulation</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">population</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice we are getting the selected individuals through the method &lsquo;selectIndividuals&rsquo;, that returns a pair, the parents which will generate two new children through the method &lsquo;crossover&rsquo;. Let&rsquo;s first take a look at the method &lsquo;selectIndividuals&rsquo;:</p>

<figure class='code'><figcaption><span>genetic_algorithm.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">T</span><span class="o">*</span><span class="p">,</span> <span class="n">T</span><span class="o">*&gt;</span> <span class="n">selectIndividuals</span><span class="p">(</span><span class="n">T</span><span class="o">**</span> <span class="n">population</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">populationSize</span><span class="p">,</span> <span class="kt">float</span><span class="o">*</span> <span class="n">fitnesses</span><span class="p">,</span> <span class="kt">float</span> <span class="n">upperBound</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// Get a number between 0 and upper bound</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">T</span><span class="o">*</span><span class="p">,</span> <span class="n">T</span><span class="o">*&gt;</span> <span class="n">chosen</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span><span class="n">population</span><span class="p">[</span><span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="n">populationSize</span><span class="p">],</span> <span class="n">population</span><span class="p">[</span><span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="n">populationSize</span><span class="p">]);</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">probA</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">rand</span><span class="p">())</span> <span class="o">/</span> <span class="n">RAND_MAX</span> <span class="o">*</span> <span class="n">upperBound</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">probB</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">rand</span><span class="p">())</span> <span class="o">/</span> <span class="n">RAND_MAX</span> <span class="o">*</span> <span class="n">upperBound</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// Rotate the roulette</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">((</span><span class="n">probA</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">probB</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">populationSize</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">probA</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">probA</span> <span class="o">-=</span> <span class="n">fitnesses</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">probA</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="n">chosen</span><span class="p">.</span><span class="n">first</span> <span class="o">=</span> <span class="n">population</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">probB</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">probB</span> <span class="o">-=</span> <span class="n">fitnesses</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">probB</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="n">chosen</span><span class="p">.</span><span class="n">second</span> <span class="o">=</span> <span class="n">population</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">chosen</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It was a pretty straight-forward implementation of the pseudo-code previously shown. We first select two random numbers between 0 and the upper bound, which is the sum of population all fitness values. We then, on a loop, decrement those values until they reach a value less or equal to zero, indicating which the random individual was found (resembling, in fact, the rotation of a roulette). As a picture is worth a thousand words, here&rsquo;s an illustration:</p>

<p style="text-align:center;"><img src="https://camo.githubusercontent.com/c21e4cacd4ad53ff19828005efe560bd4f0f4c20/687474703a2f2f696d6775722e636f6d2f64396c56702e706e67" alt="" /></p>

<p>Hey, did you noticed we assigned the variable &lsquo;chosen&rsquo; initially to two random individuals? Well, that&rsquo;s a protection against when the fitness value for all individuals are equal on minimization problems (can you tell me why would it bug? :)). Crystal clear? Excellent! Now let&rsquo;s check out the &lsquo;crossover&rsquo; function:</p>

<figure class='code'><figcaption><span>genetic_algorithm.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">T</span><span class="o">*</span><span class="p">,</span> <span class="n">T</span><span class="o">*&gt;</span> <span class="n">crossover</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">T</span><span class="o">*</span><span class="p">,</span> <span class="n">T</span><span class="o">*&gt;</span> <span class="n">parents</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">chromosomeSize</span><span class="p">,</span> <span class="kt">float</span> <span class="n">crossoverRate</span><span class="p">,</span> <span class="kt">float</span> <span class="n">mutationChance</span><span class="p">,</span> <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">mutate</span><span class="p">)(</span><span class="n">T</span><span class="o">*</span><span class="p">,</span> <span class="kt">size_t</span><span class="p">))</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">sizeA</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">size_t</span><span class="o">&gt;</span><span class="p">(</span><span class="n">chromosomeSize</span> <span class="o">*</span> <span class="n">crossoverRate</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">sizeB</span> <span class="o">=</span> <span class="n">chromosomeSize</span> <span class="o">-</span> <span class="n">sizeA</span><span class="p">;</span>
</span><span class='line'>  <span class="n">T</span><span class="o">*</span> <span class="n">childA</span> <span class="o">=</span> <span class="k">new</span> <span class="n">T</span><span class="p">[</span><span class="n">chromosomeSize</span><span class="p">];</span>
</span><span class='line'>  <span class="n">T</span><span class="o">*</span> <span class="n">childB</span> <span class="o">=</span> <span class="k">new</span> <span class="n">T</span><span class="p">[</span><span class="n">chromosomeSize</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// Copy first part of chromosomes</span>
</span><span class='line'>  <span class="n">memcpy</span><span class="p">(</span><span class="n">childA</span><span class="p">,</span> <span class="n">parents</span><span class="p">.</span><span class="n">first</span><span class="p">,</span> <span class="n">sizeA</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">T</span><span class="p">));</span>
</span><span class='line'>  <span class="n">memcpy</span><span class="p">(</span><span class="n">childB</span><span class="p">,</span> <span class="n">parents</span><span class="p">.</span><span class="n">second</span><span class="p">,</span> <span class="n">sizeA</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">T</span><span class="p">));</span>
</span><span class='line'>  <span class="c1">// Copy second part of chromosomes</span>
</span><span class='line'>  <span class="n">memcpy</span><span class="p">(</span><span class="n">childA</span> <span class="o">+</span> <span class="n">sizeA</span><span class="p">,</span> <span class="n">parents</span><span class="p">.</span><span class="n">second</span> <span class="o">+</span> <span class="n">sizeA</span><span class="p">,</span> <span class="n">sizeB</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">T</span><span class="p">));</span>
</span><span class='line'>  <span class="n">memcpy</span><span class="p">(</span><span class="n">childB</span> <span class="o">+</span> <span class="n">sizeA</span><span class="p">,</span> <span class="n">parents</span><span class="p">.</span><span class="n">first</span> <span class="o">+</span> <span class="n">sizeA</span><span class="p">,</span> <span class="n">sizeB</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">T</span><span class="p">));</span>
</span><span class='line'>  <span class="c1">// Apply mutation</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">chromosomeSize</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">rand</span><span class="p">())</span> <span class="o">/</span> <span class="n">RAND_MAX</span> <span class="o">&lt;=</span> <span class="n">mutationChance</span><span class="p">)</span> <span class="n">mutate</span><span class="p">(</span><span class="n">childA</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">rand</span><span class="p">())</span> <span class="o">/</span> <span class="n">RAND_MAX</span> <span class="o">&lt;=</span> <span class="n">mutationChance</span><span class="p">)</span> <span class="n">mutate</span><span class="p">(</span><span class="n">childB</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span><span class="n">childA</span><span class="p">,</span> <span class="n">childB</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s nothing much complex happening here. We are just copying parts of chromosomes of both parents to the two new children, following the logic described right on the beginning of this tutorial. Here&rsquo;s an illustration to make it clearer:</p>

<p style="text-align:center;"><a href="https://en.wikipedia.org/wiki/Crossover_(genetic_algorithm)"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/56/OnePointCrossover.svg/231px-OnePointCrossover.svg.png" alt="" /></a></p>

<p>We then finally apply the mutation operator over every gene of the new children with a certain probability. Both, probability and mutation behavior are user-defined. Mutations are very useful to help preventing the solutions to get stuck on a local maxima.</p>

<p>And that&rsquo;s it! That&rsquo;s our simple implementation of Genetic Algorithm on C++! The full code can be found below:</p>

<figure class='code'><figcaption><span>genetic_algorithm.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;memory.h&gt; </span>
</span><span class='line'><span class="cp">#include &lt;time.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;map&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;limits&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cmath&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">T</span><span class="o">*</span><span class="p">,</span> <span class="n">T</span><span class="o">*&gt;</span> <span class="n">selectIndividuals</span><span class="p">(</span><span class="n">T</span><span class="o">**</span> <span class="n">population</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">populationSize</span><span class="p">,</span> <span class="kt">float</span><span class="o">*</span> <span class="n">fitnesses</span><span class="p">,</span> <span class="kt">float</span> <span class="n">upperBound</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// Get a number between 0 and upper bound</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">T</span><span class="o">*</span><span class="p">,</span> <span class="n">T</span><span class="o">*&gt;</span> <span class="n">chosen</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span><span class="n">population</span><span class="p">[</span><span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="n">populationSize</span><span class="p">],</span> <span class="n">population</span><span class="p">[</span><span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="n">populationSize</span><span class="p">]);</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">probA</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">rand</span><span class="p">())</span> <span class="o">/</span> <span class="n">RAND_MAX</span> <span class="o">*</span> <span class="n">upperBound</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">probB</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">rand</span><span class="p">())</span> <span class="o">/</span> <span class="n">RAND_MAX</span> <span class="o">*</span> <span class="n">upperBound</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// Rotate the roulette</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">((</span><span class="n">probA</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">probB</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">populationSize</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">probA</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">probA</span> <span class="o">-=</span> <span class="n">fitnesses</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">probA</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="n">chosen</span><span class="p">.</span><span class="n">first</span> <span class="o">=</span> <span class="n">population</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">probB</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">probB</span> <span class="o">-=</span> <span class="n">fitnesses</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">probB</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="n">chosen</span><span class="p">.</span><span class="n">second</span> <span class="o">=</span> <span class="n">population</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">chosen</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">T</span><span class="o">*</span><span class="p">,</span> <span class="n">T</span><span class="o">*&gt;</span> <span class="n">crossover</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">T</span><span class="o">*</span><span class="p">,</span> <span class="n">T</span><span class="o">*&gt;</span> <span class="n">parents</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">chromosomeSize</span><span class="p">,</span> <span class="kt">float</span> <span class="n">crossoverRate</span><span class="p">,</span> <span class="kt">float</span> <span class="n">mutationChance</span><span class="p">,</span> <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">mutate</span><span class="p">)(</span><span class="n">T</span><span class="o">*</span><span class="p">,</span> <span class="kt">size_t</span><span class="p">))</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">sizeA</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">size_t</span><span class="o">&gt;</span><span class="p">(</span><span class="n">chromosomeSize</span> <span class="o">*</span> <span class="n">crossoverRate</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">sizeB</span> <span class="o">=</span> <span class="n">chromosomeSize</span> <span class="o">-</span> <span class="n">sizeA</span><span class="p">;</span>
</span><span class='line'>  <span class="n">T</span><span class="o">*</span> <span class="n">childA</span> <span class="o">=</span> <span class="k">new</span> <span class="n">T</span><span class="p">[</span><span class="n">chromosomeSize</span><span class="p">];</span>
</span><span class='line'>  <span class="n">T</span><span class="o">*</span> <span class="n">childB</span> <span class="o">=</span> <span class="k">new</span> <span class="n">T</span><span class="p">[</span><span class="n">chromosomeSize</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// Copy first part of chromosomes</span>
</span><span class='line'>  <span class="n">memcpy</span><span class="p">(</span><span class="n">childA</span><span class="p">,</span> <span class="n">parents</span><span class="p">.</span><span class="n">first</span><span class="p">,</span> <span class="n">sizeA</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">T</span><span class="p">));</span>
</span><span class='line'>  <span class="n">memcpy</span><span class="p">(</span><span class="n">childB</span><span class="p">,</span> <span class="n">parents</span><span class="p">.</span><span class="n">second</span><span class="p">,</span> <span class="n">sizeA</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">T</span><span class="p">));</span>
</span><span class='line'>  <span class="c1">// Copy second part of chromosomes</span>
</span><span class='line'>  <span class="n">memcpy</span><span class="p">(</span><span class="n">childA</span> <span class="o">+</span> <span class="n">sizeA</span><span class="p">,</span> <span class="n">parents</span><span class="p">.</span><span class="n">second</span> <span class="o">+</span> <span class="n">sizeA</span><span class="p">,</span> <span class="n">sizeB</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">T</span><span class="p">));</span>
</span><span class='line'>  <span class="n">memcpy</span><span class="p">(</span><span class="n">childB</span> <span class="o">+</span> <span class="n">sizeA</span><span class="p">,</span> <span class="n">parents</span><span class="p">.</span><span class="n">first</span> <span class="o">+</span> <span class="n">sizeA</span><span class="p">,</span> <span class="n">sizeB</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">T</span><span class="p">));</span>
</span><span class='line'>  <span class="c1">// Apply mutation</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">chromosomeSize</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">rand</span><span class="p">())</span> <span class="o">/</span> <span class="n">RAND_MAX</span> <span class="o">&lt;=</span> <span class="n">mutationChance</span><span class="p">)</span> <span class="n">mutate</span><span class="p">(</span><span class="n">childA</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">rand</span><span class="p">())</span> <span class="o">/</span> <span class="n">RAND_MAX</span> <span class="o">&lt;=</span> <span class="n">mutationChance</span><span class="p">)</span> <span class="n">mutate</span><span class="p">(</span><span class="n">childB</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span><span class="n">childA</span><span class="p">,</span> <span class="n">childB</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">float</span><span class="o">*</span> <span class="n">getFitnesses</span><span class="p">(</span><span class="n">T</span><span class="o">**</span> <span class="n">population</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">populationSize</span><span class="p">,</span> <span class="kt">float</span> <span class="p">(</span><span class="o">*</span><span class="n">getFitness</span><span class="p">)(</span><span class="n">T</span><span class="o">*</span><span class="p">),</span> <span class="kt">bool</span> <span class="n">maximization</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">float</span><span class="o">*</span> <span class="n">fitnesses</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">float</span><span class="p">[</span><span class="n">populationSize</span><span class="p">];</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">populationSize</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">fitnesses</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">getFitness</span><span class="p">(</span><span class="n">population</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// Invert values on minimization problems</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">maximization</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">float</span> <span class="n">maxFitness</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">numeric_limits</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;::</span><span class="n">min</span><span class="p">();</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">populationSize</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">fitnesses</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">maxFitness</span><span class="p">)</span> <span class="n">maxFitness</span> <span class="o">=</span> <span class="n">fitnesses</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">populationSize</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">fitnesses</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">maxFitness</span> <span class="o">-</span> <span class="n">fitnesses</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">fitnesses</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">void</span> <span class="n">clear</span><span class="p">(</span><span class="n">T</span><span class="o">**</span> <span class="n">population</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">populationSize</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">populationSize</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">delete</span> <span class="n">population</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">delete</span><span class="p">[]</span> <span class="n">population</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">T</span><span class="o">**</span> <span class="n">geneticAlgorithm</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">chromosomeSize</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">populationSize</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">maxNumGenerations</span><span class="p">,</span> <span class="kt">float</span> <span class="n">crossoverRate</span><span class="p">,</span> <span class="kt">float</span> <span class="n">mutationChance</span><span class="p">,</span>
</span><span class='line'>  <span class="n">T</span><span class="o">**</span> <span class="p">(</span><span class="o">*</span><span class="n">generateRandomPopulation</span><span class="p">)(</span><span class="kt">size_t</span><span class="p">,</span> <span class="kt">size_t</span><span class="p">),</span> <span class="kt">float</span> <span class="p">(</span><span class="o">*</span><span class="n">getFitness</span><span class="p">)(</span><span class="n">T</span><span class="o">*</span><span class="p">),</span> <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">mutate</span><span class="p">)(</span><span class="n">T</span><span class="o">*</span><span class="p">,</span> <span class="kt">size_t</span><span class="p">),</span> <span class="kt">bool</span> <span class="n">maximization</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">T</span><span class="o">**</span> <span class="n">population</span> <span class="o">=</span> <span class="n">generateRandomPopulation</span><span class="p">(</span><span class="n">chromosomeSize</span><span class="p">,</span> <span class="n">populationSize</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">maxNumGenerations</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">float</span><span class="o">*</span> <span class="n">fitnesses</span> <span class="o">=</span> <span class="n">getFitnesses</span><span class="p">(</span><span class="n">population</span><span class="p">,</span> <span class="n">populationSize</span><span class="p">,</span> <span class="n">getFitness</span><span class="p">,</span> <span class="n">maximization</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">// Get upper bound</span>
</span><span class='line'>      <span class="kt">float</span> <span class="n">upperBound</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">populationSize</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">upperBound</span> <span class="o">+=</span> <span class="n">fitnesses</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">T</span><span class="o">**</span> <span class="n">newPopulation</span> <span class="o">=</span> <span class="k">new</span> <span class="n">T</span><span class="o">*</span><span class="p">[</span><span class="n">populationSize</span><span class="p">];</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">populationSize</span><span class="p">;</span> <span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">T</span><span class="o">*</span><span class="p">,</span> <span class="n">T</span><span class="o">*&gt;</span> <span class="n">parents</span> <span class="o">=</span> <span class="n">selectIndividuals</span><span class="p">(</span><span class="n">population</span><span class="p">,</span> <span class="n">populationSize</span><span class="p">,</span> <span class="n">fitnesses</span><span class="p">,</span> <span class="n">upperBound</span><span class="p">);</span>
</span><span class='line'>          <span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">T</span><span class="o">*</span><span class="p">,</span> <span class="n">T</span><span class="o">*&gt;</span> <span class="n">children</span> <span class="o">=</span> <span class="n">crossover</span><span class="p">(</span><span class="n">parents</span><span class="p">,</span> <span class="n">chromosomeSize</span><span class="p">,</span> <span class="n">crossoverRate</span><span class="p">,</span> <span class="n">mutationChance</span><span class="p">,</span> <span class="n">mutate</span><span class="p">);</span>
</span><span class='line'>          <span class="n">newPopulation</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">children</span><span class="p">.</span><span class="n">first</span><span class="p">;</span>
</span><span class='line'>          <span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="n">newPopulation</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">children</span><span class="p">.</span><span class="n">second</span><span class="p">;</span>
</span><span class='line'>          <span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>    
</span><span class='line'>      <span class="k">delete</span> <span class="n">fitnesses</span><span class="p">;</span>
</span><span class='line'>      <span class="n">clear</span><span class="p">(</span><span class="n">population</span><span class="p">,</span> <span class="n">populationSize</span><span class="p">);</span>
</span><span class='line'>      <span class="n">population</span> <span class="o">=</span> <span class="n">newPopulation</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">population</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>Algorithm parallelization</h2>

<p>If you read until here, you may feel cheated, since we didn&rsquo;t even mention the word &lsquo;parallel&rsquo;. Fear not, my dear friend! Now is the time! However, we must first analyze what can and what cannot be parallelized.</p>

<p>If you give a quick look at the algorithm we just implemented, we may notice the existence of two loops, one nested in another, inside the function &lsquo;geneticAlgorithm&rsquo;. There&rsquo;s also a loop for calculating the fitness value for all individuals (function &lsquo;getFitnesses&rsquo;). There&rsquo;s a loop for applying the mutation operator (function &lsquo;crossover&rsquo;) and finally there&rsquo;s a loop for selecting the individuals (function &lsquo;selectIndividuals&rsquo;). So far we have five candidates. Which of them can be parallelized? All (yay!)? None (awww&hellip;)?</p>

<ul>
<li><strong>Candidate I: The outer loop on &lsquo;geneticAlgorithm&rsquo;</strong> <br>
That&hellip; cannot be parallelized. Aww&hellip; The reason is simple: The individuals of the next generation depains of the individuals of the previous generation. We cannot skip to the next generation without knowing which individuals composed the previous generation.</li>
<li><strong>Candidate II: The inner loop on &lsquo;geneticAlgorithm&rsquo;</strong> <br>
That&hellip; can be parallelized! Yay! And the reason is as simple as the previous one: We can generate new children parallely (you see, even in the real world, parents can give birth to many children at once). In fact, we are not dealing with any collateral effect during the children creation, other than adding them to a write-only list without collision (and which will be just read on the next iteration).</li>
<li><strong>Candidate III: Loop on &lsquo;getFitnesses&rsquo;</strong> <br>
You may be asking: Which loop? There are actually three on that function, but only one worth to be parallelized. Why? Because the computation being accomplished on last two is too low. The overhead of starting new threads would surpass the computation of the block itself. We just have the first loop now, and that&hellip; can be parallelized! Yay! Calculating the fitness for an individual <em>doesn&rsquo;t</em> depains of the fitness of the other individuals of a population, so it can be easily be done on parallel.</li>
<li><strong>Candidate IV: Mutation loop on &lsquo;crossover&rsquo;</strong> <br>
Though it can be parallelized, the mutation operator is too simple (it just assigns the position to a random value), so the overhead wouldn&rsquo;t compensate. So, aww&hellip;</li>
<li><strong>Candidate V: Roulette loop on &lsquo;selectIndividuals&rsquo;</strong> <br>
That&rsquo;s a though one, since we need to syncronize two values (probA and probB) among several threads. Since we use the two values during the whole block, the lock would certainly break the parallelism and turn everything in a single-thread like schema! So, the answer is no. Aww&hellip;</li>
</ul>


<p>Our score was 2/5, not bad, not bad at all. ;)
Now that we know <em>what</em> can be parallelized, let&rsquo;s find out <em>how</em> we can do it.</p>

<p>We can do it using the library <a href="https://www.threadingbuildingblocks.org">TBB</a>, which stands for <strong>T</strong>hreading <strong>B</strong>uilding <strong>B</strong>blocks. It provides several features for parallelism, such as multi-threads, locks, concurrent containers, etc., &hellip; Everything on a high-level abstraction. Of course it&rsquo;s not our intent to explain the details of the library, so let&rsquo;s start with the simplest example: <strong><a href="https://www.threadingbuildingblocks.org/docs/help/reference/algorithms/parallel_for_func.htm">the parallel for</a></strong>.</p>

<p>As the name indicates, the parallel for is a kind of loop where the iterations are executed in parallel. The syntax is as follow:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cp">#include &lt;tbb/parallel_for.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">tbb</span><span class="o">::</span><span class="n">parallel_for</span><span class="p">(</span><span class="k">const</span> <span class="n">Range</span><span class="o">&amp;</span> <span class="k">const</span> <span class="n">Body</span><span class="o">&amp;</span> <span class="n">body</span><span class="p">,</span> <span class="p">[,</span> <span class="n">partitioner</span><span class="p">[,</span> <span class="n">task_group_context</span><span class="o">&amp;</span> <span class="n">group</span><span class="p">]]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s an example using <strong><a href="https://www.threadingbuildingblocks.org/docs/help/reference/algorithms/range_concept/blocked_range_cls.htm">blocked_range</a></strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cp">#include &lt;tbb/parallel_for.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;tbb/blocked_range.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">values</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">tbb</span><span class="o">::</span><span class="n">parallel_for</span><span class="p">(</span><span class="n">tbb</span><span class="o">::</span><span class="n">blocked_range</span><span class="o">&lt;</span><span class="kt">size_t</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">values</span><span class="p">.</span><span class="n">size</span><span class="p">()),</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">count</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">values</span><span class="p">](</span><span class="k">const</span> <span class="n">tbb</span><span class="o">::</span><span class="n">blocked_range</span><span class="o">&lt;</span><span class="kt">size_t</span><span class="o">&gt;&amp;</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">x</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">count</span> <span class="o">+=</span> <span class="n">values</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>On the above example, we are summing the values of a vector in parallel. Notice the use of a lambda function to implement the &lsquo;body&rsquo; of the parallel for. It always expects to receive a range of same type as defined on the &lsquo;range&rsquo; parameter (in this case, size_t). A &lsquo;blocked_range&rsquo; expects to receive two iterable values, a begin and an end, which can later be accessed inside the &lsquo;parallel_for&rsquo; body.
The TBB then is responsible to not assign any repeated range value for any thread. In fact, it will create <em>x</em> threads initially, where <em>x</em> is the number of cores of your processor, and will assign the first <em>x</em> values of the range to those threads. The next range values will then be distributed on a queue-like schema.</p>

<p>But enough of theory! That&rsquo;s all we need to know for while. Let&rsquo;s starting turning the inner loop on &lsquo;geneticAlgorithm&rsquo; into a parallel for!</p>

<figure class='code'><figcaption><span>parallel_genetic_algorithm.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">T</span><span class="o">**</span> <span class="n">geneticAlgorithm</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">chromosomeSize</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">populationSize</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">maxNumGenerations</span><span class="p">,</span> <span class="kt">float</span> <span class="n">crossoverRate</span><span class="p">,</span> <span class="kt">float</span> <span class="n">mutationChance</span><span class="p">,</span>
</span><span class='line'>  <span class="n">T</span><span class="o">**</span> <span class="p">(</span><span class="o">*</span><span class="n">generateRandomPopulation</span><span class="p">)(</span><span class="kt">size_t</span><span class="p">,</span> <span class="kt">size_t</span><span class="p">),</span> <span class="kt">float</span> <span class="p">(</span><span class="o">*</span><span class="n">getFitness</span><span class="p">)(</span><span class="n">T</span><span class="o">*</span><span class="p">),</span> <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">mutate</span><span class="p">)(</span><span class="n">T</span><span class="o">*</span><span class="p">,</span> <span class="kt">size_t</span><span class="p">),</span> <span class="kt">bool</span> <span class="n">maximization</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">T</span><span class="o">**</span> <span class="n">population</span> <span class="o">=</span> <span class="n">generateRandomPopulation</span><span class="p">(</span><span class="n">chromosomeSize</span><span class="p">,</span> <span class="n">populationSize</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">maxNumGenerations</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="p">...</span>
</span><span class='line'>      <span class="n">tbb</span><span class="o">::</span><span class="n">parallel_for</span><span class="p">(</span><span class="n">tbb</span><span class="o">::</span><span class="n">blocked_range</span><span class="o">&lt;</span><span class="kt">size_t</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">populationSize</span><span class="p">),</span> <span class="p">[</span><span class="o">=</span><span class="p">](</span><span class="k">const</span> <span class="n">tbb</span><span class="o">::</span><span class="n">blocked_range</span><span class="o">&lt;</span><span class="kt">size_t</span><span class="o">&gt;&amp;</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">x</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="n">j</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">T</span><span class="o">*</span><span class="p">,</span> <span class="n">T</span><span class="o">*&gt;</span> <span class="n">parents</span> <span class="o">=</span> <span class="n">selectIndividuals</span><span class="p">(</span><span class="n">population</span><span class="p">,</span> <span class="n">populationSize</span><span class="p">,</span> <span class="n">fitnesses</span><span class="p">,</span> <span class="n">upperBound</span><span class="p">);</span>
</span><span class='line'>              <span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">T</span><span class="o">*</span><span class="p">,</span> <span class="n">T</span><span class="o">*&gt;</span> <span class="n">children</span> <span class="o">=</span> <span class="n">crossover</span><span class="p">(</span><span class="n">parents</span><span class="p">,</span> <span class="n">chromosomeSize</span><span class="p">,</span> <span class="n">crossoverRate</span><span class="p">,</span> <span class="n">mutationChance</span><span class="p">,</span> <span class="n">mutate</span><span class="p">);</span>
</span><span class='line'>              <span class="n">newPopulation</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">children</span><span class="p">.</span><span class="n">first</span><span class="p">;</span>
</span><span class='line'>              <span class="n">newPopulation</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">children</span><span class="p">.</span><span class="n">second</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">});</span>  
</span><span class='line'>      <span class="p">...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">population</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That was pretty simple. We just simply created a &lsquo;parallel_for&rsquo; with a blocked range from 0 to populationSize (identical to the previous for limits), and on the parallel_for body we almost use the same block of code, with the difference we don&rsquo;t increment the counter &lsquo;j&rsquo; before add a new child. Instead of, we increment += 2 on the internal for loop. The reason we decided to adopt this logic instead of previous one is simple: Incrementing the range inside the body would imply in a lock <em>before</em> adding a new child, hence slowing the process unnecessarily. We also don&rsquo;t need a lock before assigning a new child to the new population, because it&rsquo;s a write-only array without key collision (we don&rsquo;t assign two or more to the same index).</p>

<blockquote><p>OBS: As we are using lambda functions, don&rsquo;t forget to add the <code>-std=c++11</code> flag to the compiler, since lambda functions are a feature from C++11. Also, don&rsquo;t forget to link the TBB library (<code>-ltbb</code>).</p></blockquote>

<p>Now let&rsquo;s parallelize our second candidate, the function &lsquo;getFitnesses&rsquo;. That&rsquo;s also very simple. Indeed, simpler than the previous one.</p>

<figure class='code'><figcaption><span>parallel_genetic_algorithm.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="kt">float</span><span class="o">*</span> <span class="nf">getFitnesses</span><span class="p">(</span><span class="n">T</span><span class="o">**</span> <span class="n">population</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">populationSize</span><span class="p">,</span> <span class="kt">float</span> <span class="p">(</span><span class="o">*</span><span class="n">getFitness</span><span class="p">)(</span><span class="n">T</span><span class="o">*</span><span class="p">),</span> <span class="kt">bool</span> <span class="n">maximization</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">float</span><span class="o">*</span> <span class="n">fitnesses</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">float</span><span class="p">[</span><span class="n">populationSize</span><span class="p">];</span>
</span><span class='line'>  <span class="n">tbb</span><span class="o">::</span><span class="n">parallel_for</span><span class="p">(</span><span class="n">tbb</span><span class="o">::</span><span class="n">blocked_range</span><span class="o">&lt;</span><span class="kt">size_t</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">populationSize</span><span class="p">),</span> <span class="p">[</span><span class="o">=</span><span class="p">](</span><span class="k">const</span> <span class="n">tbb</span><span class="o">::</span><span class="n">blocked_range</span><span class="o">&lt;</span><span class="kt">size_t</span><span class="o">&gt;&amp;</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">x</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">fitnesses</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">getFitness</span><span class="p">(</span><span class="n">population</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">fitnesses</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s all! You can check the full code here:</p>

<figure class='code'><figcaption><span>parallel_genetic_algorithm.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;memory.h&gt; </span>
</span><span class='line'><span class="cp">#include &lt;time.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;map&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;limits&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cmath&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;tbb/parallel_for.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;tbb/blocked_range.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">T</span><span class="o">*</span><span class="p">,</span> <span class="n">T</span><span class="o">*&gt;</span> <span class="n">selectIndividuals</span><span class="p">(</span><span class="n">T</span><span class="o">**</span> <span class="n">population</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">populationSize</span><span class="p">,</span> <span class="kt">float</span><span class="o">*</span> <span class="n">fitnesses</span><span class="p">,</span> <span class="kt">float</span> <span class="n">upperBound</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// Get a number between 0 and upper bound</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">T</span><span class="o">*</span><span class="p">,</span> <span class="n">T</span><span class="o">*&gt;</span> <span class="n">chosen</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span><span class="n">population</span><span class="p">[</span><span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="n">populationSize</span><span class="p">],</span> <span class="n">population</span><span class="p">[</span><span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="n">populationSize</span><span class="p">]);</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">probA</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">rand</span><span class="p">())</span> <span class="o">/</span> <span class="n">RAND_MAX</span> <span class="o">*</span> <span class="n">upperBound</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">probB</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">rand</span><span class="p">())</span> <span class="o">/</span> <span class="n">RAND_MAX</span> <span class="o">*</span> <span class="n">upperBound</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// Rotate the roulette</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">((</span><span class="n">probA</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">probB</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">populationSize</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">probA</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">probA</span> <span class="o">-=</span> <span class="n">fitnesses</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">probA</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="n">chosen</span><span class="p">.</span><span class="n">first</span> <span class="o">=</span> <span class="n">population</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">probB</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">probB</span> <span class="o">-=</span> <span class="n">fitnesses</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">probB</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="n">chosen</span><span class="p">.</span><span class="n">second</span> <span class="o">=</span> <span class="n">population</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">chosen</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">T</span><span class="o">*</span><span class="p">,</span> <span class="n">T</span><span class="o">*&gt;</span> <span class="n">crossover</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">T</span><span class="o">*</span><span class="p">,</span> <span class="n">T</span><span class="o">*&gt;</span> <span class="n">parents</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">chromosomeSize</span><span class="p">,</span> <span class="kt">float</span> <span class="n">crossoverRate</span><span class="p">,</span> <span class="kt">float</span> <span class="n">mutationChance</span><span class="p">,</span> <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">mutate</span><span class="p">)(</span><span class="n">T</span><span class="o">*</span><span class="p">,</span> <span class="kt">size_t</span><span class="p">))</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">sizeA</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">size_t</span><span class="o">&gt;</span><span class="p">(</span><span class="n">chromosomeSize</span> <span class="o">*</span> <span class="n">crossoverRate</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">sizeB</span> <span class="o">=</span> <span class="n">chromosomeSize</span> <span class="o">-</span> <span class="n">sizeA</span><span class="p">;</span>
</span><span class='line'>  <span class="n">T</span><span class="o">*</span> <span class="n">childA</span> <span class="o">=</span> <span class="k">new</span> <span class="n">T</span><span class="p">[</span><span class="n">chromosomeSize</span><span class="p">];</span>
</span><span class='line'>  <span class="n">T</span><span class="o">*</span> <span class="n">childB</span> <span class="o">=</span> <span class="k">new</span> <span class="n">T</span><span class="p">[</span><span class="n">chromosomeSize</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// Copy first part of chromosomes</span>
</span><span class='line'>  <span class="n">memcpy</span><span class="p">(</span><span class="n">childA</span><span class="p">,</span> <span class="n">parents</span><span class="p">.</span><span class="n">first</span><span class="p">,</span> <span class="n">sizeA</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">T</span><span class="p">));</span>
</span><span class='line'>  <span class="n">memcpy</span><span class="p">(</span><span class="n">childB</span><span class="p">,</span> <span class="n">parents</span><span class="p">.</span><span class="n">second</span><span class="p">,</span> <span class="n">sizeA</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">T</span><span class="p">));</span>
</span><span class='line'>  <span class="c1">// Copy second part of chromosomes</span>
</span><span class='line'>  <span class="n">memcpy</span><span class="p">(</span><span class="n">childA</span> <span class="o">+</span> <span class="n">sizeA</span><span class="p">,</span> <span class="n">parents</span><span class="p">.</span><span class="n">second</span> <span class="o">+</span> <span class="n">sizeA</span><span class="p">,</span> <span class="n">sizeB</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">T</span><span class="p">));</span>
</span><span class='line'>  <span class="n">memcpy</span><span class="p">(</span><span class="n">childB</span> <span class="o">+</span> <span class="n">sizeA</span><span class="p">,</span> <span class="n">parents</span><span class="p">.</span><span class="n">first</span> <span class="o">+</span> <span class="n">sizeA</span><span class="p">,</span> <span class="n">sizeB</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">T</span><span class="p">));</span>
</span><span class='line'>  <span class="c1">// Apply mutation</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">chromosomeSize</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">rand</span><span class="p">())</span> <span class="o">/</span> <span class="n">RAND_MAX</span> <span class="o">&lt;=</span> <span class="n">mutationChance</span><span class="p">)</span> <span class="n">mutate</span><span class="p">(</span><span class="n">childA</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">rand</span><span class="p">())</span> <span class="o">/</span> <span class="n">RAND_MAX</span> <span class="o">&lt;=</span> <span class="n">mutationChance</span><span class="p">)</span> <span class="n">mutate</span><span class="p">(</span><span class="n">childB</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span><span class="n">childA</span><span class="p">,</span> <span class="n">childB</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">float</span><span class="o">*</span> <span class="n">getFitnesses</span><span class="p">(</span><span class="n">T</span><span class="o">**</span> <span class="n">population</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">populationSize</span><span class="p">,</span> <span class="kt">float</span> <span class="p">(</span><span class="o">*</span><span class="n">getFitness</span><span class="p">)(</span><span class="n">T</span><span class="o">*</span><span class="p">),</span> <span class="kt">bool</span> <span class="n">maximization</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">float</span><span class="o">*</span> <span class="n">fitnesses</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">float</span><span class="p">[</span><span class="n">populationSize</span><span class="p">];</span>
</span><span class='line'>  <span class="n">tbb</span><span class="o">::</span><span class="n">parallel_for</span><span class="p">(</span><span class="n">tbb</span><span class="o">::</span><span class="n">blocked_range</span><span class="o">&lt;</span><span class="kt">size_t</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">populationSize</span><span class="p">),</span> <span class="p">[</span><span class="o">=</span><span class="p">](</span><span class="k">const</span> <span class="n">tbb</span><span class="o">::</span><span class="n">blocked_range</span><span class="o">&lt;</span><span class="kt">size_t</span><span class="o">&gt;&amp;</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">x</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">fitnesses</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">getFitness</span><span class="p">(</span><span class="n">population</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="c1">// Invert values on minimization problems</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">maximization</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">float</span> <span class="n">maxFitness</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">numeric_limits</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;::</span><span class="n">min</span><span class="p">();</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">populationSize</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">fitnesses</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">maxFitness</span><span class="p">)</span> <span class="n">maxFitness</span> <span class="o">=</span> <span class="n">fitnesses</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">populationSize</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">fitnesses</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">maxFitness</span> <span class="o">-</span> <span class="n">fitnesses</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">fitnesses</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">void</span> <span class="n">clear</span><span class="p">(</span><span class="n">T</span><span class="o">**</span> <span class="n">population</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">populationSize</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">populationSize</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">delete</span> <span class="n">population</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">delete</span><span class="p">[]</span> <span class="n">population</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">T</span><span class="o">**</span> <span class="n">geneticAlgorithm</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">chromosomeSize</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">populationSize</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">maxNumGenerations</span><span class="p">,</span> <span class="kt">float</span> <span class="n">crossoverRate</span><span class="p">,</span> <span class="kt">float</span> <span class="n">mutationChance</span><span class="p">,</span>
</span><span class='line'>  <span class="n">T</span><span class="o">**</span> <span class="p">(</span><span class="o">*</span><span class="n">generateRandomPopulation</span><span class="p">)(</span><span class="kt">size_t</span><span class="p">,</span> <span class="kt">size_t</span><span class="p">),</span> <span class="kt">float</span> <span class="p">(</span><span class="o">*</span><span class="n">getFitness</span><span class="p">)(</span><span class="n">T</span><span class="o">*</span><span class="p">),</span> <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">mutate</span><span class="p">)(</span><span class="n">T</span><span class="o">*</span><span class="p">,</span> <span class="kt">size_t</span><span class="p">),</span> <span class="kt">bool</span> <span class="n">maximization</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">T</span><span class="o">**</span> <span class="n">population</span> <span class="o">=</span> <span class="n">generateRandomPopulation</span><span class="p">(</span><span class="n">chromosomeSize</span><span class="p">,</span> <span class="n">populationSize</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">maxNumGenerations</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">float</span><span class="o">*</span> <span class="n">fitnesses</span> <span class="o">=</span> <span class="n">getFitnesses</span><span class="p">(</span><span class="n">population</span><span class="p">,</span> <span class="n">populationSize</span><span class="p">,</span> <span class="n">getFitness</span><span class="p">,</span> <span class="n">maximization</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">// Get upper bound</span>
</span><span class='line'>      <span class="kt">float</span> <span class="n">upperBound</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">populationSize</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">upperBound</span> <span class="o">+=</span> <span class="n">fitnesses</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">T</span><span class="o">**</span> <span class="n">newPopulation</span> <span class="o">=</span> <span class="k">new</span> <span class="n">T</span><span class="o">*</span><span class="p">[</span><span class="n">populationSize</span><span class="p">];</span>
</span><span class='line'>      <span class="n">tbb</span><span class="o">::</span><span class="n">parallel_for</span><span class="p">(</span><span class="n">tbb</span><span class="o">::</span><span class="n">blocked_range</span><span class="o">&lt;</span><span class="kt">size_t</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">populationSize</span><span class="p">),</span> <span class="p">[</span><span class="o">=</span><span class="p">](</span><span class="k">const</span> <span class="n">tbb</span><span class="o">::</span><span class="n">blocked_range</span><span class="o">&lt;</span><span class="kt">size_t</span><span class="o">&gt;&amp;</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">x</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="n">j</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">T</span><span class="o">*</span><span class="p">,</span> <span class="n">T</span><span class="o">*&gt;</span> <span class="n">parents</span> <span class="o">=</span> <span class="n">selectIndividuals</span><span class="p">(</span><span class="n">population</span><span class="p">,</span> <span class="n">populationSize</span><span class="p">,</span> <span class="n">fitnesses</span><span class="p">,</span> <span class="n">upperBound</span><span class="p">);</span>
</span><span class='line'>              <span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">T</span><span class="o">*</span><span class="p">,</span> <span class="n">T</span><span class="o">*&gt;</span> <span class="n">children</span> <span class="o">=</span> <span class="n">crossover</span><span class="p">(</span><span class="n">parents</span><span class="p">,</span> <span class="n">chromosomeSize</span><span class="p">,</span> <span class="n">crossoverRate</span><span class="p">,</span> <span class="n">mutationChance</span><span class="p">,</span> <span class="n">mutate</span><span class="p">);</span>
</span><span class='line'>              <span class="n">newPopulation</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">children</span><span class="p">.</span><span class="n">first</span><span class="p">;</span>
</span><span class='line'>              <span class="n">newPopulation</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">children</span><span class="p">.</span><span class="n">second</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">});</span>  
</span><span class='line'>      <span class="k">delete</span> <span class="n">fitnesses</span><span class="p">;</span>
</span><span class='line'>      <span class="n">clear</span><span class="p">(</span><span class="n">population</span><span class="p">,</span> <span class="n">populationSize</span><span class="p">);</span>
</span><span class='line'>      <span class="n">population</span> <span class="o">=</span> <span class="n">newPopulation</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">population</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>A concrete example: Finding roots of a polynomium</h2>

<p>Until now, we just touched the realm of theory, without showing the practicability of the genetic algorithms. After all, for what they are for? So here&rsquo;s a &ldquo;simple&rdquo; minimization problem: Given any polynomium:</p>

<p>a<em>x<sup>n</sup> + b</em>x<sup>n - 1</sup> + cx<sup>n - 2</sup> + &hellip; + C</p>

<p>The objective is to find the roots of the equation, e.g., the value of &lsquo;x&rsquo; which evaluates the expression to zero when substituted.</p>

<p>I chose this problem because it&rsquo;s non-trivial and in fact proved to be NP-Hard. However, numerical approximations do exist. So why not use a genetic algorithm to provide us an approximated result too?</p>

<p>Let&rsquo;s formalize our problem:</p>

<p><strong>Input:</strong> <br>
A real value X indicating the min value of a gene allowed; A real value Y indicating the max value of a gene allowed (X &lt; Y); An integer value N indicating the population size (N > 10); An integer value M indicating the maximum number of generations (M > 0); A real value C indicating the mutation chance (0 &lt;= C &lt;= 1); A real value P indicating the crossover rate (0 &lt;= P &lt;= 1); An integer value I (I > 0) followed by I real values, the coefficients of the polynomial equation. For example: <code>4 3 4.5 2 1</code> translates to 3<em>x<sup>3</sup> + 4.5</em>x<sup>2</sup> + 2x + 1.</p>

<p><strong>Output:</strong> <br>
A list of the 10 most fittest individuals after M generations.</p>

<p>Our first step: Let&rsquo;s start reading the input.</p>

<figure class='code'><figcaption><span>root_finder.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="kt">float</span> <span class="n">minValue</span><span class="p">;</span>
</span><span class='line'><span class="kt">float</span> <span class="n">maxValue</span><span class="p">;</span>
</span><span class='line'><span class="kt">size_t</span> <span class="n">populationSize</span><span class="p">;</span>
</span><span class='line'><span class="kt">size_t</span> <span class="n">maxNumGenerations</span><span class="p">;</span>
</span><span class='line'><span class="kt">float</span> <span class="n">mutationChance</span><span class="p">;</span>
</span><span class='line'><span class="kt">float</span> <span class="n">crossoverRate</span><span class="p">;</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span> <span class="n">coefficients</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">minValue</span> <span class="o">&gt;&gt;</span> <span class="n">maxValue</span> <span class="o">&gt;&gt;</span> <span class="n">populationSize</span> <span class="o">&gt;&gt;</span> <span class="n">maxNumGenerations</span> <span class="o">&gt;&gt;</span> <span class="n">mutationChance</span> <span class="o">&gt;&gt;</span> <span class="n">crossoverRate</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">numCoefficients</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">numCoefficients</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numCoefficients</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">float</span> <span class="n">coefficient</span><span class="p">;</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">coefficient</span><span class="p">;</span>
</span><span class='line'>      <span class="n">coefficients</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">coefficient</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s a piece of cake. The next step is to create our own definition of the fitness function. It seems that simply substituing the value of &lsquo;x&rsquo; on the polynomial expression will be enough. The closer the result it is to zero, the fitter the solution. As we are dealing with a minimization problem, we have to be careful to prevent negative values.</p>

<figure class='code'><figcaption><span>root_finder.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="kt">float</span> <span class="nf">getFitness</span><span class="p">(</span><span class="kt">float</span><span class="o">*</span> <span class="n">chromosome</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">x</span> <span class="o">=</span> <span class="n">chromosome</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">value</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">coefficients</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">value</span> <span class="o">+=</span> <span class="n">coefficients</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">std</span><span class="o">::</span><span class="n">pow</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">coefficients</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">abs</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s implementate the functions &lsquo;generateRandomPopulation&rsquo; and &lsquo;mutate&rsquo;. Those are also very simple:</p>

<figure class='code'><figcaption><span>root_finder.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="kt">float</span> <span class="nf">getRandomValue</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">r</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">rand</span><span class="p">())</span> <span class="o">/</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">RAND_MAX</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">r</span> <span class="o">*</span> <span class="p">(</span><span class="n">maxValue</span> <span class="o">-</span> <span class="n">minValue</span><span class="p">)</span> <span class="o">+</span> <span class="n">minValue</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">float</span><span class="o">**</span> <span class="nf">generateRandomPopulation</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">chromosomeSize</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">populationSize</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">float</span><span class="o">**</span> <span class="n">population</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">float</span><span class="o">*</span><span class="p">[</span><span class="n">populationSize</span><span class="p">];</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">populationSize</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">population</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">float</span><span class="p">[</span><span class="n">chromosomeSize</span><span class="p">];</span>
</span><span class='line'>      <span class="n">population</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">getRandomValue</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">population</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">mutate</span><span class="p">(</span><span class="kt">float</span><span class="o">*</span> <span class="n">chromosome</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">index</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">chromosome</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="n">getRandomValue</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
Notice we are using chromosome of size 1. That&rsquo;s because we just want to find one value (the value of &lsquo;x&rsquo;). Clear? Excellent, because that&rsquo;s all we need! Now let&rsquo;s just connect the dots:</p>

<figure class='code'><figcaption><span>root_finder.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">minValue</span> <span class="o">&gt;&gt;</span> <span class="n">maxValue</span> <span class="o">&gt;&gt;</span> <span class="n">populationSize</span> <span class="o">&gt;&gt;</span> <span class="n">maxNumGenerations</span> <span class="o">&gt;&gt;</span> <span class="n">mutationChance</span> <span class="o">&gt;&gt;</span> <span class="n">crossoverRate</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">numCoefficients</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">numCoefficients</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numCoefficients</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">float</span> <span class="n">coefficient</span><span class="p">;</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">coefficient</span><span class="p">;</span>
</span><span class='line'>      <span class="n">coefficients</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">coefficient</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">srand</span><span class="p">(</span><span class="n">time</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>
</span><span class='line'>  <span class="kt">float</span><span class="o">**</span> <span class="n">solutions</span> <span class="o">=</span> <span class="n">geneticAlgorithm</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">populationSize</span><span class="p">,</span> <span class="n">maxNumGenerations</span><span class="p">,</span> <span class="n">crossoverRate</span><span class="p">,</span> <span class="n">mutationChance</span><span class="p">,</span>
</span><span class='line'>      <span class="o">&amp;</span><span class="n">generateRandomPopulation</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">getFitness</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">mutate</span><span class="p">,</span> <span class="nb">false</span><span class="p">);</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="kt">float</span><span class="p">,</span> <span class="kt">float</span><span class="o">*&gt;</span> <span class="n">orderedSolutions</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">populationSize</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">orderedSolutions</span><span class="p">[</span><span class="n">getFitness</span><span class="p">(</span><span class="n">solutions</span><span class="p">[</span><span class="n">i</span><span class="p">])]</span> <span class="o">=</span> <span class="n">solutions</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="kt">float</span><span class="p">,</span> <span class="kt">float</span><span class="o">*&gt;::</span><span class="n">iterator</span> <span class="n">it</span> <span class="o">=</span> <span class="n">orderedSolutions</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">it</span> <span class="o">!=</span> <span class="n">orderedSolutions</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">it</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">++</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;#&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">count</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; x = &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; (fitness = &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">first</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;)&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">clear</span><span class="p">(</span><span class="n">solutions</span><span class="p">,</span> <span class="n">populationSize</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We use <code>srand(time(0))</code> to send a random seed every time the program is executed, and then a map to sort the retrieved results by the fitness value. The full code can be found below:</p>

<center><input id="spoiler" type="button" value="See source code" onclick="toggle_visibility('code');"></center>


<div id="code">
<figure class='code'><figcaption><span>root_finder.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;memory.h&gt; </span>
</span><span class='line'><span class="cp">#include &lt;time.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;map&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;limits&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cmath&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;tbb/parallel_for.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;tbb/blocked_range.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">T</span><span class="o">*</span><span class="p">,</span> <span class="n">T</span><span class="o">*&gt;</span> <span class="n">selectIndividuals</span><span class="p">(</span><span class="n">T</span><span class="o">**</span> <span class="n">population</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">populationSize</span><span class="p">,</span> <span class="kt">float</span><span class="o">*</span> <span class="n">fitnesses</span><span class="p">,</span> <span class="kt">float</span> <span class="n">upperBound</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// Get a number between 0 and upper bound</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">T</span><span class="o">*</span><span class="p">,</span> <span class="n">T</span><span class="o">*&gt;</span> <span class="n">chosen</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span><span class="n">population</span><span class="p">[</span><span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="n">populationSize</span><span class="p">],</span> <span class="n">population</span><span class="p">[</span><span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="n">populationSize</span><span class="p">]);</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">probA</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">rand</span><span class="p">())</span> <span class="o">/</span> <span class="n">RAND_MAX</span> <span class="o">*</span> <span class="n">upperBound</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">probB</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">rand</span><span class="p">())</span> <span class="o">/</span> <span class="n">RAND_MAX</span> <span class="o">*</span> <span class="n">upperBound</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// Rotate the roulette</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">((</span><span class="n">probA</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">probB</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">populationSize</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">probA</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">probA</span> <span class="o">-=</span> <span class="n">fitnesses</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">probA</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="n">chosen</span><span class="p">.</span><span class="n">first</span> <span class="o">=</span> <span class="n">population</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">probB</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">probB</span> <span class="o">-=</span> <span class="n">fitnesses</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">probB</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="n">chosen</span><span class="p">.</span><span class="n">second</span> <span class="o">=</span> <span class="n">population</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">chosen</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">T</span><span class="o">*</span><span class="p">,</span> <span class="n">T</span><span class="o">*&gt;</span> <span class="n">crossover</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">T</span><span class="o">*</span><span class="p">,</span> <span class="n">T</span><span class="o">*&gt;</span> <span class="n">parents</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">chromosomeSize</span><span class="p">,</span> <span class="kt">float</span> <span class="n">crossoverRate</span><span class="p">,</span> <span class="kt">float</span> <span class="n">mutationChance</span><span class="p">,</span> <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">mutate</span><span class="p">)(</span><span class="n">T</span><span class="o">*</span><span class="p">,</span> <span class="kt">size_t</span><span class="p">))</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">sizeA</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">size_t</span><span class="o">&gt;</span><span class="p">(</span><span class="n">chromosomeSize</span> <span class="o">*</span> <span class="n">crossoverRate</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">sizeB</span> <span class="o">=</span> <span class="n">chromosomeSize</span> <span class="o">-</span> <span class="n">sizeA</span><span class="p">;</span>
</span><span class='line'>  <span class="n">T</span><span class="o">*</span> <span class="n">childA</span> <span class="o">=</span> <span class="k">new</span> <span class="n">T</span><span class="p">[</span><span class="n">chromosomeSize</span><span class="p">];</span>
</span><span class='line'>  <span class="n">T</span><span class="o">*</span> <span class="n">childB</span> <span class="o">=</span> <span class="k">new</span> <span class="n">T</span><span class="p">[</span><span class="n">chromosomeSize</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// Copy first part of chromosomes</span>
</span><span class='line'>  <span class="n">memcpy</span><span class="p">(</span><span class="n">childA</span><span class="p">,</span> <span class="n">parents</span><span class="p">.</span><span class="n">first</span><span class="p">,</span> <span class="n">sizeA</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">T</span><span class="p">));</span>
</span><span class='line'>  <span class="n">memcpy</span><span class="p">(</span><span class="n">childB</span><span class="p">,</span> <span class="n">parents</span><span class="p">.</span><span class="n">second</span><span class="p">,</span> <span class="n">sizeA</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">T</span><span class="p">));</span>
</span><span class='line'>  <span class="c1">// Copy second part of chromosomes</span>
</span><span class='line'>  <span class="n">memcpy</span><span class="p">(</span><span class="n">childA</span> <span class="o">+</span> <span class="n">sizeA</span><span class="p">,</span> <span class="n">parents</span><span class="p">.</span><span class="n">second</span> <span class="o">+</span> <span class="n">sizeA</span><span class="p">,</span> <span class="n">sizeB</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">T</span><span class="p">));</span>
</span><span class='line'>  <span class="n">memcpy</span><span class="p">(</span><span class="n">childB</span> <span class="o">+</span> <span class="n">sizeA</span><span class="p">,</span> <span class="n">parents</span><span class="p">.</span><span class="n">first</span> <span class="o">+</span> <span class="n">sizeA</span><span class="p">,</span> <span class="n">sizeB</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">T</span><span class="p">));</span>
</span><span class='line'>  <span class="c1">// Apply mutation</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">chromosomeSize</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">rand</span><span class="p">())</span> <span class="o">/</span> <span class="n">RAND_MAX</span> <span class="o">&lt;=</span> <span class="n">mutationChance</span><span class="p">)</span> <span class="n">mutate</span><span class="p">(</span><span class="n">childA</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">rand</span><span class="p">())</span> <span class="o">/</span> <span class="n">RAND_MAX</span> <span class="o">&lt;=</span> <span class="n">mutationChance</span><span class="p">)</span> <span class="n">mutate</span><span class="p">(</span><span class="n">childB</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span><span class="n">childA</span><span class="p">,</span> <span class="n">childB</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">float</span><span class="o">*</span> <span class="n">getFitnesses</span><span class="p">(</span><span class="n">T</span><span class="o">**</span> <span class="n">population</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">populationSize</span><span class="p">,</span> <span class="kt">float</span> <span class="p">(</span><span class="o">*</span><span class="n">getFitness</span><span class="p">)(</span><span class="n">T</span><span class="o">*</span><span class="p">),</span> <span class="kt">bool</span> <span class="n">maximization</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">float</span><span class="o">*</span> <span class="n">fitnesses</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">float</span><span class="p">[</span><span class="n">populationSize</span><span class="p">];</span>
</span><span class='line'>  <span class="n">tbb</span><span class="o">::</span><span class="n">parallel_for</span><span class="p">(</span><span class="n">tbb</span><span class="o">::</span><span class="n">blocked_range</span><span class="o">&lt;</span><span class="kt">size_t</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">populationSize</span><span class="p">),</span> <span class="p">[</span><span class="o">=</span><span class="p">](</span><span class="k">const</span> <span class="n">tbb</span><span class="o">::</span><span class="n">blocked_range</span><span class="o">&lt;</span><span class="kt">size_t</span><span class="o">&gt;&amp;</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">x</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">fitnesses</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">getFitness</span><span class="p">(</span><span class="n">population</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="c1">// Invert values on minimization problems</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">maximization</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">float</span> <span class="n">maxFitness</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">numeric_limits</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;::</span><span class="n">min</span><span class="p">();</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">populationSize</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">fitnesses</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">maxFitness</span><span class="p">)</span> <span class="n">maxFitness</span> <span class="o">=</span> <span class="n">fitnesses</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">populationSize</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">fitnesses</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">maxFitness</span> <span class="o">-</span> <span class="n">fitnesses</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">fitnesses</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">void</span> <span class="n">clear</span><span class="p">(</span><span class="n">T</span><span class="o">**</span> <span class="n">population</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">populationSize</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">populationSize</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">delete</span> <span class="n">population</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">delete</span><span class="p">[]</span> <span class="n">population</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">T</span><span class="o">**</span> <span class="n">geneticAlgorithm</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">chromosomeSize</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">populationSize</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">maxNumGenerations</span><span class="p">,</span> <span class="kt">float</span> <span class="n">crossoverRate</span><span class="p">,</span> <span class="kt">float</span> <span class="n">mutationChance</span><span class="p">,</span>
</span><span class='line'>  <span class="n">T</span><span class="o">**</span> <span class="p">(</span><span class="o">*</span><span class="n">generateRandomPopulation</span><span class="p">)(</span><span class="kt">size_t</span><span class="p">,</span> <span class="kt">size_t</span><span class="p">),</span> <span class="kt">float</span> <span class="p">(</span><span class="o">*</span><span class="n">getFitness</span><span class="p">)(</span><span class="n">T</span><span class="o">*</span><span class="p">),</span> <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">mutate</span><span class="p">)(</span><span class="n">T</span><span class="o">*</span><span class="p">,</span> <span class="kt">size_t</span><span class="p">),</span> <span class="kt">bool</span> <span class="n">maximization</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">T</span><span class="o">**</span> <span class="n">population</span> <span class="o">=</span> <span class="n">generateRandomPopulation</span><span class="p">(</span><span class="n">chromosomeSize</span><span class="p">,</span> <span class="n">populationSize</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">maxNumGenerations</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">float</span><span class="o">*</span> <span class="n">fitnesses</span> <span class="o">=</span> <span class="n">getFitnesses</span><span class="p">(</span><span class="n">population</span><span class="p">,</span> <span class="n">populationSize</span><span class="p">,</span> <span class="n">getFitness</span><span class="p">,</span> <span class="n">maximization</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">// Get upper bound</span>
</span><span class='line'>      <span class="kt">float</span> <span class="n">upperBound</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">populationSize</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">upperBound</span> <span class="o">+=</span> <span class="n">fitnesses</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">T</span><span class="o">**</span> <span class="n">newPopulation</span> <span class="o">=</span> <span class="k">new</span> <span class="n">T</span><span class="o">*</span><span class="p">[</span><span class="n">populationSize</span><span class="p">];</span>
</span><span class='line'>      <span class="n">tbb</span><span class="o">::</span><span class="n">parallel_for</span><span class="p">(</span><span class="n">tbb</span><span class="o">::</span><span class="n">blocked_range</span><span class="o">&lt;</span><span class="kt">size_t</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">populationSize</span><span class="p">),</span> <span class="p">[</span><span class="o">=</span><span class="p">](</span><span class="k">const</span> <span class="n">tbb</span><span class="o">::</span><span class="n">blocked_range</span><span class="o">&lt;</span><span class="kt">size_t</span><span class="o">&gt;&amp;</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">x</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="n">j</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">T</span><span class="o">*</span><span class="p">,</span> <span class="n">T</span><span class="o">*&gt;</span> <span class="n">parents</span> <span class="o">=</span> <span class="n">selectIndividuals</span><span class="p">(</span><span class="n">population</span><span class="p">,</span> <span class="n">populationSize</span><span class="p">,</span> <span class="n">fitnesses</span><span class="p">,</span> <span class="n">upperBound</span><span class="p">);</span>
</span><span class='line'>              <span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">T</span><span class="o">*</span><span class="p">,</span> <span class="n">T</span><span class="o">*&gt;</span> <span class="n">children</span> <span class="o">=</span> <span class="n">crossover</span><span class="p">(</span><span class="n">parents</span><span class="p">,</span> <span class="n">chromosomeSize</span><span class="p">,</span> <span class="n">crossoverRate</span><span class="p">,</span> <span class="n">mutationChance</span><span class="p">,</span> <span class="n">mutate</span><span class="p">);</span>
</span><span class='line'>              <span class="n">newPopulation</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">children</span><span class="p">.</span><span class="n">first</span><span class="p">;</span>
</span><span class='line'>              <span class="n">newPopulation</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">children</span><span class="p">.</span><span class="n">second</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">});</span>  
</span><span class='line'>      <span class="k">delete</span> <span class="n">fitnesses</span><span class="p">;</span>
</span><span class='line'>      <span class="n">clear</span><span class="p">(</span><span class="n">population</span><span class="p">,</span> <span class="n">populationSize</span><span class="p">);</span>
</span><span class='line'>      <span class="n">population</span> <span class="o">=</span> <span class="n">newPopulation</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">population</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//----------------------------------------------------------------------</span>
</span><span class='line'><span class="kt">float</span> <span class="n">minValue</span><span class="p">;</span>
</span><span class='line'><span class="kt">float</span> <span class="n">maxValue</span><span class="p">;</span>
</span><span class='line'><span class="kt">size_t</span> <span class="n">populationSize</span><span class="p">;</span>
</span><span class='line'><span class="kt">size_t</span> <span class="n">maxNumGenerations</span><span class="p">;</span>
</span><span class='line'><span class="kt">float</span> <span class="n">mutationChance</span><span class="p">;</span>
</span><span class='line'><span class="kt">float</span> <span class="n">crossoverRate</span><span class="p">;</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span> <span class="n">coefficients</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">float</span> <span class="nf">getRandomValue</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">r</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">rand</span><span class="p">())</span> <span class="o">/</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">RAND_MAX</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">r</span> <span class="o">*</span> <span class="p">(</span><span class="n">maxValue</span> <span class="o">-</span> <span class="n">minValue</span><span class="p">)</span> <span class="o">+</span> <span class="n">minValue</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">float</span><span class="o">**</span> <span class="nf">generateRandomPopulation</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">chromosomeSize</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">populationSize</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">float</span><span class="o">**</span> <span class="n">population</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">float</span><span class="o">*</span><span class="p">[</span><span class="n">populationSize</span><span class="p">];</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">populationSize</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">population</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">float</span><span class="p">[</span><span class="n">chromosomeSize</span><span class="p">];</span>
</span><span class='line'>      <span class="n">population</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">getRandomValue</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">population</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">mutate</span><span class="p">(</span><span class="kt">float</span><span class="o">*</span> <span class="n">chromosome</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">index</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">chromosome</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="n">getRandomValue</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">float</span> <span class="nf">getFitness</span><span class="p">(</span><span class="kt">float</span><span class="o">*</span> <span class="n">chromosome</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">x</span> <span class="o">=</span> <span class="n">chromosome</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">value</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">coefficients</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">value</span> <span class="o">+=</span> <span class="n">coefficients</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">std</span><span class="o">::</span><span class="n">pow</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">coefficients</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">abs</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">minValue</span> <span class="o">&gt;&gt;</span> <span class="n">maxValue</span> <span class="o">&gt;&gt;</span> <span class="n">populationSize</span> <span class="o">&gt;&gt;</span> <span class="n">maxNumGenerations</span> <span class="o">&gt;&gt;</span> <span class="n">mutationChance</span> <span class="o">&gt;&gt;</span> <span class="n">crossoverRate</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">numCoefficients</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">numCoefficients</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numCoefficients</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">float</span> <span class="n">coefficient</span><span class="p">;</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">coefficient</span><span class="p">;</span>
</span><span class='line'>      <span class="n">coefficients</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">coefficient</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">srand</span><span class="p">(</span><span class="n">time</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>
</span><span class='line'>  <span class="kt">float</span><span class="o">**</span> <span class="n">solutions</span> <span class="o">=</span> <span class="n">geneticAlgorithm</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">populationSize</span><span class="p">,</span> <span class="n">maxNumGenerations</span><span class="p">,</span> <span class="n">crossoverRate</span><span class="p">,</span> <span class="n">mutationChance</span><span class="p">,</span>
</span><span class='line'>      <span class="o">&amp;</span><span class="n">generateRandomPopulation</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">getFitness</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">mutate</span><span class="p">,</span> <span class="nb">false</span><span class="p">);</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="kt">float</span><span class="p">,</span> <span class="kt">float</span><span class="o">*&gt;</span> <span class="n">orderedSolutions</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">populationSize</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">orderedSolutions</span><span class="p">[</span><span class="n">getFitness</span><span class="p">(</span><span class="n">solutions</span><span class="p">[</span><span class="n">i</span><span class="p">])]</span> <span class="o">=</span> <span class="n">solutions</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="kt">float</span><span class="p">,</span> <span class="kt">float</span><span class="o">*&gt;::</span><span class="n">iterator</span> <span class="n">it</span> <span class="o">=</span> <span class="n">orderedSolutions</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">it</span> <span class="o">!=</span> <span class="n">orderedSolutions</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">it</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">++</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;#&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">count</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; x = &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; (fitness = &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">first</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;)&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">clear</span><span class="p">(</span><span class="n">solutions</span><span class="p">,</span> <span class="n">populationSize</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p></center></p>

<p>Let&rsquo;s make some simple experiments. For example, for the input: <code>-100 100 100 1000 0.05 0.5 2 1 0</code> representating the polynomial equation x = 0, we get values similar to that:</p>

<figure class='code'><figcaption><span>root_finder.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cp">#1 x = 0.749847 (fitness = 0.749847)</span>
</span><span class='line'><span class="cp">#2 x = -1.20491 (fitness = 1.20491)</span>
</span><span class='line'><span class="cp">#3 x = -5.58772 (fitness = 5.58772)</span>
</span><span class='line'><span class="cp">#4 x = -13.276 (fitness = 13.276)</span>
</span><span class='line'><span class="cp">#5 x = -13.3722 (fitness = 13.3722)</span>
</span><span class='line'><span class="cp">#6 x = -15.1434 (fitness = 15.1434)</span>
</span><span class='line'><span class="cp">#7 x = 15.5566 (fitness = 15.5566)</span>
</span><span class='line'><span class="cp">#8 x = -18.8777 (fitness = 18.8777)</span>
</span><span class='line'><span class="cp">#9 x = 34.1902 (fitness = 34.1902)</span>
</span><span class='line'><span class="cp">#10 x = -35.9019 (fitness = 35.9019)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can notice, the values are approximating to zero, which is, indeed, the solution for this equation.</p>

<p>Let&rsquo;s try a harder example. For the input: <code>-100 100 100 1000 0.05 0.5 3 1 30 2</code> representating the polynomial equation x<sup>2</sup> + 30x + 2 = 0, we get values similar to that:</p>

<figure class='code'><figcaption><span>root_finder.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cp">#1 x = -31.4706 (fitness = 48.2811)</span>
</span><span class='line'><span class="cp">#2 x = -1.91303 (fitness = 51.7313)</span>
</span><span class='line'><span class="cp">#3 x = -31.9963 (fitness = 65.8752)</span>
</span><span class='line'><span class="cp">#4 x = -3.68965 (fitness = 95.076)</span>
</span><span class='line'><span class="cp">#5 x = -4.05705 (fitness = 103.252)</span>
</span><span class='line'><span class="cp">#6 x = -33.503 (fitness = 119.36)</span>
</span><span class='line'><span class="cp">#7 x = 3.54279 (fitness = 120.835)</span>
</span><span class='line'><span class="cp">#8 x = -8.37109 (fitness = 179.057)</span>
</span><span class='line'><span class="cp">#9 x = -9.4042 (fitness = 191.687)</span>
</span><span class='line'><span class="cp">#10 x = -36.7524 (fitness = 250.166)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Where the real solution is <code>x' ~= -0.066</code> and <code>x'' ~= -29.933</code> (make the calculations). As you can notice, it tried to approximate both roots, through the values -31.4706 and -1.913. That&rsquo;s already an impressive fact, indeed.</p>

<h2>Conclusion</h2>

<p>Wow! This tutorial was longer than I expected. Here we learnt about i) Genetic Algorithms ii) Implementation of Genetic Algorithms on C++ iii) Use of a TBB element, the parallel for, to speed up our algorithm iv) A pratical example using Genetic Algorithm. That&rsquo;s a lot of things! I really hope you guys had enjoyed as much as I had writing this tutorial. See you on next tutorial! ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(Python 2.7) Mesquita]]></title>
    <link href="http://abner-math.github.io/blog/2014/10/18/python-2-dot-7-mesquita/"/>
    <updated>2014-10-18T18:30:35-03:00</updated>
    <id>http://abner-math.github.io/blog/2014/10/18/python-2-dot-7-mesquita</id>
    <content type="html"><![CDATA[<p>Ahhh, and good and old (or not so old) statistics.</p>

<p>I create this software to help with my homework. In the end, just by doing it I was able to learn much more about statistical models. :)</p>

<p>Also, this software was my first attempt in create something with Python GUI, Tkinter. Wow, compared to Swing this one is like heaven!</p>

<p style="text-align:center;"><img src="http://abner-math.github.io/images/posts/mesquita.png" alt="" /></p>

<center><a href="https://gist.githubusercontent.com/abner-math/e51ffc7453acf0af3426/raw/8ce4b37a0b809c7cafdb432f961ca808d7664a60/Mesquita.py" download="Mesquita.py">Click here to download</a></center>




<!-- more -->


<p>You can see the source code below. Have fun!</p>

<center><input id="spoiler" type="button" value="See source code" onclick="toggle_visibility('code');"></center>


<div id="code">
<div><script src='https://gist.github.com/e51ffc7453acf0af3426.js?file=Mesquita.py'></script>
<noscript><pre><code>#!/usr/bin/python
# -*-coding=utf-8 -*-
#-----------------------------------------------------------------
# Mesquita v1.0
# Created by: Abner Matheus
# E-mail: abner.math.c@gmail.com
# Github: http://github.com/picoledelimao
#-----------------------------------------------------------------
import math

class MatematicaException(Exception): pass
class ProbabilidadeException(Exception): pass
class BinomialException(ProbabilidadeException): pass
class HipergeometricoException(ProbabilidadeException): pass
class GeometricoException(ProbabilidadeException): pass
class PoissonException(ProbabilidadeException): pass
class UniformeException(ProbabilidadeException): pass
class ExponencialException(ProbabilidadeException): pass
class NormalException(ProbabilidadeException): pass

class Matematica:
    #combina dois numeros inteiros, n &gt; p
    @staticmethod
    def combinacao(n, p):
        if n &lt; p or p &lt; 0 or not(isinstance(n, int) and isinstance(p, int)):
            raise MatematicaException(&quot;Parâmetros inválidos na combinação&quot;)
        n_fatorado = reduce(lambda x, y: x * y, [x for x in range(n, n-p, -1)] + [1])
        try:
            return float(n_fatorado)/math.factorial(p)
        except: return n_fatorado/math.factorial(p)

#----------------------------------------------------------------
# Modelos discretos
#----------------------------------------------------------------
class ModeloDiscreto:
    #variacao do &#39;x&#39; na reta real
    def variacao(self, x):
        raise NotImplementedError()
    #funcao de probabilidade
    def f(self):
        raise NotImplementedError()
    #funcao de probabilidade acumulada
    def F(self):
        raise NotImplementedError()
    #esperanca da v.a.
    def e(self):
        raise NotImplementedError()
    #variancia da v.a.
    def var(self):
        raise NotImplementedError()
#=================================================================
class Bernoulli(ModeloDiscreto):
    #p: chance de sucesso
    def __init__(self, p):
        try:
            self.p = float(p)
            if not 0 &lt;= self.p &lt;= 1:
                raise ProbabilidadeException(&quot;Parametro p não é uma probabilidade&quot;)
        except:
            raise ProbabilidadeException(&quot;Parametro p não é uma probabilidade&quot;)
    def fp(self):
        return self.p
    def e(self):
        return self.p
    def var(self):
        return self.p*(1-self.p)
    
class Binomial(Bernoulli):
    #n: numero de repeticoes, p: chance de sucesso
    def __init__(self, n, p):
        try:
            self.n = int(n)
        except:
            raise BinomialException(&quot;Parâmetro n deve ser um numero inteiro&quot;)
        Bernoulli.__init__(self, p)
    def variacao(self):
        return [x for x in range(0, self.n + 1)]
    def fp(self, x):
        if not x in self.variacao():
            raise BinomialException(&quot;x está fora da variação da v.a.&quot;)
        combinacao = Matematica.combinacao(self.n, x)
        chance_sucesso = math.pow(self.p, x)
        chance_fracasso = math.pow(1 - self.p, self.n - x)
        return combinacao*chance_sucesso*chance_fracasso
    def F(self, x):
        if x &lt; 0:
            return 0
        elif x &gt;= self.n:
            return 1
        count = 0
        for p in range(0, int(x)+1):
            count += self.fp(p)
        return count
    def e(self):
        return self.n*self.p
    def var(self):
        return self.n*self.p*(1-self.p)
        
class Hipergeometrico(ModeloDiscreto):
    #N: tamanho da populacao
    #n: tamanho da amostra
    #r: numero de elementos favoraveis
    def __init__(self, N, r, n):
        try:
            self.N = int(N)
            self.r = int(r)
            self.n = int(n)
            if self.N &lt; self.n or self.N &lt; self.r:
                raise HipergeometricoException(&quot;Parâmetros inválidos&quot;)
        except:
            raise HipergeometricoException(&quot;Parâmetros inválidos&quot;)
    def variacao(self):
        return [x for x in range(max(0, self.n-(self.N-self.r)), min(self.r, self.n) + 1)]
    def fp(self, x):
        if not x in self.variacao():
            raise HipergeometricoException(&quot;x está fora da variação da v.a.&quot;)
        a = Matematica.combinacao(self.r, x)
        b = Matematica.combinacao(self.N - self.r, self.n - x)
        c = Matematica.combinacao(self.N, self.n)
        return a*b/c
    def F(self, x):
        if x &lt; max(0, self.n-(self.N-self.r)):
            return 0
        elif x &gt;= min(self.r, self.n):
            return 1
        count = 0
        for p in range(max(0, self.n-(self.N-self.r)), int(x)+1):
            count += self.fp(p)
        return count
    def e(self):
        return self.n*(self.r/float(self.N))
    def var(self):
        return self.n*(self.r/float(self.N))*(1-self.r/float(self.N))*(self.N-self.n)/float(self.N-1)

class Geometrico(Bernoulli):
    #p: chance de sucesso
    def __init__(self, p):
        Bernoulli.__init__(self, p)
    def variacao(self, x):
        return isinstance(x, int) and x &gt;= 1
    def fp(self, x):
        if not self.variacao(x):
            raise GeometricoException(&quot;x está fora da variação da v.a.&quot;)
        return math.pow(1-self.p, x-1)*self.p
    def F(self, x):
        if x &lt;= 1:
            return 0
        count = 0
        for p in range(1, int(x)+1):
            count += self.fp(p)
        return count
    def e(self):
        return 1/float(self.p)
    def var(self):
        return (1-self.p)/float(math.pow(self.p, 2))

class Poisson(ModeloDiscreto):
    #alfa: media
    def __init__(self, alfa):
        try:
            self.alfa = float(alfa)
        except:
            raise PoissonException(&quot;Parâmetro inválido&quot;)
    def variacao(self, x):
        return isinstance(x, int) and x &gt;= 0
    def fp(self, x):
        if not self.variacao(x):
            raise PoissonException(&quot;x está fora da variação da v.a.&quot;)
        return math.pow(math.e, -self.alfa)*math.pow(self.alfa, x)/float(math.factorial(x))
    def F(self, x):
        if x &lt;= 0:
            return 0
        count = 0
        for p in range(0, int(x)+1):
            count += self.fp(p)
        return count
    def e(self):
        return self.alfa
    def var(self):
        return self.alfa
    

#----------------------------------------------------------------
# Modelos continuos
#----------------------------------------------------------------
class ModeloContinuo:
    #funcao distribuicao de probabilidade entre dois pontos
    def fdp(self, x, y):
        raise NotImplementedError()
    #funcao de probabilidade acumulada de -infinito ate o ponto
    def F(self, x):
        raise NotImplementedError()
    #esperanca da v.a.
    def e(self):
        raise NotImplementedError()
    #variancia da v.a.
    def var(self):
        raise NotImplementedError()
#=================================================================    
class Uniforme(ModeloContinuo):
    def __init__(self, a, b):
        try:
            self.a = float(a)
            self.b = float(b)
            if self.a &gt;= self.b:
                raise UniformeException(&quot;Parametro a é maior ou igual que o b&quot;)
        except: raise UniformeException(&quot;Parâmetros inválidos&quot;)
    def F(self, x):
        if x &lt;= self.a:
            return 0
        elif x &gt;= self.b:
            return 1
        return (x-self.a)/float(self.b-self.a)
    def fdp(self, x, y):
        if y &lt; x:
            raise UniformeException(&quot;Ponto final é menor que ponto inicial&quot;)
        return self.F(y) - self.F(x)
    def e(self):
        return (self.a + self.b)/2.0
    def var(self):
        return math.pow(self.b - self.a, 2)/12.0

class Exponencial(ModeloContinuo):
    #alfa: o inverso da media
    def __init__(self, alfa):
        try:
            self.alfa = float(alfa)
        except: raise ExponencialException(&quot;Parâmetro inválido&quot;)
        if self.alfa &lt; 0:
                raise ExponencialException(&quot;Parâmetro deve ser maior que 0&quot;)
    def F(self, x):
        if x &lt;= 0:
            return 0
        return 1 - math.pow(math.e, -self.alfa*x)
    def fdp(self, x, y):
        if y &lt; x:
            raise ExponencialException(&quot;Ponto final é menor que o ponto inicial&quot;)
        return self.F(y) - self.F(x)
    def e(self):
        return 1/float(self.alfa)
    def var(self):
        return 1/float(math.pow(self.alfa, 2))


class Normal(ModeloContinuo):
    #u: media
    #o2: variancia
    def __init__(self, u, o2):
        try:
            self.u = float(u)
            self.o2 = float(o2)
        except:
            raise NormalException(&quot;Parâmetros inválidos&quot;)
        #tabela abaixo
        self.tabela = {0.0: 0.5, 0.25: 0.5987, 2.0: 0.9772, 3.0: 0.9987, 0.5: 0.6915, 1.0: 0.8413, 3.37: 0.9996, 0.75: 0.7734, 2.83: 0.9977, 1.17: 0.879, 0.67: 0.7486, 2.28: 0.9887, 3.29: 0.9995, 3.21: 0.9993, 0.83: 0.7967, 0.6: 0.7257, 2.91: 0.9982, 3.5: 0.9998, 1.34: 0.9099, 2.25: 0.9878, 0.85: 0.8023, 3.51: 0.9998, 0.96: 0.8315, 0.66: 0.7454, 3.27: 0.9995, 0.78: 0.7823, 3.45: 0.9997, 1.67: 0.9525, 1.43: 0.9236, 2.65: 0.996, 2.03: 0.9788, 3.54: 0.9998, 2.36: 0.9909, 3.46: 0.9997, 0.14: 0.5557, 0.37: 0.6443, 1.2: 0.8849, 0.4: 0.6554, 2.62: 0.9956, 3.55: 0.9998, 2.04: 0.9793, 1.29: 0.9015, 0.46: 0.6772, 3.49: 0.9998, 0.56: 0.7123, 1.73: 0.9582, 1.51: 0.9345, 0.36: 0.6406, 3.41: 0.9997, 0.22: 0.5871, 1.09: 0.8621, 0.95: 0.8289, 0.26: 0.6026, 1.61: 0.9463, 3.24: 0.9994, 1.84: 0.9671, 2.06: 0.9803, 0.63: 0.7357, 1.81: 0.9649, 3.3: 0.9995, 1.54: 0.9382, 2.02: 0.9783, 1.95: 0.9744, 2.57: 0.9949, 2.4: 0.9918, 2.73: 0.9968, 1.9: 0.9713, 2.31: 0.9896, 0.42: 0.6628, 3.58: 0.9998, 2.52: 0.9941, 2.76: 0.9971, 2.84: 0.9977, 2.64: 0.9959, 2.17: 0.985, 2.97: 0.9985, 3.23: 0.9994, 1.94: 0.9738, 1.88: 0.9699, 3.33: 0.9996, 2.75: 0.997, 1.68: 0.9535, 2.43: 0.9925, 1.33: 0.9082, 1.85: 0.9678, 2.35: 0.9906, 2.27: 0.9884, 2.19: 0.9857, 1.77: 0.9616, 0.31: 0.6217, 1.96: 0.975, 3.14: 0.9992, 2.51: 0.994, 2.22: 0.9868, 0.73: 0.7673, 1.04: 0.8508, 1.49: 0.9319, 1.18: 0.881, 1.58: 0.9429, 1.01: 0.8438, 1.62: 0.9474, 0.1: 0.5398, 2.6: 0.9953, 1.72: 0.9573, 2.15: 0.9842, 1.76: 0.9608, 0.47: 0.6808, 1.05: 0.8531, 2.92: 0.9982, 1.1: 0.8643, 1.47: 0.9292, 3.13: 0.9991, 3.28: 0.9995, 0.09: 0.5359, 3.31: 0.9995, 0.76: 0.7764, 2.47: 0.9932, 1.63: 0.9484, 0.15: 0.5596, 3.07: 0.9989, 1.37: 0.9147, 0.7: 0.758, 2.85: 0.9978, 2.54: 0.9945, 1.23: 0.8907, 2.32: 0.9898, 0.97: 0.834, 0.74: 0.7704, 0.51: 0.695, 0.64: 0.7389, 2.55: 0.9946, 0.45: 0.6736, 2.78: 0.9973, 0.54: 0.7054, 1.44: 0.9251, 0.55: 0.7088, 0.01: 0.504, 3.39: 0.9997, 2.89: 0.9981, 2.81: 0.9975, 1.14: 0.8729, 1.8: 0.9641, 3.18: 0.9993, 1.22: 0.8888, 1.86: 0.9686, 3.16: 0.9992, 1.99: 0.9767, 3.02: 0.9987, 1.98: 0.9761, 3.26: 0.9994, 0.04: 0.516, 3.08: 0.999, 2.07: 0.9808, 0.34: 0.6331, 0.61: 0.7291, 3.11: 0.9991, 2.14: 0.9838, 3.03: 0.9988, 2.41: 0.992, 0.16: 0.5636, 0.41: 0.6591, 0.48: 0.6844, 1.36: 0.9131, 0.98: 0.8365, 3.19: 0.9993, 3.06: 0.9989, 3.43: 0.9997, 2.98: 0.9986, 3.35: 0.9996, 2.9: 0.9981, 1.5: 0.9332, 0.89: 0.8133, 1.64: 0.9495, 0.24: 0.5948, 0.52: 0.6985, 2.05: 0.9798, 1.59: 0.9441, 1.25: 0.8944, 0.3: 0.6179, 2.56: 0.9948, 2.63: 0.9957, 0.21: 0.5832, 2.71: 0.9966, 0.23: 0.591, 2.79: 0.9974, 2.12: 0.983, 0.71: 0.7611, 0.19: 0.5753, 1.87: 0.9693, 2.45: 0.9929, 1.45: 0.9265, 3.52: 0.9998, 1.89: 0.9706, 3.44: 0.9997, 3.36: 0.9996, 3.22: 0.9994, 0.07: 0.5279, 1.06: 0.8554, 3.53: 0.9998, 2.59: 0.9952, 1.53: 0.937, 3.47: 0.9997, 0.58: 0.719, 2.7: 0.9965, 3.56: 0.9998, 2.94: 0.9984, 0.28: 0.6103, 0.99: 0.8389, 1.41: 0.9207, 3.48: 0.9997, 1.7: 0.9554, 0.38: 0.648, 1.74: 0.9591, 1.78: 0.9625, 0.11: 0.5438, 1.38: 0.9162, 2.38: 0.9913, 1.92: 0.9726, 0.92: 0.8212, 1.82: 0.9656, 1.71: 0.9564, 0.35: 0.6368, 1.11: 0.8665, 0.13: 0.5517, 0.94: 0.8264, 1.12: 0.8686, 2.46: 0.9931, 1.55: 0.9394, 1.75: 0.9599, 0.68: 0.7517, 1.97: 0.9756, 0.44: 0.67, 2.68: 0.9963, 1.15: 0.8749, 2.09: 0.9817, 0.77: 0.7794, 1.28: 0.8997, 2.01: 0.9778, 0.53: 0.7019, 3.4: 0.9997, 3.57: 0.9998, 1.26: 0.8962, 2.3: 0.9893, 2.33: 0.9901, 1.31: 0.9049, 2.39: 0.9916, 0.82: 0.7939, 2.99: 0.9986, 0.84: 0.7995, 0.79: 0.7852, 0.81: 0.791, 0.59: 0.7224, 0.33: 0.6293, 2.26: 0.9881, 2.42: 0.9922, 0.86: 0.8051, 1.79: 0.9633, 1.03: 0.8485, 0.88: 0.8106, 2.34: 0.9904, 1.66: 0.9515, 0.05: 0.5199, 2.74: 0.9969, 2.21: 0.9864, 1.93: 0.9732, 2.61: 0.9955, 1.57: 0.9418, 2.2: 0.9861, 0.06: 0.5239, 3.17: 0.9992, 0.49: 0.6879, 0.2: 0.5793, 2.29: 0.989, 0.62: 0.7324, 1.13: 0.8708, 2.37: 0.9911, 2.13: 0.9834, 2.5: 0.9938, 3.2: 0.9993, 0.8: 0.7881, 1.3: 0.9032, 0.29: 0.6141, 2.48: 0.9934, 2.24: 0.9875, 2.44: 0.9927, 1.19: 0.883, 0.69: 0.7549, 0.87: 0.8078, 2.08: 0.9812, 2.82: 0.9976, 1.21: 0.8869, 2.95: 0.9984, 1.39: 0.9177, 1.91: 0.9719, 3.04: 0.9988, 3.15: 0.9992, 0.18: 0.5714, 1.52: 0.9357, 0.39: 0.6517, 0.93: 0.8238, 2.53: 0.9943, 1.24: 0.8925, 2.11: 0.9826, 2.16: 0.9846, 2.96: 0.9985, 2.49: 0.9936, 0.91: 0.8186, 2.67: 0.9962, 0.27: 0.6064, 0.72: 0.7642, 2.69: 0.9964, 2.18: 0.9854, 2.77: 0.9972, 2.87: 0.9979, 1.65: 0.9505, 2.1: 0.9821, 2.93: 0.9983, 0.65: 0.7422, 0.9: 0.8159, 1.07: 0.8577, 1.08: 0.8599, 1.32: 0.9066, 3.38: 0.9996, 3.09: 0.999, 2.8: 0.9974, 0.02: 0.508, 3.01: 0.9987, 2.23: 0.9871, 0.17: 0.5675, 0.43: 0.6664, 3.1: 0.999, 1.27: 0.898, 1.4: 0.9192, 2.66: 0.9961, 1.16: 0.877, 3.12: 0.9991, 2.58: 0.9951, 1.46: 0.9279, 0.08: 0.5319, 0.12: 0.5478, 1.69: 0.9545, 1.48: 0.9306, 1.42: 0.9222, 1.02: 0.8461, 1.56: 0.9406, 1.83: 0.9664, 3.42: 0.9997, 2.88: 0.998, 0.03: 0.512, 3.32: 0.9995, 3.25: 0.9994, 3.34: 0.9996, 3.05: 0.9989, 1.6: 0.9452, 2.86: 0.9979, 0.32: 0.6255, 1.35: 0.9115, 0.57: 0.7157, 2.72: 0.9967}
    def F(self, x):
        xNormalizada = (x - self.u)/float(math.sqrt(self.o2))
        if xNormalizada &lt; -3.5:
            return 0
        elif xNormalizada &gt; 3.5:
            return 1
        chave = float(&quot;%.2f&quot; % math.fabs(xNormalizada))
        if xNormalizada &lt; 0:
            return 1 - self.tabela[chave]
        else:
            return self.tabela[chave]
    def fdp(self, x, y):
        if y &lt; x:
            raise NormalException(&quot;Ponto final é menor que o ponto inicial&quot;)
        return self.F(y) - self.F(x)
    def e(self):
        return self.u
    def var(self):
        return self.o2

#----------------------------------------------------------------
# Interface gráfica
#----------------------------------------------------------------  
if __name__ == &#39;__main__&#39;:
    from Tkinter import *
    import tkMessageBox
    class JanelaPrincipal:
        def __init__(self, top_level):
            self.frame1 = Frame(top_level)
            self.frame1.pack(side=LEFT)
            self.frame2 = Frame(top_level)
            self.frame2.pack(side=RIGHT)
            
            width = 50
            height = 5
            Label(self.frame1, text=&quot;Modelos discretos:&quot;).pack()
            self.binomial = Button(self.frame1, text=&quot;Modelo binomial&quot;)
            self.binomial[&#39;width&#39;] = width
            self.binomial[&#39;height&#39;] = height
            self.hipergeometrico = Button(self.frame1, text=&quot;Modelo hipergeométrico&quot;)
            self.hipergeometrico[&#39;width&#39;] = width
            self.hipergeometrico[&#39;height&#39;] = height
            self.geometrico = Button(self.frame1, text=&quot;Modelo geométrico&quot;)
            self.geometrico[&#39;width&#39;] = width
            self.geometrico[&#39;height&#39;] = height
            self.poisson = Button(self.frame1, text=&quot;Modelo de Poisson&quot;)
            self.poisson[&#39;width&#39;] = width
            self.poisson[&#39;height&#39;] = height
            Label(self.frame2, text=&quot;Modelos contínuos:&quot;).pack()
            self.uniforme = Button(self.frame2, text=&quot;Modelo uniforme&quot;)
            self.uniforme[&#39;width&#39;] = width
            self.uniforme[&#39;height&#39;] = height
            self.exponencial = Button(self.frame2, text=&quot;Modelo exponencial&quot;)
            self.exponencial[&#39;width&#39;] = width
            self.exponencial[&#39;height&#39;] = height
            self.normal = Button(self.frame2, text=&quot;Modelo normal&quot;)
            self.normal[&#39;width&#39;] = width
            self.normal[&#39;height&#39;] = height
            
            self.binomial.pack()
            self.hipergeometrico.pack()
            self.geometrico.pack()
            self.poisson.pack()
            self.uniforme.pack()
            self.exponencial.pack()
            self.normal.pack()

            self.binomial.bind(&quot;&lt;Button-1&gt;&quot;, self.clica_botao)
            self.hipergeometrico.bind(&quot;&lt;Button-1&gt;&quot;, self.clica_botao)
            self.geometrico.bind(&quot;&lt;Button-1&gt;&quot;, self.clica_botao)
            self.poisson.bind(&quot;&lt;Button-1&gt;&quot;, self.clica_botao)
            self.uniforme.bind(&quot;&lt;Button-1&gt;&quot;, self.clica_botao)
            self.exponencial.bind(&quot;&lt;Button-1&gt;&quot;, self.clica_botao)
            self.normal.bind(&quot;&lt;Button-1&gt;&quot;, self.clica_botao)
        def clica_botao(self, event):
            janela = Tk()
            if event.widget == self.binomial:
                janela.title(&quot;Modelo binomial&quot;)
                JanelaBinomial(janela)
            elif event.widget == self.hipergeometrico:
                janela.title(&quot;Modelo hipergeométrico&quot;)
                JanelaHipergeometrico(janela)
            elif event.widget == self.geometrico:
                janela.title(&quot;Modelo geométrico&quot;)
                JanelaGeometrico(janela)
            elif event.widget == self.poisson:
                janela.title(&quot;Modelo de Poisson&quot;)
                JanelaPoisson(janela)
            elif event.widget == self.uniforme:
                janela.title(&quot;Modelo uniforme&quot;)
                JanelaUniforme(janela)
            elif event.widget == self.exponencial:
                janela.title(&quot;Modelo exponencial&quot;)
                JanelaExponencial(janela)
            elif event.widget == self.normal:
                janela.title(&quot;Modelo normal&quot;)
                JanelaNormal(janela)
            janela.mainloop()

    class Grafico:
        def __init__(self, raiz):
            self.width = 400
            self.height = 400
            self.canvas = Canvas(raiz, width=self.width, height=self.height)
            self.canvas.pack()
        def set_modelo(self, modelo_discreto, funcao, limiteX1, limiteX2, acumulada):
            self.modelo = modelo_discreto
            self.funcao = funcao
            self.desenha(limiteX1, limiteX2, acumulada)
            
    class GraficoDiscreto(Grafico):
        def desenha(self, limiteX1, limiteX2, acumulada):
            self.canvas.delete(&quot;all&quot;)
            try:
                variacao = self.modelo.variacao()
            except:
                if isinstance(self.modelo, Geometrico):
                    i = 1
                    while(self.modelo.F(i) &lt; 0.95):
                        i += 1
                        if i &gt; 100:
                            break
                    variacao = [x for x in range(1, i + 1)]
                elif isinstance(self.modelo, Poisson):
                    i = 0
                    while(self.modelo.F(i) &lt; 0.95):
                        i += 1
                        if i &gt; 100:
                            break
                    variacao = [x for x in range(0, i + 1)]
            variacao.insert(0, variacao[0] - 1)
            variacao.insert(0, variacao[0] - 2)
            variacao.append(variacao[-1] + 1)
            variacao.append(variacao[-1] + 2)
            #retas x e y, respectivamente
            reta_y_posicao_x = self.width/float(len(variacao)) * (math.fabs(0 - variacao[0])) + 20
            self.canvas.create_line(0, self.height - 20, self.width, self.height - 20)
            if 0 in variacao:
                self.canvas.create_line(reta_y_posicao_x, 0, reta_y_posicao_x, self.height)
            else:
                reta_y_posicao_x = 20
            #desenha os pontos
            for ponto in variacao:
                try:
                    probabilidade = self.funcao(ponto)
                    x = self.width/float(len(variacao)) * (math.fabs(ponto - variacao[0])) + 20
                    y = (self.height - 40) * probabilidade
                    if limiteX1 != None and limiteX2 != None:
                        if limiteX1 &lt;= ponto &lt;= limiteX2:
                            self.canvas.create_oval(x - 2, self.height - y - 22, x + 2, self.height - y - 18, fill=&#39;red&#39;)
                            self.canvas.create_line(x, self.height - y - 20, x, self.height - 20, fill=&#39;red&#39;)
                        else:
                            self.canvas.create_oval(x - 2, self.height - y - 22, x + 2, self.height - y - 18, fill=&#39;black&#39;)
                            self.canvas.create_line(x, self.height - y - 20, x, self.height - 20, fill=&#39;black&#39;)
                    else:
                        self.canvas.create_oval(x - 2, self.height - y - 22, x + 2, self.height - y - 18, fill=&#39;black&#39;)
                        self.canvas.create_line(x, self.height - y - 20, x, self.height - 20, fill=&#39;black&#39;)
                except: pass
            limite = 11
            if limite &gt; len(variacao):
                limite = len(variacao)
            #desenha metricas na reta x
            for i in range(1, limite):
                index = i * (len(variacao) / float(limite))
                if index != int(index):
                    index += 1
                index = int(index)
                x = self.width/float(len(variacao)) * (math.fabs(variacao[index] - variacao[0])) + 20
                self.canvas.create_text(x, self.height - 10, text=str(variacao[index]))
            #desenha metricas probabilidade
            for i in range(1, 11):
                y = self.height * i/11.0 
                self.canvas.create_text(reta_y_posicao_x - 10, self.height - y - 20, text=str(0.1 * i))

    class JanelaDiscreta:
        def __init__(self, top_level, *parametros):
            self.top_level = top_level
            self.frame_left = Frame(top_level)
            self.frame_left.pack(side=LEFT)
            self.frame_right = Frame(top_level)
            self.frame_right.pack(side=RIGHT)
            self.frame_params = {}
            self.entries = {}
            for i in range(len(parametros)):
                parametro = parametros[i]
                self.frame_params[parametro] = Frame(self.frame_left)
                self.frame_params[parametro].pack()
                Label(self.frame_params[parametro], text=parametro).pack(side=LEFT)
                self.entries[parametro] = Entry(self.frame_params[parametro])
                self.entries[parametro].pack()
            self.frame_botao_ok = Frame(self.frame_left)
            self.frame_botao_ok.pack()
            self.botao_ok = Button(self.frame_botao_ok, text=&quot;Gerar&quot;)
            self.botao_ok[&#39;width&#39;] = 30
            self.botao_ok.pack()
            self.botao_ok.bind(&quot;&lt;Button-1&gt;&quot;, self.clica_botao_ok)
            self.frame_fp = Frame(self.frame_right)
            self.frame_fp.pack(side=LEFT)
            self.frame_fda = Frame(self.frame_right)
            self.frame_fda.pack(side=LEFT)
            Label(self.frame_fp, text=&quot;Função de probabilidade:&quot;).pack()
            self.graficoFd = GraficoDiscreto(self.frame_fp)
            Label(self.frame_fda, text=&quot;Função de distribuição acumulada:&quot;).pack()
            self.graficoF = GraficoDiscreto(self.frame_fda)
            self.frame_1 = Frame(self.frame_left)
            self.frame_2 = Frame(self.frame_1)
            self.frame_2.pack()
            Label(self.frame_2, text=&quot;       P(X = x):&quot;).pack(side=LEFT)
            self.x = Entry(self.frame_2)
            self.x.pack()
            self.frame_3 = Frame(self.frame_1)
            self.frame_3.pack()
            Label(self.frame_3, text=&quot;             F(x):&quot;).pack(side=LEFT)
            self.F = Entry(self.frame_3)
            self.F.pack()
            self.frame_4 = Frame(self.frame_1)
            self.frame_4.pack()
            self.botao_calcula = Button(self.frame_4, text=&quot;Calcular&quot;)
            self.botao_calcula[&#39;width&#39;] = 30
            self.botao_calcula.pack()
            self.botao_calcula.bind(&quot;&lt;Button-1&gt;&quot;, self.clica_botao_calcula)
            self.frame_5 = Frame(self.frame_1)
            self.frame_5.pack()
            self.labelE = Label(self.frame_5, text=&quot;E(X): &quot;)
            self.labelE.pack()
            self.labelVar = Label(self.frame_5, text=&quot;Var(X): &quot;)
            self.labelVar.pack()
            self.labelP = Label(self.frame_5)
            self.labelP.pack()
            self.labelF = Label(self.frame_5)
            self.labelF.pack()
        def clica_botao_ok(self, event):
            self.graficoFd.set_modelo(self.modelo, self.modelo.fp, None, None, False)
            self.graficoF.set_modelo(self.modelo, self.modelo.F, None, None, True)
            self.frame_1.pack()
            try:
                self.labelE.setParent(None)
                self.labelVar.setParent(None)
            except: pass
            self.labelE[&#39;text&#39;] = &quot;E(X): %.5f&quot; % self.modelo.e()
            self.labelVar[&#39;text&#39;] = &quot;Var(X): %.5f&quot; % self.modelo.var()
        def clica_botao_calcula(self, event):
            try:
                x = int(self.x.get())
                try:
                    self.labelP[&#39;text&#39;] = &quot;P(X = %d) = %.5f&quot; % (x, self.modelo.fp(x))
                    self.graficoFd.set_modelo(self.modelo, self.modelo.fp, x, x, False)
                except Exception, e:
                    tkMessageBox.showwarning(&quot;Ops...&quot;, e[0], parent=self.top_level)
            except:
                if self.x.get().replace(&quot; &quot;,&quot;&quot;) != &quot;&quot;:
                    tkMessageBox.showwarning(&quot;Ops...&quot;, &quot;x deve ser um número inteiro&quot;, parent=self.top_level)
                self.graficoFd.set_modelo(self.modelo, self.modelo.fp, None, None, False)
                self.labelP[&#39;text&#39;] = &quot;&quot;
            try:
                x = float(self.F.get())
                self.labelF[&#39;text&#39;] = &quot;F(%.2f) = %.5f&quot; % (x, self.modelo.F(x))
                self.graficoF.set_modelo(self.modelo, self.modelo.F, 0, x, True)
            except:
                self.graficoF.set_modelo(self.modelo, self.modelo.F, None, None, True)
                self.labelF[&#39;text&#39;] = &quot;&quot;
        
    class JanelaBinomial(JanelaDiscreta):
        def __init__(self, top_level):
            JanelaDiscreta.__init__(self, top_level, &quot;Parâmetro n&quot;, &quot;Parâmetro p&quot;)
        def clica_botao_ok(self, event):
            n = self.entries[&quot;Parâmetro n&quot;].get()
            p = self.entries[&quot;Parâmetro p&quot;].get()
            try:
                self.modelo = Binomial(n, p)
                JanelaDiscreta.clica_botao_ok(self, event)
            except Exception, e:
                tkMessageBox.showwarning(&quot;Ops...&quot;, e[0], parent=self.top_level)

    class JanelaHipergeometrico(JanelaDiscreta):
        def __init__(self, top_level):
            JanelaDiscreta.__init__(self, top_level, &quot;Parâmetro N&quot;, &quot;Parâmetro r&quot;, &quot;Parâmetro n&quot;)
        def clica_botao_ok(self, event):
            N = self.entries[&quot;Parâmetro N&quot;].get()
            r = self.entries[&quot;Parâmetro r&quot;].get()
            n = self.entries[&quot;Parâmetro n&quot;].get()
            try:
                self.modelo = Hipergeometrico(N, r, n)
                JanelaDiscreta.clica_botao_ok(self, event)
            except Exception, e:
                tkMessageBox.showwarning(&quot;Ops...&quot;, e[0], parent=self.top_level)

    class JanelaGeometrico(JanelaDiscreta):
        def __init__(self, top_level):
            JanelaDiscreta.__init__(self, top_level, &quot;Parâmetro p&quot;)
        def clica_botao_ok(self, event):
            p = self.entries[&quot;Parâmetro p&quot;].get()
            try:
                self.modelo = Geometrico(p)
                JanelaDiscreta.clica_botao_ok(self, event)
            except Exception, e:
                tkMessageBox.showwarning(&quot;Ops...&quot;, e[0], parent=self.top_level)

    class JanelaPoisson(JanelaDiscreta):
        def __init__(self, top_level):
            JanelaDiscreta.__init__(self, top_level, &quot;Parâmetro gama&quot;)
        def clica_botao_ok(self, event):
            alfa = self.entries[&quot;Parâmetro gama&quot;].get()
            try:
                self.modelo = Poisson(alfa)
                JanelaDiscreta.clica_botao_ok(self, event)
            except Exception, e:
                tkMessageBox.showwarning(&quot;Ops...&quot;, e[0], parent=self.top_level)


    class GraficoContinuo(Grafico):
        def desenha(self, limiteX1, limiteX2, acumulada):
            self.canvas.delete(&quot;all&quot;)
            if isinstance(self.modelo, Uniforme):
                a = self.modelo.a
                b = self.modelo.b + 1
            elif isinstance(self.modelo, Exponencial):
                a = -1
                b = 0
                while self.modelo.F(b) &lt; 0.995:
                    b += 1
                    if b &gt; 100:
                        break
            elif isinstance(self.modelo, Normal):
                a = 0
                while self.modelo.F(a) &gt; 0:
                    a -= 1
                b = 0
                while self.modelo.F(b) &lt; 1:
                    b += 1
            l = math.fabs(b-a)/1000.0 
            tamanho = math.fabs(b-a) 
            variacao = [x*l+a for x in range(0, 1000)]
            #retas x e y, respectivamente
            reta_y_posicao_x = self.width/float(tamanho) * (math.fabs(0 - variacao[0])) + 20
            self.canvas.create_line(0, self.height - 20, self.width, self.height - 20)
            if variacao[0] &lt;= 0 &lt;= variacao[-1]:
                self.canvas.create_line(reta_y_posicao_x, 0, reta_y_posicao_x, self.height)
            else:
                reta_y_posicao_x = 20
            #desenha os pontos
            for indice, ponto in enumerate(variacao):
                try:
                    if acumulada:
                        probabilidade = self.funcao(ponto)
                    else:
                        probabilidade = self.funcao(variacao[indice], variacao[indice+1]) * 100
                    x = self.width/float(tamanho) * (math.fabs(ponto - variacao[0])) + 20
                    y = (self.height - 40) * probabilidade
                    if limiteX1 != None and limiteX2 != None:
                        if limiteX1 &lt;= ponto &lt;= limiteX2:
                            self.canvas.create_line(x, self.height - y - 20, x + 1, self.height - y - 20, fill=&#39;red&#39;)
                            self.canvas.create_line(x, self.height - y - 20, x, self.height - 20, fill=&#39;red&#39;)
                        else:
                            self.canvas.create_line(x, self.height - y - 20, x + 1, self.height - y - 20, fill=&#39;black&#39;)
                            self.canvas.create_line(x, self.height - y - 20, x, self.height - 20, fill=&#39;black&#39;)
                    else:
                        self.canvas.create_line(x, self.height - y - 20, x + 1, self.height - y - 20, fill=&#39;black&#39;)
                        self.canvas.create_line(x, self.height - y - 20, x, self.height - 20, fill=&#39;black&#39;)
                except: pass
            limite = 11
            #desenha metricas na reta x
            for i in range(1, limite):
                index = i * len(variacao) / float(limite)
                index = int(index) 
                tamanhoInicial = math.fabs(variacao[index] - variacao[0])
                tamanhoTotal = math.fabs(variacao[-1] - variacao[0])
                factor = tamanhoInicial / float(tamanhoTotal) 
                x = self.width * factor + 20
                self.canvas.create_text(x, self.height - 10, text=str(variacao[index]))
            #desenha metricas probabilidade
            for i in range(1, 11):
                y = self.height * i/11.0 
                self.canvas.create_text(reta_y_posicao_x - 10, self.height - y - 20, text=str(0.1 * i))

        def desenha22(self, limiteX1, limiteX2, acumulada):
            self.canvas.delete(&quot;all&quot;)
            if isinstance(self.modelo, Uniforme):
                variacao = [x for x in range(int(self.modelo.a * 100), int((self.modelo.b + 1) * 100 ))]
            elif isinstance(self.modelo, Exponencial):
                variacao = [x for x in range(0, 10 * 100)]
            elif isinstance(self.modelo, Normal):
                inflexao = 3.5 * self.modelo.o2 + self.modelo.u
                inicial = (self.modelo.u - inflexao) * 100
                final = (self.modelo.u + inflexao) * 100
                variacao = [x for x in range(int(inicial), int(final))]
            #retas x e y, respectivamente
            reta_y_posicao_x = (self.width - 20)/float(len(variacao)) * (math.fabs(0 - variacao[0])) + 40
            self.canvas.create_line(0, self.height - 20, self.width, self.height - 20)
            self.canvas.create_line(reta_y_posicao_x, 0, reta_y_posicao_x, self.height)
            #desenha os pontos
            for ponto in variacao:
                if acumulada:
                    probabilidade = self.funcao(ponto/100.0)
                else:
                    probabilidade = self.funcao(ponto/100.0, ponto/100.0 + 1)
                x = (self.width+40)/float(len(variacao)) * (math.fabs(ponto - variacao[0])) + 40
                y = (self.height - 30) * probabilidade
                if limiteX1 != None and limiteX2 != None:
                    if limiteX1 &lt;= ponto/100.0 + 0.5 &lt;= limiteX2:
                        self.canvas.create_line(x, self.height - y - 20, x + 1, self.height - 20, fill=&#39;red&#39;)
                    else:
                        self.canvas.create_line(x, self.height - y - 20, x + 1, self.height - 20, fill=&#39;black&#39;)
                else:
                    self.canvas.create_line(x, self.height - y - 20, x + 1, self.height - 20, fill=&#39;black&#39;)
            limite = 11
            if limite &gt; len(variacao):
                limite = len(variacao)
            #desenha metricas na reta x
            for i in range(1, limite):
                index = i * (len(variacao) / float(limite))
                if index != int(index):
                    index += 1
                index = int(index)
                x = (self.width - 20)/float(len(variacao)) * (math.fabs(variacao[index] - variacao[0])) + 40
                self.canvas.create_text(x, self.height - 10, text=&quot;%.2f&quot; % (variacao[index]/100.0))
            #desenha metricas probabilidade
            for i in range(1, 11):
                y = self.height / 11.0 * i 
                self.canvas.create_text(reta_y_posicao_x - 20, self.height - y - 10, text=str(0.1 * i))

    class JanelaContinua:
        def __init__(self, top_level, *parametros):
            self.top_level = top_level
            self.frame_left = Frame(top_level)
            self.frame_left.pack(side=LEFT)
            self.frame_right = Frame(top_level)
            self.frame_right.pack(side=RIGHT)
            self.frame_params = {}
            self.entries = {}
            for i in range(len(parametros)):
                parametro = parametros[i]
                self.frame_params[parametro] = Frame(self.frame_left)
                self.frame_params[parametro].pack()
                Label(self.frame_params[parametro], text=&quot;        &quot; +parametro).pack(side=LEFT)
                self.entries[parametro] = Entry(self.frame_params[parametro])
                self.entries[parametro].pack()
            self.frame_botao_ok = Frame(self.frame_left)
            self.frame_botao_ok.pack()
            self.botao_ok = Button(self.frame_botao_ok, text=&quot;Gerar&quot;)
            self.botao_ok[&#39;width&#39;] = 35
            self.botao_ok.pack()
            self.botao_ok.bind(&quot;&lt;Button-1&gt;&quot;, self.clica_botao_ok)
            self.frame_fp = Frame(self.frame_right)
            self.frame_fp.pack(side=LEFT)
            self.frame_fda = Frame(self.frame_right)
            self.frame_fda.pack(side=LEFT)
            Label(self.frame_fp, text=&quot;Função distribuição de probabilidade:&quot;).pack()
            self.graficoFd = GraficoContinuo(self.frame_fp)
            Label(self.frame_fda, text=&quot;Função de distribuição acumulada:&quot;).pack()
            self.graficoF = GraficoContinuo(self.frame_fda)
            self.frame_1 = Frame(self.frame_left)
            self.frame_2 = Frame(self.frame_1)
            self.frame_2.pack()
            Label(self.frame_2, text=&quot;P(a &lt;= x &lt;= b):&quot;).pack(side=LEFT)
            self.x1 = Entry(self.frame_2)
            self.x1.pack()
            self.x2 = Entry(self.frame_2)
            self.x2.pack(side=RIGHT)
            self.frame_3 = Frame(self.frame_1)
            self.frame_3.pack()
            Label(self.frame_3, text=&quot;                  F(x):&quot;).pack(side=LEFT)
            self.F = Entry(self.frame_3)
            self.F.pack()
            self.frame_4 = Frame(self.frame_1)
            self.frame_4.pack()
            self.botao_calcula = Button(self.frame_4, text=&quot;Calcular&quot;)
            self.botao_calcula[&#39;width&#39;] = 35
            self.botao_calcula.pack()
            self.botao_calcula.bind(&quot;&lt;Button-1&gt;&quot;, self.clica_botao_calcula)
            self.frame_5 = Frame(self.frame_1)
            self.frame_5.pack()
            self.labelE = Label(self.frame_5, text=&quot;E(X): &quot;)
            self.labelE.pack()
            self.labelVar = Label(self.frame_5, text=&quot;Var(X): &quot;)
            self.labelVar.pack()
            self.labelP = Label(self.frame_5)
            self.labelP.pack()
            self.labelF = Label(self.frame_5)
            self.labelF.pack()
        def clica_botao_ok(self, event):
            self.graficoFd.set_modelo(self.modelo, self.modelo.fdp, None, None, False)
            self.graficoF.set_modelo(self.modelo, self.modelo.F, None, None, True)
            self.frame_1.pack()
            try:
                self.labelE.setParent(None)
                self.labelVar.setParent(None)
            except: pass
            self.labelE[&#39;text&#39;] = &quot;E(X): %.5f&quot; % self.modelo.e()
            self.labelVar[&#39;text&#39;] = &quot;Var(X): %.5f&quot; % self.modelo.var()
        def clica_botao_calcula(self, event):
            try:
                x = float(self.x1.get())
                y = float(self.x2.get())
                try:
                    self.labelP[&#39;text&#39;] = &quot;P(%.2f &lt;= X &lt;= %.2f) = %.5f&quot; % (x, y, self.modelo.fdp(x, y))
                    self.graficoFd.set_modelo(self.modelo, self.modelo.fdp, x, y, False)
                except Exception, e:
                    tkMessageBox.showwarning(&quot;Ops...&quot;, e[0], parent=self.top_level)
            except:
                if self.x1.get().replace(&quot; &quot;,&quot;&quot;) != &quot;&quot; or self.x2.get().replace(&quot; &quot;,&quot;&quot;) != &quot;&quot;:
                    tkMessageBox.showwarning(&quot;Ops...&quot;, &quot;x deve ser um número inteiro&quot;, parent=self.top_level)
                self.graficoFd.set_modelo(self.modelo, self.modelo.fdp, None, None, False)
                self.labelP[&#39;text&#39;] = &quot;&quot;
            try:
                x = float(self.F.get())
                self.labelF[&#39;text&#39;] = &quot;F(%.2f) = %.5f&quot; % (x, self.modelo.F(x))
                self.graficoF.set_modelo(self.modelo, self.modelo.F, -9999999999999, x, True)
            except:
                self.graficoF.set_modelo(self.modelo, self.modelo.F, None, None, True)
                self.labelF[&#39;text&#39;] = &quot;&quot;
        
    class JanelaUniforme(JanelaContinua):
        def __init__(self, top_level):
            JanelaContinua.__init__(self, top_level, &quot;Parâmetro a&quot;, &quot;Parâmetro b&quot;)
        def clica_botao_ok(self, event):
            a = self.entries[&quot;Parâmetro a&quot;].get()
            b = self.entries[&quot;Parâmetro b&quot;].get()
            try:
                self.modelo = Uniforme(a, b)
                JanelaContinua.clica_botao_ok(self, event)
            except Exception, e:
                tkMessageBox.showwarning(&quot;Ops...&quot;, e[0], parent=self.top_level)
                
    class JanelaExponencial(JanelaContinua):
        def __init__(self, top_level):
            JanelaContinua.__init__(self, top_level, &quot;Parâmetro alfa&quot;)
        def clica_botao_ok(self, event):
            a = self.entries[&quot;Parâmetro alfa&quot;].get()
            try:
                self.modelo = Exponencial(a)
                JanelaContinua.clica_botao_ok(self, event)
            except Exception, e:
                tkMessageBox.showwarning(&quot;Ops...&quot;, e[0], parent=self.top_level)

    class JanelaNormal(JanelaContinua):
        def __init__(self, top_level):
            JanelaContinua.__init__(self, top_level, &quot;Média&quot;, &quot;Variância&quot;)
        def clica_botao_ok(self, event):
            u = self.entries[&quot;Média&quot;].get()
            o2 = self.entries[&quot;Variância&quot;].get()
            try:
                self.modelo = Normal(u, o2)
                JanelaContinua.clica_botao_ok(self, event)
            except Exception, e: 
                tkMessageBox.showwarning(&quot;Ops...&quot;, e[0], parent=self.top_level)
                
    raiz = Tk()
    raiz.title(&quot;Mesquita 1.0&quot;)
    JanelaPrincipal(raiz)
    raiz.mainloop()
</code></pre></noscript></div>

</div>


<p></input></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Little Things That Can Make Your Java Programs Better]]></title>
    <link href="http://abner-math.github.io/blog/2014/10/18/little-things-that-can-make-your-java-programs-better/"/>
    <updated>2014-10-18T11:17:45-03:00</updated>
    <id>http://abner-math.github.io/blog/2014/10/18/little-things-that-can-make-your-java-programs-better</id>
    <content type="html"><![CDATA[<p>On the past months I&rsquo;ve been reading this incredible book called <a href="http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672">Refactoring: Improving the design of existing code</a>, by Martin Fowler.</p>

<p>This one is classic on Software Engineering, and somewhat changed the way I think about software design in general.</p>

<p>In the book there are dozens or hundreds of examples and tips. I gathered <strong>five</strong> that I consider easier and simpler to be applied but still have some impact on final product. Those tips, though inspired in the book, are also product of my own experience.</p>

<p>I picked Java cause that&rsquo;s my more familiar language and it&rsquo;s also the book language choice.</p>

<!-- more -->


<h2>1. Do not create a &ldquo;set&rdquo; method for an attribute that can&rsquo;t change</h2>

<p>This tip seems a bit foolish, and it really is, but you won&rsquo;t believe the amount of times this mistake is done over and over again.</p>

<p>But, wait! Does an attribute that can&rsquo;t change really make sense? It does! It&rsquo;s too common nowadays to use some form of ORM (Object Relation Mapping), where some attribute will become the primary key. Allowing the programmer to change the attribute that representates the primary key may lead to some form of inconsistency in some extreme cases.</p>

<p>If you aren&rsquo;t still convinced, just remember: Why wasting time doing something unnecessary? Less lines = better!</p>

<h2>2. Do not allow classes modify other classes collections</h2>

<p>This tip seems bit &ldquo;fishy&rdquo; at first. Actually, classes can indeed modify other classes collections, the problem here is the way it&rsquo;s done. Let me show you by example:</p>

<figure class='code'><figcaption><span>System.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">System</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">users</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUsers</span><span class="o">(</span><span class="n">Set</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">users</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">users</span> <span class="o">=</span> <span class="n">users</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Usuario</span><span class="o">&gt;</span> <span class="nf">getUsers</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">users</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>PrivacyInvader.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PrivacyInvader</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">System</span> <span class="n">system</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">addUser</span><span class="o">(</span><span class="n">String</span> <span class="n">login</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">system</span><span class="o">.</span><span class="na">getUsers</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nf">User</span><span class="o">(</span><span class="n">login</span><span class="o">,</span> <span class="n">password</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">removeUser</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">system</span><span class="o">.</span><span class="na">getUsers</span><span class="o">().</span><span class="na">remove</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>What&rsquo;s the problem of this design?</p>

<p>The problem is that the &ldquo;PrivacyInvader&rdquo; class is adding and removing elements of &ldquo;users&rdquo; collection from System in a direct way. Let&rsquo;s suppose you are using this collection to persist into your database from times to times. Now imagine that any class can insert any user, not respecting any constraint you put in this process, as, for example, a repeated user login. What will happen? Yea, you guessed right&hellip;</p>

<p>Another problem, this way a bit more subtile, is that &ldquo;User&rdquo; is being created in an inappropriated place. If we allow such things to happen, the User construtor will be called all over the code. What if now you want to change its signature? That&rsquo;s a classic problem of coupling. PrivacyInvader is knowing too much about User, where the only one who should know that much is that one that will really use it, in this case, &ldquo;System&rdquo;.</p>

<p>Now how do we fix all that? Let&rsquo;s start fixing the second problem listed.</p>

<figure class='code'><figcaption><span>System.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">System</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">users</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUsers</span><span class="o">(</span><span class="n">Set</span><span class="o">&lt;</span><span class="n">Usuario</span><span class="o">&gt;</span> <span class="n">users</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">users</span> <span class="o">=</span> <span class="n">users</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Usuario</span><span class="o">&gt;</span> <span class="nf">getUsers</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">users</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">addUser</span><span class="o">(</span><span class="n">String</span> <span class="n">login</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">users</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nf">User</span><span class="o">(</span><span class="n">login</span><span class="o">,</span> <span class="n">password</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">removeUser</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">users</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>PrivacyInvader.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PrivacyInvader</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">System</span> <span class="n">system</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">addUser</span><span class="o">(</span><span class="n">String</span> <span class="n">login</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">system</span><span class="o">.</span><span class="na">addUser</span><span class="o">(</span><span class="n">login</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">removeUser</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">system</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Much better now! Now User class coupling was reduced to System class. So what do we do now to avoid direct access to our collection? One way would be to remove the &ldquo;get&rdquo; method, but this is a sub-optimal solution, since sometimes we do really need to access the collection.</p>

<p>Happily, Java provides us an elegant solution to solve this problem: Collections.unmodifiable!</p>

<p>Collections.unmodifiable is a set of methods which receive a collection and return this collection modified in such way that it doesn&rsquo;t allow any insert or delete method, only search methods as &ldquo;get&rdquo;! Awesome, isn&rsquo;t it? :P</p>

<p>Here is some supported methods:</p>

<ul>
<li>Collections.unmodifiableList(originalList);</li>
<li>Collections.unmodifiableSet(originalSet);</li>
<li>Collections.unmodifiableMap(originalMap);</li>
<li>Collections.unmodifiableCollection(originalCollection);</li>
</ul>


<p>And that&rsquo;s our solution using this little trick:</p>

<figure class='code'><figcaption><span>Sistema.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.Collections</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">System</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">users</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">getUsers</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Collections</span><span class="o">.</span><span class="na">unmodifiableSet</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">users</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">addUser</span><span class="o">(</span><span class="n">String</span> <span class="n">login</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">users</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nf">User</span><span class="o">(</span><span class="n">login</span><span class="o">,</span> <span class="n">password</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">removeUser</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">users</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also notice we removed the &ldquo;set&rdquo; method for the collection. The reason was explained in topic #1 :P</p>

<h2>3. Let a method be public only if really necessary</h2>

<p>Some OOPs gurus say that the worth of a class is its interface. And I can&rsquo;t agree more. Simpler interfaces are easier to use, you don&rsquo;t need to search the method that does &ldquo;this&rdquo; or &ldquo;that&rdquo; because they are fewer.</p>

<p>Of course, I&rsquo;m not saying: Create as less methods as possible. What I&rsquo;m saying is: Create as much methods as possible (indeed, it&rsquo;s even encouraged, since more methods lead to smaller methods and smaller methods are easier to understand), but let all the auxiliar methods <strong>private</strong>.</p>

<h2>4. Know when to use Enum and when to use Inheritance</h2>

<p>That&rsquo;s a trick one, isn&rsquo;t it? Enum is a big ally. It saves times. But enums are almost always followed by switch statements. And switch statements are evil. Why? Because they are not flexible enough to change. If you want to add a new enum value, for example, you must have to change ALL the switch statements that use that enum. And it&rsquo;s <strong>bad</strong>! Changes like that almost always lead to bugs. Here is an example:</p>

<figure class='code'><figcaption><span>Role.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">enum</span> <span class="n">Role</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">TRAINEE</span><span class="o">,</span> <span class="n">JUNIOR</span><span class="o">,</span> <span class="n">EXPERT</span><span class="o">,</span> <span class="n">SENIOR</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>Developer.java </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Developer</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">Role</span> <span class="n">role</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">double</span> <span class="nf">getSalary</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">switch</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">role</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">case</span> <span class="nl">TRAINEE:</span>
</span><span class='line'>              <span class="k">return</span> <span class="mi">500</span><span class="o">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="nl">JUNIOR:</span>
</span><span class='line'>              <span class="k">return</span> <span class="mi">1000</span><span class="o">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="nl">EXPERT:</span>
</span><span class='line'>              <span class="k">return</span> <span class="mi">2000</span><span class="o">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="nl">SENIOR:</span>
</span><span class='line'>              <span class="k">return</span> <span class="mi">4000</span><span class="o">;</span>
</span><span class='line'>          <span class="k">default</span><span class="o">:</span>
</span><span class='line'>              <span class="k">throw</span> <span class="k">new</span> <span class="nf">RoleException</span><span class="o">(</span><span class="s">&quot;Invalid role.&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">promote</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">switch</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">role</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">case</span> <span class="nl">TRAINEE:</span>
</span><span class='line'>              <span class="k">this</span><span class="o">.</span><span class="na">role</span> <span class="o">=</span> <span class="n">Role</span><span class="o">.</span><span class="na">JUNIOR</span><span class="o">;</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="nl">JUNIOR:</span>
</span><span class='line'>              <span class="k">this</span><span class="o">.</span><span class="na">role</span> <span class="o">=</span> <span class="n">Role</span><span class="o">.</span><span class="na">EXPERT</span><span class="o">;</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="nl">EXPERT:</span>
</span><span class='line'>              <span class="k">this</span><span class="o">.</span><span class="na">role</span> <span class="o">=</span> <span class="n">Role</span><span class="o">.</span><span class="na">SENIOR</span><span class="o">;</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>          <span class="k">default</span><span class="o">:</span>
</span><span class='line'>              <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This could be done is a similar way using Inheritance and polymorphism:</p>

<figure class='code'><figcaption><span>Role.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Role</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">double</span> <span class="nf">getSalary</span><span class="o">();</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">promote</span><span class="o">(</span><span class="n">Developer</span> <span class="n">context</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<figure class='code'><figcaption><span>Trainee.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Trainee</span> <span class="kd">implements</span> <span class="n">Role</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">double</span> <span class="nf">getSalary</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">500</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">promote</span><span class="o">(</span><span class="n">Developer</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">context</span><span class="o">.</span><span class="na">setRole</span><span class="o">(</span><span class="k">new</span> <span class="nf">Junior</span><span class="o">());</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<figure class='code'><figcaption><span>Junior.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Junior</span> <span class="kd">implements</span> <span class="n">Role</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">double</span> <span class="nf">getSalary</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">1000</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">promote</span><span class="o">(</span><span class="n">Developer</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">context</span><span class="o">.</span><span class="na">setRole</span><span class="o">(</span><span class="k">new</span> <span class="nf">Expert</span><span class="o">());</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<figure class='code'><figcaption><span>Expert.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Expert</span> <span class="kd">implements</span> <span class="n">Role</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">double</span> <span class="nf">getSalary</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">2000</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">promote</span><span class="o">(</span><span class="n">Developer</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">context</span><span class="o">.</span><span class="na">setRole</span><span class="o">(</span><span class="k">new</span> <span class="nf">Senior</span><span class="o">());</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<figure class='code'><figcaption><span>Senior.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Senior</span> <span class="kd">implements</span> <span class="n">Role</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">double</span> <span class="nf">getSalary</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">4000</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">promote</span><span class="o">(</span><span class="n">Developer</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<figure class='code'><figcaption><span>Developer.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Developer</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Role</span> <span class="n">role</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">setRole</span><span class="o">(</span><span class="n">Role</span> <span class="n">role</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">role</span> <span class="o">=</span> <span class="n">role</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">double</span> <span class="nf">getSalary</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">role</span><span class="o">.</span><span class="na">getSalary</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">promote</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">role</span><span class="o">.</span><span class="na">promote</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is very similar to <em>State</em> pattern from the Gange Of Four.</p>

<p>But anyway, what&rsquo;s the advantages of one over another?</p>

<p>The advantage of the second solution in comparison to the first is that, if we want to add a new role in the hierarchy, we don&rsquo;t need to modify any line of code other than the new class itself.</p>

<p>But, hey! I&rsquo;m not saying to throw the Enum in the gargabe and never use it again. Far from it. What I&rsquo;m trying to say is that there are situations where the enum is not really appropriate. A role of thumb is: Never use enum to representate a hierarchy that can change. Use inheritance instead!</p>

<h2>5. Use affirmatives instead of negatives sentences in conditionals</h2>

<p>This tip is really simple. It won&rsquo;t affect your code quality directly, but it may make your code more readable, and that&rsquo;s so important that I can&rsquo;t emphasize it enough!</p>

<p>But why are affirmatives sentences more readable than negatives? Well, just try to read the following sentences:</p>

<blockquote><p>I do not want to not to go to Shopping</p></blockquote>

<p>And then compare to this:</p>

<blockquote><p>I want to go to Shopping</p></blockquote>

<p>Because in the core they mean the same things, with the difference the second contains redundant informations. Most of negatives sentences contain some kind of redundant information.</p>

<h2>Final thoughts</h2>

<p>Some tips were quite obvious and intuitives, and some weren&rsquo;t. Well, but so is life&hellip; I don&rsquo;t expect you to agree with all I said here, neither you should! It&rsquo;s through discussion we can grow up, so, if you have a different opinion from mine, don&rsquo;t hesitate to comment! See ya!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(Java) Hashboom]]></title>
    <link href="http://abner-math.github.io/blog/2014/09/28/java-hashboom/"/>
    <updated>2014-09-28T15:19:25-03:00</updated>
    <id>http://abner-math.github.io/blog/2014/09/28/java-hashboom</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s some fool game I made some time ago in an attempt to learn about Swing. Have fun!</p>

<p style="text-align:center;"><img src="http://abner-math.github.io/images/posts/hashboom.png" alt="" /></p>

<p style="text-align:center;"><a href="http://abner-math.github.io/downloads/code/Hashboom.jar">Click here to download</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(Python 2.7) PyInvaders]]></title>
    <link href="http://abner-math.github.io/blog/2014/09/27/python-2-dot-7-pyinvaders/"/>
    <updated>2014-09-27T12:16:32-03:00</updated>
    <id>http://abner-math.github.io/blog/2014/09/27/python-2-dot-7-pyinvaders</id>
    <content type="html"><![CDATA[<p>The last game of terminal games series, this time a copy of Space Invaders.</p>

<p style="text-align:center;"><img src="http://abner-math.github.io/images/posts/pyinvaders.png" alt="" /></p>

<center><a href="https://gist.githubusercontent.com/abner-math/05364c4b67d5ed265871/raw/20d1232a80ba6d335d78acb6f277d3855cb82395/PyInvaders.py" download="PyInvaders.py">Click here to download</a></center>




<!-- more -->


<p>Have fun!</p>

<center><input id="spoiler" type="button" value="See source code" onclick="toggle_visibility('code');"></center>


<div id="code">
<div><script src='https://gist.github.com/05364c4b67d5ed265871.js?file=PyInvaders.py'></script>
<noscript><pre><code>#!/usr/bin/python
# -*-coding=utf-8 -*-
#-----------------------------------------------------------
# PyInvaders v3.1
# Created by: Abner Matheus
# E-mail: abner.math.c@gmail.com
# Github: http://github.com/picoledelimao
#-----------------------------------------------------------
import time, os, platform, random, sys, select

class GameObject(object):
    def __init__(self, life, x, y, char):
        self.life = life
        self.x = x
        self.y = y
        self.char = char
    def getX(self):
        return self.x
    def getY(self):
        return self.y
    def getChar(self):
        return self.char
    def getLife(self):
        return self.life
    def setX(self, x):
        self.x = x
    def setY(self, y):
        self.y = y
    def damage(self):
        self.life -= 1
    def dead(self):
        return self.life &lt;= 0
    
class Game(object):
    def __init__(self):
        self.new_game()
    def new_game(self):
        self.spacecraft = GameObject(3, 13, 8, &quot;^&quot;)
        self.aliens = []
        self.create_aliens()
        self.walls = []
        self.create_walls()
        self.shoots = []
        self.shoots_aliens = []
        self.terrain = []
        self.create_terrain()
        self.score = 0
        self.cooldown = False
        self.start_screen = False
        self.mode_screen = False
        self.difficulty = 0
    def create_aliens(self):
        for x in range(5):
            for y in range(10):
                alien = GameObject(5-x, x+1, 4+y, &quot;@&quot;)
                self.aliens.append(alien)
    def create_walls(self):
        for i in range(4):
            wall = GameObject(1, 12, 3+i*3, &quot;~&quot;)
            self.walls.append(wall)
    def create_terrain(self):
        for x in range(15):
            self.terrain.append([])
            for y in range(15):
                self.terrain[-1].append(&quot; &quot;)
    def clear_terrain(self):
        for x in range(15):
            for y in range(15):
                self.terrain[x][y] = &quot; &quot;
    def draw_spacecraft(self):
        self.terrain[self.spacecraft.getX()][self.spacecraft.getY()] = self.spacecraft.getChar()
    def find_alien(self, x, y):
        for i in range(len(self.aliens)):
            alien = self.aliens[i]
            if alien.getX() == x and alien.getY() == y:
                return i
    def find_wall(self, x, y):
        for i in range(len(self.walls)):
            wall = self.walls[i]
            if wall.getX() == x and wall.getY() == y:
                return i
    def destroy_shoot(self, i):
        self.shoots.pop(i)
    def draw_shoots(self):
        for i in range(len(self.shoots) - 1, -1, -1):
            shoot = self.shoots[i]
            x = shoot.getX()
            y = shoot.getY()
            a = self.find_alien(x, y)
            if a != None:
                self.aliens[a].damage()
                if self.aliens[a].dead():
                    self.aliens.pop(a)
                    self.score += 10
                self.destroy_shoot(i)
            else:
                if x &gt; 0:
                    shoot.setX(x - 1)
                else:
                    self.destroy_shoot(i)
        for shoot in self.shoots:
            self.terrain[shoot.getX()][shoot.getY()] = shoot.getChar()
    def destroy_shoot_aliens(self, i):
        self.shoots_aliens.pop(i)
    def alien_shoot(self):
        x = random.randint(0, len(self.aliens)-1)
        alien = self.aliens[x]
        shoot = GameObject(1, alien.getX()+1, alien.getY(), &quot;:&quot;)
        self.shoots_aliens.append(shoot)
    def draw_shoots_aliens(self):
        if int(time.localtime().tm_sec) % (4-self.difficulty) == 0:
            self.alien_shoot()
        for i in range(len(self.shoots_aliens) - 1, -1, -1):
            shoot = self.shoots_aliens[i]
            x = shoot.getX()
            y = shoot.getY()
            m = self.find_wall(x, y)
            if m != None:
                self.walls[m].damage()
                if self.walls[m].dead():
                    self.walls.pop(m)
                self.destroy_shoot_aliens(i)
            elif x == self.spacecraft.getX() and y == self.spacecraft.getY():
                self.spacecraft.damage()
                if self.spacecraft.dead():
                    self.game_over()
                self.destroy_shoot_aliens(i)
            else:
                if x &lt; 14:
                    shoot.setX(x + 1)
                else:
                    self.destroy_shoot_aliens(i)
        for shoot in self.shoots_aliens:
            self.terrain[shoot.getX()][shoot.getY()] = shoot.getChar()
    def draw_aliens(self):
        for alien in self.aliens:
            self.terrain[alien.getX()][alien.getY()] = alien.getChar()
    def draw_walls(self):
        for wall in self.walls:
            self.terrain[wall.getX()][wall.getY()] = wall.getChar()
    def draw_terrain(self):
        for x in range(15):
            print &quot;&quot;.join(self.terrain[x])
    def update(self):
        if int(time.localtime().tm_sec) % self.difficulty == 0:
            self.cooldown = False
        print (&quot;SCORE&lt;%d&gt;&quot; % self.score).center(20)
        self.clear_terrain()
        self.draw_spacecraft()
        self.draw_shoots()
        self.draw_shoots_aliens()
        self.draw_aliens()
        self.draw_walls()
        self.draw_terrain()
        print (&quot;LIVES: %d&quot; % self.spacecraft.getLife()).center(20)
        if len(self.aliens) == 0:
            self.win()
            return False 
        elif self.spacecraft.dead():
            return False 
        return True 
    def move_right(self):
        if self.spacecraft.getY() &lt; 14:
            self.spacecraft.setY(self.spacecraft.getY() + 1)
    def move_left(self):
        if self.spacecraft.getY() &gt; 0:
            self.spacecraft.setY(self.spacecraft.getY() - 1)
    def shoot(self):
        if not self.cooldown:
            shoot = GameObject(1, 12, self.spacecraft.getY(), &quot;|&quot;)
            self.shoots.append(shoot)
            self.cooldown = True
    def game_over(self):
        clear_screen()
        print &quot;GAME OVER!!&quot;
        time.sleep(3)
    def win(self):
        clear_screen()
        print &quot;YOU ROCK!!&quot;
        time.sleep(3)
    def is_start_screen(self):
        return self.start_screen
    def start(self):
        if not self.mode_screen:
            print &quot;&quot;&quot;
                              ##          ##
                                ##      ##           
                              ##############
                            ####  ######  ####
                          ######################
                          ##  ##############  ##        
                          ##  ##          ##  ##
                                ####  ####
                                    ##
                                  ##
                                    ##
                                      ##
                                    ##
                                  ##
                                    ## &quot;&quot;&quot;
            print &quot;\n&quot;
            print &quot;PYINVADERS&quot;.center(70)
            print &quot;========= CREATED BY: =========&quot;.center(70)
            print &quot;ABNER MATHEUS (abner.math.c@gmail.com)&quot;.center(70)
            print &quot;\n&quot;
            print &quot;PRESS &#39;N&#39; TO START A NEW GAME OR &#39;ESC&#39; TO EXIT GAME.&quot;.center(70)
        else:
            if self.difficulty == 0:
                print &quot;&quot;&quot;DIFFICULTY:
1. EASY
2. AVERAGE
3. HARD

===================================
GAME CONTROLS:
===================================
&#39;A&#39; AND &#39;D&#39; TO MOVE THE SPACECRAFT.
&#39;S&#39; TO SHOOT.
                &quot;&quot;&quot;
            else:
                self.start_screen = True
    def new(self):
        self.mode_screen = True
    def set_difficulty(self, n):
        self.difficulty = n
       
def clear_screen():
    if platform.system() == &quot;Windows&quot;: os.system(&quot;cls&quot;)
    else: os.system(&quot;clear&quot;) 
    
#-------------------------------
# IO MANAGER
#--------------------------------
def controller_windows():
    import Tkinter
    class Controller:
        def __init__(self):
            self.game = Game() 
            self.start_game()
        def press_key(self, key):
            event = key.keysym.lower()
            if event == &quot;escape&quot;:
                self.console.destroy()
            elif event == &quot;d&quot;:
                self.game.move_right()
            elif event == &quot;a&quot;:
                self.game.move_left()
            elif event == &quot;s&quot;:
                self.game.shoot()
            elif event == &quot;n&quot;:
                self.game.new()
            elif event == &quot;1&quot;:
                self.game.set_difficulty(1)
            elif event == &quot;2&quot;:
                self.game.set_difficulty(2)
            elif event == &quot;3&quot;:
                self.game.set_difficulty(3)
            return True
        def loop(self): 
            clear_screen()
            if not self.game.is_start_screen():
                self.game.start()
            else:
                if not self.game.update():
                        self.game = Game()
            self.console.after(250, self.loop)
        def start_game(self):
            self.game.start()
            self.console = Tkinter.Tk()
            self.console.bind_all(&#39;&lt;Key&gt;&#39;, self.press_key)
            self.console.withdraw()
            try:
                self.console.after(250, self.loop)
                self.console.mainloop()
            except KeyboardInterrupt: pass
    Controller()
    
def controller_unix():
    import termios, tty, thread
    class NonBlockingConsole(object):
        def __enter__(self):
            self.old_settings = termios.tcgetattr(sys.stdin)
            tty.setcbreak(sys.stdin.fileno())
            return self
        def __exit__(self, type, value, traceback):
            termios.tcsetattr(sys.stdin, termios.TCSADRAIN, self.old_settings)
        def get_data(self):
            if select.select([sys.stdin], [], [], 0) == ([sys.stdin], [], []):
                return sys.stdin.read(1)
            return False
     
    class Controller:
        def __init__(self):
            self.game = Game() 
            self.start_game()
        def press_key(self, nbc):
            event = str(nbc.get_data())
            if event == &#39;\x1b&#39;:
                return False
            elif event == &quot;d&quot;:
                self.game.move_right()
            elif event == &quot;a&quot;:
                self.game.move_left()
            elif event == &quot;s&quot;:
                self.game.shoot()
            elif event == &quot;n&quot;:
                self.game.new()
            elif event == &quot;1&quot;:
                self.game.set_difficulty(1)
            elif event == &quot;2&quot;:
                self.game.set_difficulty(2)
            elif event == &quot;3&quot;:
                self.game.set_difficulty(3)
            return True
        def loop(self, threadName): 
            while self.running:
                time.sleep(250/1000.0)
                clear_screen()
                if not self.game.is_start_screen():
                    self.game.start()
                else:
                    if not self.game.update():
                        self.game = Game()
        def start_game(self):
            self.running = True
            thread.start_new_thread(self.loop, (&quot;Thread-1&quot;,))
            try:
                with NonBlockingConsole() as nbc:
                    while self.press_key(nbc): pass
            except KeyboardInterrupt: pass
            self.running = False
    Controller()
    
if __name__ == &#39;__main__&#39;:
    if platform.system() == &quot;Windows&quot;:
        controller_windows()
    else:
        controller_unix()
</code></pre></noscript></div>

</div>


<p></input></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(Python 2.7) PyPac]]></title>
    <link href="http://abner-math.github.io/blog/2014/09/19/python-2-dot-7-pypac/"/>
    <updated>2014-09-19T10:04:09-03:00</updated>
    <id>http://abner-math.github.io/blog/2014/09/19/python-2-dot-7-pypac</id>
    <content type="html"><![CDATA[<p>Here is another game of my series, this time about the classic Pacman.</p>

<p style="text-align:center;"><img src="http://abner-math.github.io/images/posts/pypac.png" alt="" /></p>

<center><a href="https://gist.githubusercontent.com/abner-math/892bf12a4a185721485f/raw/22189a1fd7443e29256bef4f2ea2f6dd6a7c9f23/PyPac.py" download="PyPac.py">Click here to download</a></center>




<!-- more -->


<p>Have fun!</p>

<center><input id="spoiler" type="button" value="See source code" onclick="toggle_visibility('code');"></center>


<div id="code">
<div><script src='https://gist.github.com/892bf12a4a185721485f.js?file=PyPac.py'></script>
<noscript><pre><code>#!/usr/bin/python
# -*-coding=utf-8 -*-
#-----------------------------------------------------------------
# PyPac v1.2
# Created by: Abner Matheus
# E-mail: abner.math.c@gmail.com
# Github: http://github.com/picoledelimao
#-----------------------------------------------------------------
import time, os, platform, sys, select, math
from random import randint
from copy import copy
 
&quot;&quot;&quot;
Store a (x, y) coordinate of the terrain
&quot;&quot;&quot;
class Position:
    def __init__(self, x, y):
        self.x = x
        self.y = y 
 
&quot;&quot;&quot;
Representates the terrain of the map.
The terrain is a bidimensional matrix that is mapped through
a string passed
&quot;&quot;&quot;
class Terrain:
    GHOST = (Position(11, 4), Position(10, 6), Position(11, 6), Position(12, 6))
    PACMAN = Position(10, 8)
    GHOST_CHAR = &#39;^&#39;
    GHOST_WEAKEN_CHAR = &#39;*&#39;
    PACMAN_CHAR = &#39;@&#39;
    BULLET = &#39;.&#39;
    GREATER_BULLET = &#39;0&#39;
    def __init__(self):
        self.terrain = map(lambda x: list(x), &quot;&quot;&quot;
  —————————————————— 
 |○•••|••••••••|•••○|
 |•——•|•——————•|•——•|
 |•|••••••••••••••|•|
—|•|•——•———-——•——•|•|—
  •••••••|   |••••••  
—|•|•——•——————•——•|•|—
 |•|•••••• •••••••|•|
 |•——•|•——————•|•——•|
 |○•••|••••••••|•••○|
  —————————————————— 
&quot;&quot;&quot;.replace(&quot;•&quot;, Terrain.BULLET).replace(&quot;○&quot;, Terrain.GREATER_BULLET).replace(&quot;—&quot;, &quot;=&quot;).split(&quot;\n&quot;))
    def is_blocked(self, position, direction):
        try:
            if position.x == 11 and position.y == 5 and direction == Direction.UPWARD: return False 
            char = self.terrain[position.y][position.x] 
            return char == &quot;|&quot; or char == &quot;=&quot; or char == &quot;-&quot;
        except: return True
    &quot;&quot;&quot;
    Makes the pacman eats bullets and increment game score in process
    &quot;&quot;&quot;
    def eat(self, context, pacman):
        position = self.terrain[pacman.position.y][pacman.position.x]
        if position == Terrain.BULLET:
            self.terrain[pacman.position.y][pacman.position.x] = &#39; &#39;
            context.context.score += 1 
        elif position == Terrain.GREATER_BULLET: 
            self.terrain[pacman.position.y][pacman.position.x] = &#39; &#39;
            context.context.score += 5  
            return True
        return False
    &quot;&quot;&quot;
    Verify is the terrain has no &#39;bullets&#39;
    &quot;&quot;&quot;
    def is_clear(self):
        for line in self.terrain:
            if &#39;.&#39; in line or &#39;0&#39; in line: return False
        return True
    @staticmethod
    def clear_screen():
        if platform.system() == &quot;Windows&quot;: os.system(&quot;cls&quot;)
        else: os.system(&quot;clear&quot;)
    &quot;&quot;&quot;
    Render the terrain on the screen
    &quot;&quot;&quot;
    def render(self, pacman, ghosts):
        Terrain.clear_screen()
        matrix = []
        for i in range(len(self.terrain)):
            matrix.append(list(self.terrain[i]))
        matrix[pacman.position.y][pacman.position.x] = Terrain.PACMAN_CHAR
        for ghost in ghosts:
            if ghost.is_weaken():
                matrix[ghost.position.y][ghost.position.x] = Terrain.GHOST_WEAKEN_CHAR
            else:
                matrix[ghost.position.y][ghost.position.x] = Terrain.GHOST_CHAR
        result = &quot;&quot;
        for i in range(len(matrix)):
            result += &quot;&quot;.join(matrix[i]) + &quot;\n&quot;
        print(result)
 
&quot;&quot;&quot;
Enumerate the possible directions that a walkable can take
&quot;&quot;&quot;
class Direction:
    FORWARD = 1
    BACKWARD = 2
    UPWARD = 3
    DOWNWARD = 4
 
&quot;&quot;&quot;
Representates a walkable object in the map (ghost and pacman)
&quot;&quot;&quot;
class Walkable:
    def __init__(self): pass
    def turn(self, direction):
        self.direction = direction
    &quot;&quot;&quot;
    Verify if given movement in a certain direction is possible
    &quot;&quot;&quot;
    def possible_movement(self, direction, terrain):
        if direction == Direction.FORWARD:
            return not terrain.is_blocked(Position(self.position.x + 1, self.position.y), direction)
        elif direction == Direction.BACKWARD:
            return not terrain.is_blocked(Position(self.position.x - 1, self.position.y), direction)
        elif direction == Direction.UPWARD:
            return not terrain.is_blocked(Position(self.position.x, self.position.y - 1), direction)
        elif direction == Direction.DOWNWARD:
            return not terrain.is_blocked(Position(self.position.x, self.position.y + 1), direction)
    &quot;&quot;&quot;
    Move the object toward its direction. Return false case the movement is not possible.
    &quot;&quot;&quot;
    def move(self, terrain):
        if self.direction == Direction.FORWARD and self.position.x &gt;= len(terrain.terrain[self.position.y]) - 1:
            self.position.x = 0
        elif self.direction == Direction.BACKWARD and self.position.x &lt;= 0:
            self.position.x = len(terrain.terrain[self.position.y]) - 1
        elif self.possible_movement(self.direction, terrain): 
            if self.direction == Direction.FORWARD:
                self.position.x += 1
            elif self.direction == Direction.BACKWARD:
                self.position.x -= 1
            elif self.direction == Direction.UPWARD:
                self.position.y -= 1
            elif self.direction == Direction.DOWNWARD:
                self.position.y += 1
        else: return False
        return True
 
&quot;&quot;&quot;
Representates the ghosts in the map.
A ghost is a walkable
&quot;&quot;&quot;
class Ghost(Walkable):
    def __init__(self, number):
        Walkable.__init__(self)
        self.position = copy(Terrain.GHOST[number])
        self.isWeaken = False
        self.direction = Direction.UPWARD
    &quot;&quot;&quot;
    Verify is ghost is weaken (frightened)
    &quot;&quot;&quot;
    def is_weaken(self):
        return self.isWeaken
    &quot;&quot;&quot;
    Weaken the ghost, making it &#39;eatable&#39; by Pacman
    &quot;&quot;&quot;
    def weaken(self):
        self.isWeaken = True
    &quot;&quot;&quot;
    Strengthen the ghost, making it dangerous to Pacman
    &quot;&quot;&quot;
    def strengthen(self):
        self.isWeaken = False
 
&quot;&quot;&quot;
Representates the Pacman
&quot;&quot;&quot;
class Pacman(Walkable):
    def __init__(self):
        Walkable.__init__(self)
        self.position = copy(Terrain.PACMAN)
        self.direction = Direction.FORWARD
 
&quot;&quot;&quot;
Main class of the game.
It receives the input of the user and maps it to its state.
&quot;&quot;&quot;
class Game:
    def __init__(self):
        self.lives = 3
        self.score = 0
        self.level = 1
        self.state = StateInitial(self)
    &quot;&quot;&quot;
    Main loop of the game
    &quot;&quot;&quot;
    def loop(self):
        self.state.loop()
    &quot;&quot;&quot;
    Set a direction of Pacman. Only work in StatePlaying.
    &quot;&quot;&quot;
    def set_direction(self, direction):
        self.state.set_direction(direction)
    &quot;&quot;&quot;
    Start a new game.
    &quot;&quot;&quot;
    def start_new_game(self):
        self.state.start_new_game()
 
&quot;&quot;&quot;
Superclass of states of a game
&quot;&quot;&quot;
class GameState:
    def __init__(self): pass
    def loop(self):  raise NotImplementedException()
    def set_direction(self, direction): raise NotImplementedException()
    def start_new_game(self): raise NotImplementedException()
 
&quot;&quot;&quot;
Initial screen of the game.
&quot;&quot;&quot;
class StateInitial(GameState):
    def __init__(self, context):
        GameState.__init__(self)
        self.context = context
        self.context.lives = 3
        self.context.score = 0
        self.context.level = 1
    def loop(self): 
        message = &quot;&quot;&quot;
 ____  __ __  ____   ____    __ 
|    \|  |  ||    \ /    |  /  ]   ──▒▒▒▒▒────▄████▄─────
|  o  )  |  ||  o  )  o  | /  /    ─▒─▄▒─▄▒──███▄█▀──────
|   _/|  ~  ||   _/|     |/  /     ─▒▒▒▒▒▒▒─▐████──█──█──
|  |  |___, ||  |  |  _  /   \_    ─▒▒▒▒▒▒▒──█████▄──────
|  |  |     ||  |  |  |  \     |   ─▒─▒─▒─▒───▀████▀─────
|__|  |____/ |__|  |__|__|\____|
                                
GAME CONTROLS:
-----------------------------
PRESS &#39;N&#39; TO START A NEW GAME.
&#39;A&#39;, &#39;S&#39;, &#39;D&#39;, &#39;W&#39; TO MOVE.
&#39;ESC&#39; TO EXIT GAME.
-----------------------------
 
CREATED BY:
-----------------------------
ABNER MATHEUS (abner.math.c@gmail.com)
&quot;&quot;&quot;
        Terrain.clear_screen()
        print(message.decode(&#39;utf-8&#39;))
    def set_direction(self, direction): pass
    def start_new_game(self):
        self.context.state = StatePlaying(self.context) 
 
class StateGameOver(GameState):
    def __init__(self, context):
        GameState.__init__(self)
        self.context = context
    def loop(self): 
        Terrain.clear_screen()
        print(&quot;&quot;&quot;
  ____   ____  ___ ___    ___       ___   __ __    ___  ____  
 /    | /    ||   |   |  /  _]     /   \ |  |  |  /  _]|    \ 
|   __||  o  || _   _ | /  [_     |     ||  |  | /  [_ |  D  )
|  |  ||     ||  \_/  ||    _]    |  O  ||  |  ||    _]|    / 
|  |_ ||  _  ||   |   ||   [_     |     ||  :  ||   [_ |    \ 
|     ||  |  ||   |   ||     |    |     | \   / |     ||  .  \ 
|___,_||__|__||___|___||_____|     \___/   \_/  |_____||__|\_|
                                                              
PRESS &#39;N&#39; TO START A NEW GAME.&quot;&quot;&quot;.decode(&#39;utf-8&#39;))
    def set_direction(self, direction): pass
    def start_new_game(self):
        self.context.state = StateInitial(self.context)
 
&quot;&quot;&quot;
Main state of the game.
Here is where the stuff happens.
&quot;&quot;&quot;
class StatePlaying(GameState):
    def __init__(self, context):
        GameState.__init__(self)
        self.context = context
        self.start_new_level()
    &quot;&quot;&quot;
    Get the angle between two vectors.
    &quot;&quot;&quot;
    def __get_angle(self, w1, w2):
        return math.degrees(math.atan2((w2.position.y - w1.position.y), (w2.position.x - w1.position.x)))
    &quot;&quot;&quot;
    Convert a given angle in a direction.
    &quot;&quot;&quot;
    def __get_direction(self, angle):
        if 0 &lt;= angle &lt; 45:
            return Direction.FORWARD
        elif 45 &lt;= angle &lt; 135:
            return Direction.UPWARD
        elif 135 &lt;= angle &lt; 225:
            return Direction.BACKWARD
        elif 225 &lt;= angle &lt; 315:
            return Direction.DOWNWARD
        elif 315 &lt;= angle &lt; 360:
            return Direction.FORWARD
        return Direction.FORWARD
    &quot;&quot;&quot;
    Verify is two vectors are equal
    &quot;&quot;&quot;
    def __equals(self, p1, p2):
        return p1.x == p2.x and p1.y == p2.y
    &quot;&quot;&quot;
    Verify if two ghosts occupies the same tile.
    &quot;&quot;&quot;
    def __contains_others(self, movingGhost):
        for ghost in self.ghosts:
            if ghost != movingGhost:
                if self.__equals(ghost.position, movingGhost.position): return True
        return False
    &quot;&quot;&quot;
    Move the ghosts through the map
    &quot;&quot;&quot;
    def __move_ghosts(self):
        for ghost in self.ghosts:
            if (self.count_loop % 2 == 0 or self.count_loop % 3) and ghost.is_weaken(): continue
            if self.count_loop % 2 == 0 and not ghost.is_weaken(): continue
            if self.__equals(ghost.position, Terrain.GHOST[0]):
                ghost.turn(Direction.FORWARD)
            elif self.__equals(ghost.position, Terrain.GHOST[1]):
                ghost.turn(Direction.FORWARD)
            elif self.__equals(ghost.position, Terrain.GHOST[2]):
                ghost.turn(Direction.UPWARD)
            elif self.__equals(ghost.position, Terrain.GHOST[3]):
                ghost.turn(Direction.BACKWARD)    
            else:
                angle = self.__get_angle(ghost, self.pacman)
                if ghost.is_weaken(): 
                    angle += 180
                ghost.turn(self.__get_direction(angle))
            old_position = copy(ghost.position)
            if ghost.direction == Direction.FORWARD:
                forbidden_direction = Direction.BACKWARD
            elif ghost.direction == Direction.BACKWARD:
                forbidden_direction = Direction.FORWARD
            elif ghost.direction == Direction.UPWARD:
                forbidden_direction = Direction.DOWNWARD
            elif ghost.direction == Direction.DOWNWARD:
                forbidden_direction = Direction.UPWARD
            count = 0 
            while self.__equals(ghost.position, old_position) or self.__contains_others(ghost):
                while True:
                    ghost.direction = randint(1, 4) 
                    if (ghost.possible_movement(ghost.direction, self.terrain) and ghost.direction != forbidden_direction) or count &gt; 100: break
                    count += 1
                ghost.move(self.terrain)
    &quot;&quot;&quot;
    Makes the Pacman eat (or being eaten) the ghosts, depending its state.
    &quot;&quot;&quot;
    def __eat_ghosts(self):
        for i in range(len(self.ghosts)):
            if self.__equals(self.ghosts[i].position, self.pacman.position):
                if self.ghosts[i].is_weaken():
                    self.ghosts[i].strengthen()
                    self.ghosts[i].position = copy(Terrain.GHOST[i])
                else:
                    self.lose_live()
    &quot;&quot;&quot;
    Render the screen (terrain + info)
    &quot;&quot;&quot;
    def __render(self):
        self.terrain.render(self.pacman, self.ghosts)
        print(&quot;LIVES: %d    SCORE: %d    LEVEL: %d&quot; % (self.context.lives, self.context.score, self.context.level))
    def loop(self): 
        self.count_loop += 1
        if self.terrain.is_clear():
            print(&quot;&quot;&quot;
CONGRATULATIONS! 
A NEW LEVEL WILL START IN FEW SECONDS.&quot;&quot;&quot;.decode(&#39;utf-8&#39;))
            time.sleep(1)
            self.context.level += 1
            self.start_new_level()
        self.__move_ghosts()
        self.pacman.move(self.terrain)
        self.__eat_ghosts()
        if self.countdown &gt; 0: self.countdown -= 1
        else:
            for ghost in self.ghosts: ghost.strengthen()
        if self.terrain.eat(self, self.pacman):
            for ghost in self.ghosts: ghost.weaken()
            self.countdown = 15
        self.__render()
    def set_direction(self, direction):
        if self.pacman.possible_movement(direction, self.terrain):
            self.pacman.turn(direction)
    def start_new_game(self):
        self.context.state = StateInitial(self.context)
    &quot;&quot;&quot;
    Start a new level. On a new level, lives and points are mantained.
    &quot;&quot;&quot;
    def start_new_level(self):
        self.terrain = Terrain()
        self.pacman = Pacman()
        self.ghosts = []
        for i in range(4): self.ghosts.append(Ghost(i))
        self.count_loop = 0
        self.countdown = 0
    &quot;&quot;&quot;
    Makes Pacman lose a life. 
    &quot;&quot;&quot;
    def lose_live(self):
        self.context.lives -= 1
        if self.context.lives &lt;= 0:
            self.context.state = StateGameOver(self.context)
        else:
            self.__render()
            print(&quot;&quot;&quot;
YOU LOST A LIVE.&quot;&quot;&quot;.decode(&#39;utf-8&#39;))
            time.sleep(2)
            self.pacman = Pacman()
            self.pacman = Pacman()
            self.ghosts = []
            for i in range(4): self.ghosts.append(Ghost(i))
            self.count_loop = 0
            self.countdown = 0
 
#---------------------------------
# IO MANAGER
#---------------------------------
def controller_windows():
    import Tkinter
    class Controller:
        SPEED = 0.2
        def __init__(self):
            self.game = Game() 
            self.start_game()
        def press_key(self, event):
            key = event.keysym.lower()
            if key == &quot;escape&quot;: #ESC
                return False
            elif key == &quot;n&quot;: #Enter
                self.game.start_new_game()
            elif key == &quot;d&quot;: #Right arrow
                self.game.set_direction(Direction.FORWARD)
            elif key == &quot;a&quot;: #Left arrow
                self.game.set_direction(Direction.BACKWARD)
            elif key == &quot;w&quot;: #Up arrow
                self.game.set_direction(Direction.UPWARD)
            elif key == &quot;s&quot;: #Down arrow
                self.game.set_direction(Direction.DOWNWARD)
            return True
        def loop(self):
            self.game.loop()   
            self.console.after(250, self.loop)
        def start_game(self):
            self.console = Tkinter.Tk()
            self.console.bind_all(&#39;&lt;Key&gt;&#39;, self.press_key)
            self.console.withdraw()
            try:
                self.console.after(250, self.loop)
                self.console.mainloop()
            except KeyboardInterrupt: pass
    Controller()
 
def controller_unix():
    import termios, tty, thread
    class NonBlockingConsole(object):
        def __enter__(self):
            self.old_settings = termios.tcgetattr(sys.stdin)
            tty.setcbreak(sys.stdin.fileno())
            return self
        def __exit__(self, type, value, traceback):
            termios.tcsetattr(sys.stdin, termios.TCSADRAIN, self.old_settings)
        def get_data(self):
            if select.select([sys.stdin], [], [], 0) == ([sys.stdin], [], []):
                return sys.stdin.read(1)
            return False
                
    class Controller:
        SPEED = 0.2
        def __init__(self):
            self.game = Game() 
            self.start_game()
        def press_key(self, nbc):
            key = str(nbc.get_data())
            if key == &#39;\x1b&#39;: #ESC
                return False
            elif key == &#39;n&#39;: #Enter
                self.game.start_new_game()
            elif key == &#39;d&#39;: #Right arrow
                self.game.set_direction(Direction.FORWARD)
            elif key == &#39;a&#39;: #Left arrow
                self.game.set_direction(Direction.BACKWARD)
            elif key == &#39;w&#39;: #Up arrow
                self.game.set_direction(Direction.UPWARD)
            elif key == &#39;s&#39;: #Down arrow
                self.game.set_direction(Direction.DOWNWARD)
            return True
        def loop(self, threadName): 
            while self.running:
                time.sleep(Controller.SPEED)
                self.game.loop()   
        def start_game(self):
            self.running = True
            thread.start_new_thread(self.loop, (&quot;Thread-1&quot;,))
            try:
                with NonBlockingConsole() as nbc:
                    while self.press_key(nbc): pass
            except KeyboardInterrupt: pass
            self.running = False
    Controller()
    
if __name__ == &#39;__main__&#39;:
    if platform.system() == &quot;Windows&quot;:
        controller_windows()
    else:
        controller_unix()</code></pre></noscript></div>

</div>


<p></input></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(Python 2.7) PySnake]]></title>
    <link href="http://abner-math.github.io/blog/2014/09/17/python-2-dot-7-pysnake/"/>
    <updated>2014-09-17T22:26:50-03:00</updated>
    <id>http://abner-math.github.io/blog/2014/09/17/python-2-dot-7-pysnake</id>
    <content type="html"><![CDATA[<p>Good night, readers. I&rsquo;m on vacation! Wehoo! To comemorate, I came back to do what I like most, that is to create little games on terminal, like this one below:</p>

<p style="text-align:center;"><img src="http://abner-math.github.io/images/posts/pysnake.png" alt="" /></p>

<center><a href="https://gist.githubusercontent.com/abner-math/300f93a9820c52e6a243/raw/916d003c2e82ef3d4026f4cf3e40ef31a6fd9f59/PySnake.py" download="PySnake.py">Click here to download</a></center>




<!-- more -->


<p>You can get the source code below. Have fun!</p>

<center><input id="spoiler" type="button" value="See source code" onclick="toggle_visibility('code');"></center>


<div id="code">
<div><script src='https://gist.github.com/300f93a9820c52e6a243.js?file=PySnake.py'></script>
<noscript><pre><code>#!/usr/bin/python
# -*-coding=utf-8 -*-
#-----------------------------------------------------------
# PySnake v2.2
# Created by: Abner Matheus
# E-mail: abner.math.c@gmail.com
# Github: http://github.com/picoledelimao
#-----------------------------------------------------------
import os, platform, time, sys, select
from random import randint
 
&quot;&quot;&quot;
Enumerate the directions that a snake can take
&quot;&quot;&quot;
class Direction:
    forward = 1
    backward = 2
    upward = 3
    downward = 4
 
&quot;&quot;&quot;
Control the movement and position of a snake
&quot;&quot;&quot;
class Snake:
    def __init__(self, x, y, width, height):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
    &quot;&quot;&quot;
    Turn the snake of direction
    &quot;&quot;&quot;
    def turn(self, direction):
        self.direction = direction
    &quot;&quot;&quot;
    Move the snake toward its direction
    Return false if the movement crossed the wall
    &quot;&quot;&quot;
    def move(self):
        if self.direction == Direction.forward:
            self.x += 1
            if self.x &gt;= self.width:
                self.x = 0
                return False
        elif self.direction == Direction.backward:
            self.x -= 1
            if self.x &lt; 0:
                self.x = self.width - 1
                return False
        elif self.direction == Direction.upward:
            self.y -= 1
            if self.y &lt; 0:
                self.y = self.height - 1
                return False
        elif self.direction == Direction.downward:
            self.y += 1
            if self.y &gt;= self.height:
                self.y = 0 
                return False
        return True
    &quot;&quot;&quot;
    Change snake&#39;s direction and move it at the same time
    &quot;&quot;&quot;
    def turn_and_move(self, direction):
        self.turn(direction)
        return self.move() 
 
&quot;&quot;&quot;
Keep information of a terrain object (fruit or obstacles)
&quot;&quot;&quot;
class TerrainObject:
    &quot;&quot;&quot;
    Verify if given position if empty
    &quot;&quot;&quot;
    def __is_empty(self, x, y, context):
        try:
            for snake in context.snakes:
                if snake.x == x and snake.y == y: return False
            for obstacle in context.obstacles:
                if obstacle.x == x and obstacle.y == y: return False
            if context.fruit.x == x and context.fruit.y == y: return False
        except AttributeError: pass
        return True
    &quot;&quot;&quot;
    Build a object in a random place of the terrain
    &quot;&quot;&quot;
    def __init__(self, context):
        while True:
            x = randint(0, context.width - 1)
            y = randint(0, context.height - 1)
            if self.__is_empty(x, y, context): break
        self.x = x
        self.y = y
    &quot;&quot;&quot;
    Verify if the snake&#39;s head hit that object
    &quot;&quot;&quot;
    def hit(self, snake):
        return self.x == snake.x and self.y == snake.y
 
&quot;&quot;&quot;
Keep information of the terrain
&quot;&quot;&quot;
class Terrain:
    __WHITE_SPACE = &#39; &#39;
    __SNAKE_BODY = &#39;0&#39;
    __FRUIT = &#39;*&#39;
    __OBSTACLE = &quot;~&quot;
    __HOR_BOUND = &quot;-&quot;
    __VER_BOUND = &quot;|&quot;
    &quot;&quot;&quot;
    Create a terrain of given width and height
    &quot;&quot;&quot;
    def __init__(self, width, height):
        self.width = width
        self.height = height
    &quot;&quot;&quot;
    Update terrain information using passed objects
    &quot;&quot;&quot;
    def __update(self, snakes, fruit, obstacles):
        self.matrix = [] 
        for i in range(self.height):
            self.matrix.append([])
            for j in range(self.width):
                self.matrix[i].append(Terrain.__WHITE_SPACE)
        self.matrix[fruit.y][fruit.x] = Terrain.__FRUIT
        for snake in snakes:
            self.matrix[snake.y][snake.x] = Terrain.__SNAKE_BODY
        for obstacle in obstacles:
            self.matrix[obstacle.y][obstacle.x] = Terrain.__OBSTACLE
    &quot;&quot;&quot;
    Return a string that shows a visual representation of the terrain
    &quot;&quot;&quot;
    def show(self, snakes, fruit, obstacles):
        self.__update(snakes, fruit, obstacles)  
        horizontal_bound = &quot;.&quot; + Terrain.__HOR_BOUND * (self.width) + &quot;.&quot; + &quot;\n&quot;
        result = horizontal_bound
        for line in self.matrix:
            result += Terrain.__VER_BOUND + &quot;&quot;.join(line) + Terrain.__VER_BOUND + &quot;\n&quot;
        result += horizontal_bound
        return result
 
&quot;&quot;&quot;
Responsible to show elements in the screen
&quot;&quot;&quot;
class View:
    LOGO = &quot;&quot;&quot;
██████╗ ██╗   ██╗███████╗███╗   ██╗ █████╗ ██╗  ██╗███████╗
██╔══██╗╚██╗ ██╔╝██╔════╝████╗  ██║██╔══██╗██║ ██╔╝██╔════╝
██████╔╝ ╚████╔╝ ███████╗██╔██╗ ██║███████║█████╔╝ █████╗  
██╔═══╝   ╚██╔╝  ╚════██║██║╚██╗██║██╔══██║██╔═██╗ ██╔══╝  
██║        ██║   ███████║██║ ╚████║██║  ██║██║  ██╗███████╗
╚═╝        ╚═╝   ╚══════╝╚═╝  ╚═══╝╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝
&quot;&quot;&quot;
    INITIAL = LOGO + &quot;&quot;&quot;
 
GAME CONTROLS:
=============================================================
PRESS &#39;N&#39; TO START A NEW GAME.
&#39;A&#39;, &#39;S&#39;, &#39;D&#39; OR &#39;W&#39; KEYS TO MOVE THE SNAKE.
ESC TO EXIT GAME.
=============================================================
 
CREATED BY: 
-------------------------------------------------------------
ABNER MATHEUS (abner.math.c@gmail.com)
&quot;&quot;&quot;
    DIFFICULTY = LOGO + &quot;&quot;&quot;
 
CHOOSE A DIFFICULTY BELOW:
=============================================================
1. VERY EASY
2. MEDIUM
3. HARD
=============================================================
 
OBJECTS:
-------------------------------------------------------------
* Fruit
~ Obstacle
&quot;&quot;&quot;
    GAME_OVER = &quot;&quot;&quot;
  ▄████  ▄▄▄       ███▄ ▄███▓▓█████     ▒█████   ██▒   █▓▓█████  ██▀███  
 ██▒ ▀█▒▒████▄    ▓██▒▀█▀ ██▒▓█   ▀    ▒██▒  ██▒▓██░   █▒▓█   ▀ ▓██ ▒ ██▒
▒██░▄▄▄░▒██  ▀█▄  ▓██    ▓██░▒███      ▒██░  ██▒ ▓██  █▒░▒███   ▓██ ░▄█ ▒
░▓█  ██▓░██▄▄▄▄██ ▒██    ▒██ ▒▓█  ▄    ▒██   ██░  ▒██ █░░▒▓█  ▄ ▒██▀▀█▄  
░▒▓███▀▒ ▓█   ▓██▒▒██▒   ░██▒░▒████▒   ░ ████▓▒░   ▒▀█░  ░▒████▒░██▓ ▒██▒
 ░▒   ▒  ▒▒   ▓▒█░░ ▒░   ░  ░░░ ▒░ ░   ░ ▒░▒░▒░    ░ ▐░  ░░ ▒░ ░░ ▒▓ ░▒▓░
  ░   ░   ▒   ▒▒ ░░  ░      ░ ░ ░  ░     ░ ▒ ▒░    ░ ░░   ░ ░  ░  ░▒ ░ ▒░
░ ░   ░   ░   ▒   ░      ░      ░      ░ ░ ░ ▒       ░░     ░     ░░   ░ 
      ░       ░  ░       ░      ░  ░       ░ ░        ░     ░  ░   ░     
                                                     ░                   
PRESS &#39;N&#39; TO START A NEW GAME.
&quot;&quot;&quot;
    def __init__(self, context):
        self.context = context
        self.terrain = Terrain(self.context.width, self.context.height)
    &quot;&quot;&quot;
    Render terrain and game information in the screen
    &quot;&quot;&quot;
    def render_context(self, context):
    info = &quot;LIVES: %d          SCORE: %d&quot; % (self.context.lives, self.context.score) + &quot;\n&quot;
        terrain = self.terrain.show(self.context.snakes, self.context.fruit, self.context.obstacles)
        View.render(info + terrain)
    &quot;&quot;&quot;&quot;
    Clear the screen (platform dependent)
    &quot;&quot;&quot;
    @staticmethod
    def __clear_screen():
    if platform.system() == &quot;Windows&quot;: os.system(&quot;cls&quot;)
        else: os.system(&quot;clear&quot;)
    &quot;&quot;&quot;
    Show a message in the screen
    &quot;&quot;&quot;
    @staticmethod
    def render(message):
        import sys
        reload(sys)
        sys.setdefaultencoding(&#39;utf-8&#39;)
        View.__clear_screen()
        print(message.decode(&#39;utf-8&#39;))
 
&quot;&quot;&quot;
Stores the actual state of the game (interface)
&quot;&quot;&quot;
class GameState:
    def loop(self, controller): 
        raise NotImplementedError()
    def new_game(self): 
        raise NotImplementedError()
    def set_difficulty(self, difficulty): 
        raise NotImplementedError()
    def set_direction(self, direction):
        raise NotImplementedError()
 
&quot;&quot;&quot;
Initial state of the game
&quot;&quot;&quot;
class StateInitial(GameState):
    def __init__(self, context):
        self.context = context
    def loop(self, controller):
        View.render(View.INITIAL)
    def new_game(self): 
        self.context.state = StatePickDifficulty(self.context) 
    def set_difficulty(self, difficulty): pass
    def set_direction(self, direction): pass 
 
&quot;&quot;&quot;
Pick difficulty screen
&quot;&quot;&quot;
class StatePickDifficulty(GameState):
    def __init__(self, context):
        self.context = context
    &quot;&quot;&quot;
    Main loop of the game
    &quot;&quot;&quot;
    def loop(self, controller):
        View.render(View.DIFFICULTY)
    &quot;&quot;&quot;
    Start a new game
    &quot;&quot;&quot;
    def new_game(self): 
        self.context.state = StateInitial(self.context) 
    &quot;&quot;&quot;
    Set game difficulty
    &quot;&quot;&quot;
    def set_difficulty(self, difficulty):
        self.context.difficulty = difficulty
        self.context.state = StatePlaying(self.context)
    &quot;&quot;&quot;
    Change snake&#39;s direction
    &quot;&quot;&quot;
    def set_direction(self, direction): pass
 
&quot;&quot;&quot;
Here is where the game happens itself
&quot;&quot;&quot;
class StatePlaying(GameState):
    def __init__(self, context):
        self.context = context
        self.width = self.context.width
        self.height = self.context.height
        self.lives = self.context.lives
        self.score = 0 
        self.view = View(self)
        self.snakes = [Snake(self.width / 2, self.height / 2, self.width, self.height)] 
        self.fruit = TerrainObject(self)
        self.direction = Direction.forward 
        self.direction_queue = [] 
        self.snakes_queue = [] 
        self.obstacles = [] 
        number_of_obstacles = randint((context.difficulty - 1) * 2, (self.context.difficulty - 1) * 3)
        for i in range(number_of_obstacles):
            self.obstacles.append(TerrainObject(self))
    &quot;&quot;&quot;
    Stores snakes&#39; movement in a queue
    &quot;&quot;&quot;
    def __queue_movement(self):
        for i in range(1, len(self.snakes)):
            self.direction_queue[i-1].append(self.snakes[i-1].direction)
    &quot;&quot;&quot;
    Update the movement queue
    &quot;&quot;&quot;
    def __dequeue_movement(self):
        for i in range(1, len(self.snakes)):
            self.direction_queue[i-1].pop(0) 
    &quot;&quot;&quot;
    Check if snake&#39;s head hit some obstacle (including itself)
    &quot;&quot;&quot;
    def __hit_obstacle(self):
        for i in range(1, len(self.snakes)):
            if self.snakes[0].x == self.snakes[i].x and self.snakes[0].y == self.snakes[i].y:
                return True
        for obstacle in self.obstacles:
            if self.snakes[0].x == obstacle.x and self.snakes[0].y == obstacle.y:
                return True
        return False
    &quot;&quot;&quot;
    Move all the snake parts towards its direction
    &quot;&quot;&quot;
    def __move(self):
        for i in range(1, len(self.snakes)):
            self.snakes[i].turn_and_move(self.direction_queue[i-1][0]) 
        success = self.snakes[0].turn_and_move(self.direction)
        if self.__hit_obstacle():
            self.lives = 0
            return False
        return success 
    &quot;&quot;&quot;
    Makes the snake grow
    &quot;&quot;&quot;
    def __queue_growth(self):
        x = self.snakes[0].x
        y = self.snakes[0].y
        self.snakes_queue.append(Snake(x, y, self.width, self.height)) 
    &quot;&quot;&quot;
    Check if snake left fruit position (so its new part can be appended)
    &quot;&quot;&quot;
    def __is_free(self, queued_snake): 
        for existing_snake in self.snakes:
            if existing_snake.x == queued_snake.x and existing_snake.y == queued_snake.y:
                return False
        return True 
    &quot;&quot;&quot;
    Append a snake&#39;s part that was in queue
    &quot;&quot;&quot;
    def __dequeue_growth(self):
        for i in range(len(self.snakes_queue)-1,-1,-1):
            if self.__is_free(self.snakes_queue[i]):
                self.snakes.append(self.snakes_queue[i]) 
                self.snakes_queue.pop(i) 
                self.direction_queue.append([])
    def loop(self, controller):
        if controller.speed &gt; 40: 
            controller.speed -= 1
        if self.fruit.hit(self.snakes[0]):
            self.fruit = TerrainObject(self)
            self.score += 1
            self.__queue_growth()
        self.__queue_movement() 
        if not self.__move():
            self.lives -= 1
            if self.lives &lt; 0: 
                self.context.state = StateGameOver(self.context)
                controller.speed = 300
                return
        self.__dequeue_movement() 
        self.__dequeue_growth()
        self.view.render_context(self) 
    def new_game(self):
        self.context.state = StateInitial(self.context)
    def set_difficulty(self, difficulty): pass
    def set_direction(self, direction):
        self.direction = direction
 
&quot;&quot;&quot;
Game over screen
&quot;&quot;&quot;
class StateGameOver(GameState):
    def __init__(self, context):
        self.context = context
    def loop(self, controller):
        View.render(View.GAME_OVER)
    def new_game(self):
        self.context.state = StatePickDifficulty(self.context)
    def set_difficulty(self, difficulty): pass
    def set_direction(self, direction): pass
 
class Game:
    def __init__(self, width, height, lives):
        self.width = width
        self.height = height
        self.lives = lives
        self.state = StateInitial(self) 
    def loop(self, controller):
        self.state.loop(controller)
    def new_game(self):
        self.state.new_game()
    def set_difficulty(self, difficulty):
        self.state.set_difficulty(difficulty)
    def set_direction(self, direction):
        self.state.set_direction(direction)
 
#-------------------------------
# IO MANAGER
#--------------------------------
def controller_windows():
    import Tkinter
    class Controller:
        def __init__(self):
            self.game = Game(30, 15, 3) 
            self.speed = 300 
            self.start_game()
        def press_key(self, event):
            key = event.keysym.lower()
            if key == &quot;escape&quot;: #ESC
                return False
            elif key == &quot;n&quot;: #Enter
                self.game.new_game()
            elif key == &quot;1&quot; or key == &quot;2&quot; or key == &quot;3&quot;: 
                self.game.set_difficulty(int(key)) 
            elif key == &quot;d&quot;: #Right arrow
                self.game.set_direction(Direction.forward) 
            elif key == &quot;a&quot;: #Left arrow
                self.game.set_direction(Direction.backward)
            elif key == &quot;w&quot;: #Up arrow
                self.game.set_direction(Direction.upward)
            elif key == &quot;s&quot;: #Down arrow
                self.game.set_direction(Direction.downward)
            return True
        def loop(self): 
            self.game.loop(self)   
            self.console.after(self.speed, self.loop)
        def start_game(self):
            self.console = Tkinter.Tk()
            self.console.bind_all(&#39;&lt;Key&gt;&#39;, self.press_key)
            self.console.withdraw()
            try:
                self.console.after(self.speed, self.loop)
                self.console.mainloop()
            except KeyboardInterrupt: pass
    Controller()
    
def controller_unix():
    import termios, tty, thread
    class NonBlockingConsole(object):
        def __enter__(self):
            self.old_settings = termios.tcgetattr(sys.stdin)
            tty.setcbreak(sys.stdin.fileno())
            return self
        def __exit__(self, type, value, traceback):
            termios.tcsetattr(sys.stdin, termios.TCSADRAIN, self.old_settings)
        def get_data(self):
            if select.select([sys.stdin], [], [], 0) == ([sys.stdin], [], []):
                return sys.stdin.read(1)
            return False
     
    class Controller:
        def __init__(self):
            self.game = Game(30, 15, 3) 
            self.speed = 300 
            self.start_game()
        def press_key(self, nbc):
            key = str(nbc.get_data())
            if key == &#39;\x1b&#39;: #ESC
                return False
            elif key == &#39;n&#39;: #Enter
                self.game.new_game()
            elif key == &#39;1&#39; or key == &#39;2&#39; or key == &#39;3&#39;: 
                self.game.set_difficulty(int(key)) 
            elif key == &#39;d&#39;: #Right arrow
                self.game.set_direction(Direction.forward) 
            elif key == &#39;a&#39;: #Left arrow
                self.game.set_direction(Direction.backward)
            elif key == &#39;w&#39;: #Up arrow
                self.game.set_direction(Direction.upward)
            elif key == &#39;s&#39;: #Down arrow
                self.game.set_direction(Direction.downward)
            return True
        def loop(self, threadName): 
            while self.running:
                time.sleep(self.speed/1000.0)
                self.game.loop(self)   
        def start_game(self):
            self.running = True
            thread.start_new_thread(self.loop, (&quot;Thread-1&quot;,))
            try:
                with NonBlockingConsole() as nbc:
                    while self.press_key(nbc): pass
            except KeyboardInterrupt: pass
            self.running = False
    Controller()
    
if __name__ == &#39;__main__&#39;:
    if platform.system() == &quot;Windows&quot;:
        controller_windows()
    else:
        controller_unix()</code></pre></noscript></div>

</div>


<p></input></p>
]]></content>
  </entry>
  
</feed>
